{"version":3,"sources":["../../../helpmodule.js","index.ts"],"names":["find4","x","y","matrix","wantedChar","returnable","length","push","get8","positions","forEach","pos","undefined","num2letter","chr","String","fromCharCode","hex2bin","hex","nulls","nullAmount","Array","map","e","join","parseInt","toString","substr","num2hex","num","dec2bin","bin2dec","binary","swapPositions","arr","index1","index2","insertValueAtMutating","index","newValue","splice","arrayRotate","reverse","unshift","pop","shift","trampoline","fn","uniqueShallow","item","i","slice","includes","uniqueDeep","some","other","JSON","stringify","combineMatrices","larger","smaller","largerLine","lineNum","startPoint","Math","floor","char","charNum","flatten","reduce","flat","toFlatten","concat","isArray","insert","array","rest","reduceSum","acc","next","reduceMultiply","reduceFlatten","permutations","xs","ret","j","returnUniqueAmountsAsObj","val","betweenOrEqual","number","min","max","gcd2","a","b","NaN","gcd","n","lcm2","lcm"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\n\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) => (\n  acc + next, 0);\n\nconst reduceMultiply = (acc, next) => (\n  acc * next, 1);\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\n\n\n\nexport {\n  find4,\n  get8,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd\n}","import { dec2bin, bin2dec } from \"../../../helpmodule.js\";\r\n\r\ntype Write = {\r\n    address: number,\r\n    binary: string\r\n}\r\n\r\ntype Command = {\r\n    bitMask: string,\r\n    writes: Write[]\r\n}\r\n\r\n\r\nconst startTime = new Date().getTime()\r\n\r\n\r\n\r\n\r\nconst padTo36FromLeft = (str: string) =>\r\n    Array.from(new Array((36 - str.length)))\r\n        .map(e => 0).join(\"\")\r\n    +\r\n    str\r\n\r\nconst parseInput = (input: string): Command[] =>\r\n    input.split(/\\s*mask = /g)\r\n        .slice(1)\r\n        .map((line: string): Command => ({\r\n            bitMask: line.split(/\\n\\s*/)[0],\r\n            writes: line\r\n                .split(/\\s*\\n\\s*/g)\r\n                .slice(1)\r\n                .map((writeLine: string): Write => ({\r\n                    address: parseInt(writeLine.match(/\\[(\\d+)\\]/)![1]),\r\n                    binary:\r\n                        padTo36FromLeft(\r\n                            dec2bin(\r\n                                parseInt(writeLine.match(/= (\\d+)/)![1])))\r\n                }))\r\n        }))\r\n\r\n\r\nconst applyMaskAndGetResult = (binary: string, bitMask: string): string =>\r\n    binary.split(\"\")\r\n        .map((num: string, i): string => bitMask[i] === \"X\" ? num : bitMask[i]).join(\"\")\r\n\r\n\r\nconst inputUsed = getInput()\r\n\r\n\r\nlog(\"a:\\n\",\r\n    parseInput(\r\n        inputUsed\r\n    )\r\n        .map((obj: Command): { keys: number[], values: number[] } => (\r\n            {\r\n                keys: obj.writes.map((write: Write): number => write.address),\r\n                values: obj.writes\r\n                    .map((write: Write): string => applyMaskAndGetResult(write.binary, obj.bitMask))\r\n                    .map(bin2dec)\r\n            }))\r\n        .flatMap((obj: { keys: number[], values: number[] }): { key: number, value: number }[] =>\r\n            obj.keys.map((num: number, i) => ({ key: num, value: obj.values[i] })))\r\n        .filter((obj: any, i, arr) => !arr.slice(i + 1).find(another => another.key === obj.key))\r\n        .map(e => e.value)\r\n        .reduce((a, b) => a + b)\r\n\r\n\r\n)\r\n\r\n\r\nlog(\"b:\",\r\n)\r\n\r\nlog(\r\n    \"everything took\",\r\n    new Date().getTime() - startTime,\r\n    \"ms\"\r\n)\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\n\r\nfunction getTestInput(): string {\r\n    return (`mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\r\n    mem[8] = 11\r\n    mem[7] = 101\r\n    mem[8] = 0`)\r\n}\r\n\r\n\r\n\r\nfunction getInput(): string {\r\n    return (\r\n        `mask = X101011X011X10101011000001X00XX0X000\r\n        mem[60126] = 9674686\r\n        mem[39254] = 523988\r\n        mem[54849] = 40771927\r\n        mem[29690] = 10110\r\n        mem[10782] = 975308\r\n        mem[43128] = 4347\r\n        mask = 1X0X00101111100010100X001010XX0X0XXX\r\n        mem[60704] = 43881206\r\n        mem[63842] = 12369309\r\n        mem[45876] = 33941457\r\n        mem[7001] = 347\r\n        mem[57168] = 5484326\r\n        mem[9010] = 1526598\r\n        mask = XX0X0111X1101X1X101X110001100X101X00\r\n        mem[64667] = 9335\r\n        mem[557] = 103838228\r\n        mask = 01110111011110X0101X110000100X10100X\r\n        mem[37083] = 252803732\r\n        mem[38441] = 264510\r\n        mem[10471] = 6258763\r\n        mem[6599] = 7469003\r\n        mem[31917] = 4440673\r\n        mask = X011X01000X110X1X00X0100X0X000100011\r\n        mem[34590] = 1012\r\n        mem[45359] = 8432\r\n        mem[3178] = 33474\r\n        mem[3722] = 3556\r\n        mem[49428] = 9026812\r\n        mem[10938] = 35041698\r\n        mask = 01X1X11X011X1X0X11X0100X11101X010011\r\n        mem[42766] = 6617\r\n        mem[49563] = 960913\r\n        mem[47263] = 269\r\n        mem[31711] = 43288638\r\n        mem[41482] = 64610360\r\n        mem[16665] = 600\r\n        mem[32730] = 37650\r\n        mask = 00XX0X101111XXX1101X0X0X001000101100\r\n        mem[34707] = 40982522\r\n        mem[9182] = 545101093\r\n        mem[46509] = 44467432\r\n        mem[14087] = 1863\r\n        mem[40214] = 126903285\r\n        mem[60120] = 56379991\r\n        mask = 01XX10110110100010X100X0X10111100000\r\n        mem[30183] = 134656354\r\n        mem[49417] = 78985543\r\n        mem[14770] = 18142096\r\n        mem[61486] = 39482\r\n        mem[52941] = 98022933\r\n        mem[46433] = 952154\r\n        mask = 00010X10X1110010101001011001X100X101\r\n        mem[20851] = 938875\r\n        mem[42517] = 2746639\r\n        mem[18095] = 623480\r\n        mem[45359] = 554\r\n        mem[52625] = 9537360\r\n        mem[3178] = 634749644\r\n        mem[11612] = 1338\r\n        mask = 01000X1X111XX110101X10000X0XX11011X1\r\n        mem[33690] = 133806\r\n        mem[11082] = 47091974\r\n        mem[18025] = 716988\r\n        mem[1627] = 3080902\r\n        mask = 010101X1111XX11010X00000XX11XX0X0010\r\n        mem[1839] = 55761\r\n        mem[34016] = 19521\r\n        mem[32399] = 2550\r\n        mem[56670] = 486944499\r\n        mask = 0100101101110XX01011X100101111X10011\r\n        mem[57556] = 1980\r\n        mem[15099] = 1000\r\n        mem[2248] = 11713417\r\n        mask = 0X0X011X1111X110101X0000001000101X00\r\n        mem[28478] = 2335\r\n        mem[49509] = 262\r\n        mem[18296] = 16275\r\n        mem[3851] = 228035\r\n        mem[30877] = 53163521\r\n        mask = 000X01X010100X1010101101100000X0X100\r\n        mem[38075] = 79529\r\n        mem[42738] = 45415\r\n        mem[24109] = 1567958\r\n        mem[17143] = 93137\r\n        mem[45101] = 814797986\r\n        mask = XX01XX1X011X10X0101011000000010000X1\r\n        mem[1576] = 443528583\r\n        mem[36865] = 148\r\n        mem[46509] = 482\r\n        mem[62388] = 15\r\n        mem[63623] = 539909442\r\n        mem[41370] = 128\r\n        mem[44715] = 22308\r\n        mask = 11011X1000101X00XXX001X110X00100010X\r\n        mem[35152] = 34820483\r\n        mem[16033] = 65763\r\n        mem[1882] = 1027800\r\n        mask = 00010X10111110X0X010X0110010X01X1X01\r\n        mem[59815] = 2490477\r\n        mem[49157] = 6507122\r\n        mem[30800] = 590164239\r\n        mem[59044] = 165654579\r\n        mask = 01010X1111111X101010011X0011X0001011\r\n        mem[10137] = 228\r\n        mem[2311] = 13276802\r\n        mask = XX01X1X101101010101100001X000010000X\r\n        mem[34583] = 1655642\r\n        mem[11286] = 132679008\r\n        mem[22109] = 157717238\r\n        mask = 0001001011111X1X0X101XX11X1X101100X1\r\n        mem[57742] = 26691\r\n        mem[6874] = 10458032\r\n        mem[53037] = 2388387\r\n        mem[12331] = 5770\r\n        mem[51728] = 2135\r\n        mem[9580] = 487489805\r\n        mask = 01001X11011110X0X0X01X1100000111XXX1\r\n        mem[53769] = 55803305\r\n        mem[56229] = 24695063\r\n        mem[19171] = 48736390\r\n        mem[64782] = 735\r\n        mem[3081] = 280948\r\n        mem[57365] = 846847157\r\n        mask = 0X000110X1X11X1X10111000X010000XXX00\r\n        mem[61422] = 1126\r\n        mem[22207] = 67628317\r\n        mem[9539] = 61546790\r\n        mem[1131] = 130904490\r\n        mem[52684] = 8379637\r\n        mem[24366] = 383662099\r\n        mask = 010X1111011X1000X0X11X101X00101X1010\r\n        mem[18109] = 6735\r\n        mem[32797] = 531499843\r\n        mem[53585] = 432\r\n        mask = 100000X0111X100X1XX000X0101100110000\r\n        mem[7943] = 196928\r\n        mem[22176] = 12548\r\n        mem[30990] = 446363\r\n        mem[160] = 22025\r\n        mem[4615] = 566343\r\n        mask = 0X11011101X1X0011X011101111101001001\r\n        mem[39520] = 714461\r\n        mem[45101] = 3821808\r\n        mem[62323] = 6386948\r\n        mask = 01X0110X01XX100010110010011001000X01\r\n        mem[37344] = 447\r\n        mem[3023] = 855524337\r\n        mem[23128] = 112513310\r\n        mem[6564] = 11\r\n        mask = 0100X01XX111XX1X10111100001110001X10\r\n        mem[62178] = 63123\r\n        mem[55172] = 153103\r\n        mem[51929] = 181344\r\n        mem[34661] = 1972\r\n        mem[54999] = 1068\r\n        mem[59358] = 992\r\n        mask = 1001011XX0111XX010100X0001001X11X0X0\r\n        mem[41893] = 479\r\n        mem[6599] = 1981844\r\n        mem[46760] = 216449\r\n        mem[50221] = 811\r\n        mask = X0X10010111X101001100X01X01X11101X10\r\n        mem[25689] = 136\r\n        mem[10938] = 28382\r\n        mem[16643] = 197364\r\n        mem[51281] = 617\r\n        mem[16153] = 3676\r\n        mem[26490] = 384\r\n        mask = 010001X00X11100011100010111010X010X0\r\n        mem[64133] = 208\r\n        mem[24062] = 903539668\r\n        mem[36044] = 2001\r\n        mem[23144] = 1011029\r\n        mem[22716] = 11499\r\n        mem[59581] = 17899405\r\n        mem[26171] = 111934167\r\n        mask = 010010110X101000101XXX00000111001101\r\n        mem[43291] = 3112\r\n        mem[19446] = 5600478\r\n        mem[62398] = 341768545\r\n        mem[30567] = 465047\r\n        mem[38317] = 22125824\r\n        mask = 00X101101111101000X011X1X00X10X0X101\r\n        mem[53713] = 409555\r\n        mem[55388] = 65118\r\n        mem[54952] = 133834612\r\n        mem[25132] = 42713528\r\n        mem[16165] = 2107530\r\n        mask = 101101111111101100X0X111X1000X101X1X\r\n        mem[46469] = 6516\r\n        mem[58152] = 331216697\r\n        mem[1931] = 23454\r\n        mem[63623] = 304198968\r\n        mem[5559] = 32986355\r\n        mask = 0X0111XX01111X00101X10000X10010010X1\r\n        mem[54268] = 619\r\n        mem[50248] = 882\r\n        mem[12816] = 850402\r\n        mask = 010X0110011X100X1X10X1101X1XX0X11101\r\n        mem[37158] = 8631\r\n        mem[5913] = 1852245\r\n        mem[39724] = 809871\r\n        mem[27706] = 2649386\r\n        mem[53037] = 187717225\r\n        mask = 00011X110110101010X0X11100X11X1X1000\r\n        mem[22063] = 97071\r\n        mem[62330] = 777\r\n        mem[13645] = 8634786\r\n        mask = 0XXXX111011110X0101X100X010001X0X000\r\n        mem[3609] = 1585\r\n        mem[55533] = 3654\r\n        mem[46561] = 27985772\r\n        mem[49761] = 1723550\r\n        mem[9580] = 123963\r\n        mem[30529] = 15486580\r\n        mask = 01011111011X101X1011100X001101100X00\r\n        mem[386] = 5196729\r\n        mem[26441] = 930769\r\n        mem[51597] = 160686\r\n        mem[34426] = 89786878\r\n        mem[7046] = 1642552\r\n        mem[58359] = 19998\r\n        mask = X01110X1X11X1X0X100110XXX11101000011\r\n        mem[52684] = 413134467\r\n        mem[41057] = 237240996\r\n        mem[4615] = 1050604472\r\n        mem[37298] = 464\r\n        mem[10624] = 166667\r\n        mem[51214] = 189464\r\n        mask = 0011111101X01000101111XXX101X1101001\r\n        mem[57892] = 4128\r\n        mem[23904] = 1230477\r\n        mem[37354] = 295321\r\n        mem[9213] = 18002\r\n        mem[19975] = 93077192\r\n        mask = 1101011101X01111100010XX01X001000010\r\n        mem[9629] = 585\r\n        mem[14618] = 414\r\n        mem[46327] = 110854046\r\n        mem[24296] = 101\r\n        mem[15485] = 3005564\r\n        mask = X001XX1X0010X010101X1101100011000X01\r\n        mem[41309] = 445635\r\n        mem[48838] = 55661\r\n        mem[46592] = 765710\r\n        mem[18993] = 4196275\r\n        mask = 10010011X0100010X0100X01000X10001001\r\n        mem[56025] = 1496\r\n        mem[41771] = 3244\r\n        mem[19132] = 888\r\n        mem[65367] = 208629904\r\n        mem[59728] = 9087603\r\n        mask = 0101X1X0011010011X1001X111111XX11X01\r\n        mem[58407] = 87107553\r\n        mem[28815] = 68182\r\n        mem[28313] = 2239\r\n        mem[39552] = 101470\r\n        mask = 0111011101101X01X001001111010111XXXX\r\n        mem[8813] = 400372\r\n        mem[45602] = 32028274\r\n        mem[24857] = 114\r\n        mem[61754] = 95\r\n        mem[30298] = 580278\r\n        mask = 11011X110X1010X010X001010X0XX10X0011\r\n        mem[55] = 1059\r\n        mem[52684] = 56819312\r\n        mem[51597] = 2017\r\n        mem[39454] = 931156481\r\n        mem[62166] = 62175870\r\n        mem[36867] = 470\r\n        mem[47415] = 1746\r\n        mask = 11010010XX1X10X0101XX1X001000110000X\r\n        mem[1579] = 483360842\r\n        mem[28054] = 6824\r\n        mem[2134] = 7557\r\n        mem[47741] = 701257\r\n        mem[51788] = 731562\r\n        mem[61220] = 6536939\r\n        mem[46561] = 882\r\n        mask = 010X0110X110X11010101X0X011101001001\r\n        mem[34992] = 709195313\r\n        mem[629] = 47845214\r\n        mem[5317] = 14225\r\n        mem[12844] = 723\r\n        mem[41998] = 7106433\r\n        mem[9010] = 425846\r\n        mask = XX11111101111010X0XX1010010X10100XX1\r\n        mem[4161] = 30022\r\n        mem[47290] = 14778\r\n        mem[46760] = 483\r\n        mem[42376] = 1286\r\n        mem[9346] = 8742\r\n        mask = 1101001011X1100010XX11011X0001010X00\r\n        mem[5481] = 17524\r\n        mem[45359] = 5898\r\n        mem[34562] = 1689874\r\n        mem[23144] = 250958525\r\n        mem[55571] = 7375458\r\n        mem[38757] = 370\r\n        mask = 01010X101111X1X01011010000010001100X\r\n        mem[17410] = 85534302\r\n        mem[12631] = 253750\r\n        mem[61106] = 613785883\r\n        mem[18024] = 34275\r\n        mem[48546] = 680\r\n        mem[41751] = 140\r\n        mask = 1X01X010X01010X0101X10011X0001010100\r\n        mem[20073] = 8549591\r\n        mem[28358] = 12445\r\n        mem[49845] = 8275\r\n        mem[23873] = 20426966\r\n        mem[18109] = 378612521\r\n        mem[55852] = 52955029\r\n        mask = X10101110XX0111110XX100X011001101X00\r\n        mem[16969] = 474\r\n        mem[28358] = 2430\r\n        mem[34229] = 51117\r\n        mask = 01101111011110XX1X10X0010X01000X1000\r\n        mem[20344] = 4618\r\n        mem[45257] = 226807155\r\n        mem[61651] = 2271\r\n        mask = 01XXX1X00110100X10X0111100X100101101\r\n        mem[43924] = 1467\r\n        mem[34016] = 15\r\n        mem[35565] = 97087604\r\n        mem[28171] = 595\r\n        mem[65534] = 4049200\r\n        mask = 100000101111100XX0100000101000001X0X\r\n        mem[5481] = 1424699\r\n        mem[27180] = 36197\r\n        mem[34669] = 131477593\r\n        mem[8450] = 37506\r\n        mem[4928] = 11393\r\n        mask = 01110111011110001X11010010111XX010X0\r\n        mem[18923] = 17613\r\n        mem[55846] = 20954445\r\n        mem[39254] = 51926728\r\n        mem[38075] = 130\r\n        mem[15418] = 44585145\r\n        mask = X00101101111X0101010001X1X01000001X1\r\n        mem[35199] = 312510765\r\n        mem[62398] = 999656\r\n        mem[55533] = 37897408\r\n        mem[5648] = 1036966443\r\n        mask = 010011110111101XXX1011101000011X1000\r\n        mem[19738] = 151629\r\n        mem[56289] = 189790\r\n        mem[35953] = 15255399\r\n        mem[52671] = 396\r\n        mem[11845] = 993740\r\n        mask = 1101001000111X1X101XX100010001001001\r\n        mem[34411] = 295\r\n        mem[56671] = 2362723\r\n        mask = 1101XX110X10XX1X10101100000001011100\r\n        mem[7337] = 8237094\r\n        mem[7031] = 118473\r\n        mem[39047] = 2581731\r\n        mem[51238] = 451786815\r\n        mem[18409] = 243\r\n        mask = X00101101X10X0101X10011X10X000101000\r\n        mem[46760] = 244623\r\n        mem[40204] = 3603820\r\n        mem[52129] = 3506\r\n        mem[16653] = 21230148\r\n        mem[41485] = 33094\r\n        mem[60015] = 107\r\n        mask = X101011001111000101X0X111000X0X00X0X\r\n        mem[42738] = 3889911\r\n        mem[61025] = 3996\r\n        mem[30822] = 319759319\r\n        mem[53445] = 6639088\r\n        mem[29654] = 4338\r\n        mem[21504] = 57158603\r\n        mask = X0111111XX11X000101101X1101001100001\r\n        mem[5225] = 6975\r\n        mem[30877] = 1878\r\n        mem[46079] = 1189855\r\n        mem[19002] = 3809\r\n        mem[18908] = 28205\r\n        mem[42747] = 159071873\r\n        mem[19144] = 899748\r\n        mask = 0101X1110100111X0XX1X1001X1001100000\r\n        mem[34377] = 5331828\r\n        mem[52109] = 3671\r\n        mem[9629] = 10211687\r\n        mask = 0101X100XX10X00X111X000111X11X1X0001\r\n        mem[62093] = 4555750\r\n        mem[22728] = 1902\r\n        mem[25369] = 21501187\r\n        mem[38470] = 1713\r\n        mem[18034] = 9033\r\n        mask = X0X101111111X0X1X01011100100000X1110\r\n        mem[16231] = 25595\r\n        mem[7337] = 64222006\r\n        mem[38717] = 17998107\r\n        mem[17143] = 56331\r\n        mem[3851] = 17\r\n        mem[36652] = 810070\r\n        mask = 1X00X11111X011101X1111110110X0110010\r\n        mem[40873] = 245915859\r\n        mem[38090] = 328774\r\n        mem[45602] = 361242\r\n        mem[40307] = 189025934\r\n        mem[55533] = 902335450\r\n        mem[48681] = 3398403\r\n        mask = 0X011111011010111XX1100001X100001000\r\n        mem[27200] = 7180\r\n        mem[41393] = 197862524\r\n        mem[35565] = 6433\r\n        mask = 00111X1X011X100X10X10X0010100X100000\r\n        mem[22127] = 2039\r\n        mem[49761] = 2974\r\n        mem[32236] = 133316\r\n        mem[36465] = 233114\r\n        mask = 1X0101111X11101X10100100011100001X01\r\n        mem[61195] = 12674536\r\n        mem[16732] = 11908077\r\n        mem[5648] = 46490\r\n        mem[15994] = 87271\r\n        mem[34229] = 53000\r\n        mem[22063] = 966438\r\n        mem[59044] = 1966845\r\n        mask = 0X01X11101X01X1XXX111000X11001101001\r\n        mem[16961] = 3007244\r\n        mem[24296] = 229759353\r\n        mem[5240] = 248972\r\n        mem[33165] = 870504\r\n        mask = 110X11110110101X1000X1110100XX0X0111\r\n        mem[43104] = 394289736\r\n        mem[50640] = 8371\r\n        mem[19002] = 22263052\r\n        mask = X00X01X0X01X10001X1X1010010110X11001\r\n        mem[52725] = 3596\r\n        mem[1830] = 852\r\n        mem[17859] = 5145419\r\n        mem[24109] = 3266\r\n        mask = 01001XX1011X1000X0X100X000X11100XX01\r\n        mem[2939] = 21652\r\n        mem[31549] = 6146\r\n        mem[46081] = 89954225\r\n        mem[56499] = 566\r\n        mem[46561] = 523763\r\n        mask = 001X001X111X011110X1X11XX1X01X101100\r\n        mem[9682] = 1883\r\n        mem[24602] = 937546207\r\n        mem[24588] = 2933\r\n        mem[11845] = 7846310\r\n        mem[33451] = 177708\r\n        mem[25861] = 52153\r\n        mem[60126] = 6178305\r\n        mask = 0100001011111X1110XXX1X0000001101010\r\n        mem[32925] = 124064771\r\n        mem[47229] = 470344\r\n        mem[19578] = 14298\r\n        mem[5024] = 281\r\n        mem[34016] = 4572362\r\n        mask = XX01X1X1011010111011X1111X1011011011\r\n        mem[41309] = 6227\r\n        mem[23647] = 137\r\n        mem[17469] = 322208\r\n        mem[55172] = 193476\r\n        mem[65367] = 98630465\r\n        mem[23822] = 127119\r\n        mask = 0101011001111X00X010X0011110X1100101\r\n        mem[59963] = 124947188\r\n        mem[42597] = 1283704\r\n        mem[18482] = 7915\r\n        mem[47413] = 471406\r\n        mem[43629] = 128188581\r\n        mem[63257] = 228254709\r\n        mask = 0X11X111011X100X10X10X0111X001101XX1\r\n        mem[55436] = 131315318\r\n        mem[24551] = 243\r\n        mem[4711] = 2883\r\n        mem[48157] = 2508\r\n        mem[37030] = 21555\r\n        mem[34562] = 1589005\r\n        mem[11550] = 5293\r\n        mask = 0X01011001111X0011100000X10000101X01\r\n        mem[14335] = 3968288\r\n        mem[44150] = 10819878\r\n        mem[29244] = 165332\r\n        mask = 01110111011110X01011X10X1X0110101110\r\n        mem[59329] = 39829777\r\n        mem[34766] = 196214\r\n        mem[39624] = 6080817\r\n        mem[28054] = 6964\r\n        mask = 10010X1011111X001X1X1010101100100X01\r\n        mem[37665] = 326246393\r\n        mem[43120] = 10019762\r\n        mask = 000101XX10111X10101X0100001X1X001X01\r\n        mem[51388] = 2236803\r\n        mem[18177] = 14993\r\n        mem[61543] = 16001841\r\n        mem[56229] = 342151958\r\n        mask = 0011101XXX111001X001100X111X001X0X01\r\n        mem[63605] = 1204\r\n        mem[56106] = 24425\r\n        mem[8823] = 624\r\n        mem[33297] = 24751311\r\n        mask = 1101001011XX10101X100X10110011X10X00\r\n        mem[1528] = 367894\r\n        mem[51697] = 8167\r\n        mem[20699] = 149242307\r\n        mem[40307] = 3205\r\n        mem[10690] = 961\r\n        mem[54699] = 10574\r\n        mem[57137] = 731\r\n        mask = 0X0101001011X1X0101X0000101010101000\r\n        mem[53249] = 23260\r\n        mem[59520] = 75723443\r\n        mem[17105] = 115182\r\n        mem[30275] = 6131848\r\n        mem[3023] = 400948\r\n        mask = 110X101X101010101011X10XX000X100X0X1\r\n        mem[11133] = 20188322\r\n        mem[21781] = 56747\r\n        mem[8420] = 22379\r\n        mask = 0100X11101111010101000X010X0001X1X0X\r\n        mem[36172] = 53\r\n        mem[8450] = 3013\r\n        mem[37952] = 3403\r\n        mem[16191] = 81318477\r\n        mem[13470] = 240413938\r\n        mask = 0100X11101111000000X10X00101011X0111\r\n        mem[40021] = 57554\r\n        mem[64773] = 3803\r\n        mask = X001011X1X1X1010101011X0XXXX00101100\r\n        mem[41393] = 9033\r\n        mem[9481] = 966953\r\n        mask = 0100X1X101111000101101X00110010X1000\r\n        mem[58752] = 26939\r\n        mem[33793] = 109959\r\n        mem[22716] = 107238\r\n        mask = 1X11X01X0X01100100X101000X00X011X0X0\r\n        mem[33454] = 9482389\r\n        mem[10379] = 2432\r\n        mem[57658] = 265\r\n        mem[40140] = 130152807\r\n        mask = 01X111100110100X100010010X0110011X0X\r\n        mem[27458] = 80396810\r\n        mem[37241] = 175138597\r\n        mem[12313] = 65106019\r\n        mem[27189] = 5555493\r\n        mem[15622] = 7712357\r\n        mask = X10111110X101X101X110X00X11000101X01\r\n        mem[26165] = 623840421\r\n        mem[49256] = 9368652\r\n        mem[14770] = 544947\r\n        mem[31629] = 13938\r\n        mask = 000100101111111X011011010X1X101100X1\r\n        mem[56248] = 21501\r\n        mem[51232] = 61595\r\n        mask = 10111001111111XX100X1001110101000X11\r\n        mem[29008] = 440\r\n        mem[29652] = 270482\r\n        mem[38470] = 495\r\n        mem[33132] = 1675\r\n        mem[17078] = 5234\r\n        mem[5001] = 2458\r\n        mask = 1X000010111110X010XX0X00X010X00X00X0\r\n        mem[30147] = 497416\r\n        mem[31711] = 353388\r\n        mem[5024] = 51391\r\n        mem[42787] = 48397\r\n        mem[8066] = 54115\r\n        mem[27040] = 754\r\n        mask = 0X11111X01X01X0110000101010101100001\r\n        mem[55892] = 24149471\r\n        mem[42124] = 178547303\r\n        mask = X1010101X111X1XX10X01000101X0010XX00\r\n        mem[36025] = 95\r\n        mem[30529] = 881\r\n        mem[64696] = 210812\r\n        mem[60217] = 4509\r\n        mem[37727] = 14972\r\n        mem[3394] = 1633`\r\n    );\r\n}\r\n"]}