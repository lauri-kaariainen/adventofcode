{"version":3,"sources":["../../../helpmodule.js","index.ts"],"names":["find4","x","y","matrix","wantedChar","returnable","length","push","get8","positions","forEach","pos","undefined","num2letter","chr","String","fromCharCode","hex2bin","hex","nulls","nullAmount","Array","map","e","join","parseInt","toString","substr","num2hex","num","dec2bin","bin2dec","binary","swapPositions","arr","index1","index2","insertValueAtMutating","index","newValue","splice","arrayRotate","reverse","unshift","pop","shift","arrayRotateLeft","arrayRotateRight","trampoline","fn","uniqueShallow","item","i","slice","includes","uniqueDeep","some","other","JSON","stringify","combineMatrices","larger","smaller","largerLine","lineNum","startPoint","Math","floor","char","charNum","flatten","reduce","flat","toFlatten","concat","isArray","insert","array","rest","reduceSum","acc","next","reduceMultiply","reduceFlatten","permutations","xs","ret","j","returnUniqueAmountsAsObj","val","betweenOrEqual","number","min","max","gcd2","a","b","NaN","gcd","n","lcm2","lcm"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\n\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst arrayRotateLeft = (arr) => (\n  arr.push(arr.shift()), arr\n);\nconst arrayRotateRight = (arr) => (\n  arr.unshift(arr.pop()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) =>\n  acc + next;\n\nconst reduceMultiply = (acc, next) =>\n  acc * next;\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\n\n\n\nexport {\n  find4,\n  get8,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  arrayRotateLeft,\n  arrayRotateRight,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd\n}","import { trampoline } from \"../../../helpmodule.js\";\r\n\r\n\r\nconst startTime = new Date().getTime()\r\n\r\nconst findLoopSize = (\r\n    target: number,\r\n    step: number = 1,\r\n    result: number = 7\r\n): Function => () =>\r\n        result === target ?\r\n            step :\r\n            findLoopSize(\r\n                target,\r\n                step + 1,\r\n                (result * 7) % 20201227\r\n            )\r\nconst findKey = (\r\n    targetPublicKey: number,\r\n    otherLoopSizeLeft: number,\r\n    result: number = 1\r\n): Function => () =>\r\n\r\n        otherLoopSizeLeft === 0 ?\r\n            result :\r\n            findKey(\r\n                targetPublicKey,\r\n                otherLoopSizeLeft - 1,\r\n                (result * targetPublicKey) % 20201227,\r\n            )\r\n\r\nconst input = getInput()\r\n    .split(\"\\n\")\r\n    .map((n: string): number => parseInt(n))\r\n\r\nlog(\"a:\\n\",\r\n    trampoline(findKey(\r\n        input[0],\r\n        trampoline(findLoopSize(\r\n            input[1]))\r\n    ))\r\n    // .map((num: number) => trampoline(findLoopSize(num)))\r\n)\r\n\r\nlog(\r\n    \"everything took\",\r\n    new Date().getTime() - startTime,\r\n    \"ms\"\r\n)\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\n\r\nfunction getTestInput(): string {\r\n    return (`5764801\r\n17807724`)\r\n}\r\n\r\nfunction getInput(): string {\r\n    return (\r\n        `16616892\r\n14505727`\r\n    );\r\n}\r\n"]}