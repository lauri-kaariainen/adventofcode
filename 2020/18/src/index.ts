// import { get8, betweenOrEqual } from "../../../helpmodule.js";



const solveEquationWithoutBrackets = (
    input: string[],
    step: number = 0,
    total: number = 0,
): number =>
    step >= input.length ?
        total :
        solveEquationWithoutBrackets(
            input,
            step + 1,
            step === 0 ? parseInt(input[step]) :
                step % 2 === 0 ?
                    input[step - 1] === "+" ?
                        total + parseInt(input[step]) :
                        total * parseInt(input[step]) :
                    total
        )

const getDeepestInnerBrackets = (
    input: string[],
    depth: number = 0,
    resultList: { char: string, depth: number, index: number }[] = []
): /*string[]*/any =>
    !input.length ?
        resultList
            .filter((res) =>
                res.depth === Math.max(...resultList.map(res => res.depth)))
            .slice(0,
                resultList
                    .filter((res) =>
                        res.depth === Math.max(...resultList.map(res => res.depth)))
                    .findIndex(res => res.char === ")"))
        :
        getDeepestInnerBrackets(
            input.slice(1),
            input[0] === "(" ?
                depth + 1 :
                input[0] === ")" ?
                    depth - 1 :
                    depth,
            resultList.concat(
                {
                    char: input[0],
                    depth: depth,
                    index: resultList.length
                })
        )


const openBrackets = (
    input: string[],
): number => {
    const innerBrackets = getDeepestInnerBrackets(input)
    if (!input.find((char: string) => char === "(")) {
        return solveEquationWithoutBrackets(input)
    }

    const innerResult = solveEquationWithoutBrackets(innerBrackets.map((obj: any) => obj.char))

    return openBrackets(
        input
            .filter((elem, index) => !innerBrackets.find((bracketElem: any) => bracketElem.index === index))
            .join("")
            .replace("()", "" + innerResult)
            .split(/(\d+|\+|\\*)/g).filter(e => e.length)
    )
}





const startTime = new Date().getTime()

const usedInput = getInput();

log("a:\n",

    usedInput
        .split("\n")
        .map((line: string) =>
            openBrackets(
                line
                    .trim()
                    .split("")
                    .filter(e => e.trim().length)))


)

log("b:",

)
log(
    "everything took",
    new Date().getTime() - startTime,
    "ms"
)

function log(...args: any[]): void {
    if (typeof (console) !== 'undefined') {
        console.log(...args);
        document.querySelector('pre')!.innerHTML += "<br/>" + args.join(" ");
    }
}


function getTestInput(): string {
    return (`1 + (2 * 3) + (4 * (5 + 6))
    ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2`)
}

function getInput(): string {
    return (
        `(8 * (6 * 8 + 3) * 9 * 9 * 8) * 2
        4 + (9 * (8 + 9 + 7 + 5 + 2) * (4 + 3 + 2 + 9 + 5 * 7)) * 2
        (7 * 8 + 6 * 3) * 3 * 2 * ((5 + 7 * 8 * 8) * (9 + 6 * 9 * 7 + 6 * 7) + 8 + (7 + 2 + 3 + 7 * 5 * 5) * (5 + 8) + 5) * 6
        4 * 9 * (6 + 7 + 6 + 5 + 7 + (4 * 6 + 5)) + 9 + (4 * 2 * 6) + 2
        5 * ((3 * 2 + 2 * 7) + 9 * 6) + (6 * (5 * 4 + 4 * 2 * 3 + 9) + 8 * (4 * 4) * 7 * 2) + (9 * 7 + 5 * 4)
        4 + (8 + 9 * 5) + 5 + 9 + 6 + 2
        (4 + 4 * 2 + 2 + 3) + (9 * 7 * 9) + 2 * 9 + 9 * 5
        6 + (9 + 4) + 4 + 6 * 7 * 5
        4 * (8 * (4 + 4 + 8 * 7 * 6 + 8) * 8 * 9 + 7 * 7) * 8 + 2 * 9 + (5 * 7 + 3 + (8 * 8 * 3 + 3 + 4) * (8 * 5 + 4))
        (7 + 4 + 6) * 6 * 3 * 6 * 8 + 4
        3 + (7 * (4 * 3 + 7 * 8 + 3 + 3) * 8) + (7 + 9 + 4 + 3 + (4 * 7) * 5) + (3 + 8) + 2 + 3
        4 + (9 + (8 * 3 * 8 * 6 * 4 * 9) + (5 * 4 + 5 + 8 + 5) + (7 * 8 + 3 * 4 + 8)) * 9 + 7 * 9
        7 + (2 + 8 + (7 * 6 * 8 + 6) * 8) * 9 + (5 * (9 * 6))
        (9 * (6 + 2 * 3 * 9 + 7 + 5) * 9 + (6 + 6 * 9 * 6)) * 6 + 8 * 8 + 2 * 4
        (5 * (7 * 9 + 8 * 2 + 5 * 4) + (6 + 7 + 6 + 9) + (5 + 3 + 6 + 9 * 7) + 7 + (4 + 9 + 2 * 3 * 4 + 5)) * 2 * 8 * (2 * 9 * (8 * 5 + 3 * 8 + 5)) + (5 + 4 * 4 * 2) * 2
        9 * (9 * 2 * 3)
        (7 * 8 * (6 * 4) + 8) * 4 + (3 * (9 * 4 + 7 * 6 * 3 + 9)) + 2 + 5
        (6 + (4 * 6 + 8 * 9)) * 6
        9 + 5 * (9 + 6 + (9 + 7 * 8 + 2 * 9) * (4 + 6 * 5 * 8 * 2) + 2 * 8) * 8 * (9 + 5 * (4 * 9) * 3 + 3 + (4 * 2))
        2 + (6 * 8 + 6) * 8 * (5 + 2)
        6 + 8 + 8 + (9 * 8 + 2 * 4 + 4 + 2) * 2 * 3
        ((5 + 5) + 2 + (7 * 2)) + 8 * 5
        ((8 * 9 * 5 * 7 + 3) * 8 + 4 * 5) * 2 + 7 + 9 + (6 * 5 + 7 + 2 * 6 * (4 * 9 + 5 + 2)) + (7 + 2 * 4 + (9 * 3 + 6 + 6 * 7 + 6) + (9 * 6 * 2 + 3 + 5) * 4)
        3 + (2 + 7 * (5 + 2 + 8 * 5) * 7 * 7 * 3) * 9 * 4 + 3 * 8
        (6 * 3) * (2 + 4 * 5 + 5 * 3)
        5 * (2 * 2 + 6 * 2 * 2) + 5 * 6 * 4 + (9 * 5 * (5 * 4))
        3 + 6 * 2 * 6 + 8 * 9
        5 + 4 * (2 + (7 + 2 * 8 + 5 + 9 * 7)) * 8 + (2 * (6 * 3 * 3) + (6 * 5) * 8 * 9)
        7 + (2 + 9 * 2 + (2 + 4 + 8 * 4)) * 4 * 3 * (8 * 4 * (4 + 5 + 8) * 5 + 3)
        8 + ((8 * 3) + 3 * 7 + 6 + 8) * 4 + 6 * 6
        2 * (4 + 9 * 8 * 8 * 3 + 9) + 9 * (8 + 9 * (5 * 4 * 4 + 9) + (6 * 2 * 6 * 3 + 9 + 5) + 3 + 3)
        ((7 * 5 + 3) + 7 * 5) + 4 * 2 * 7 + 5 + 6
        4 + 9 * (6 * 6 * 4) + (7 + 6) * (3 * 8 + 3 * 6)
        (7 + 5 * 6 * 8 * (7 + 4 * 5)) + 9 * 6 + 2 + 7
        4 * 3 * 4 * (2 + 6 + 6 + 2 + 6) + 8 * (6 + 6 * 3 * 2 * 6)
        4 * 6 * 2 * (9 + 4)
        4 * 3 * 6 + 9 + (3 + 5 * 9 * 3 + 3) * (8 * 3 * 7)
        ((6 * 7 * 9) + 2 * 5 * 4 * 8) * ((3 + 4 + 6) * 3 * 3) * 8 + ((3 * 8 + 9 * 5 + 6 + 8) * 2)
        4 * 6 + 3 * 6 + 6 * (4 + 7 + (8 + 4 * 5 + 4) * 6)
        2 + (6 + (5 + 8 + 4 * 5 * 6 + 6) + 4 + 2 * 2 * 8) * 9 * (6 * 6 + 9 + 7 * 8)
        3 * 6
        (9 + 8 * 9) * 4 * (3 + 5 * 3 + 5) * (6 * 3 + 6 + 9) * (6 * 9 * 3 * 3 * 4 + 9) * (6 + 9 + 2 + 8)
        4 * (8 + 9 * 6) * 7 * 3 * (9 + 6 * 2)
        (7 + 3) * (3 + 8 + 3 * 8 + (4 * 9 * 9 + 5)) + 4 * ((2 + 2 * 2 + 7 + 4 + 9) + 5 * (2 * 6 + 8 + 2) + 4 * (7 + 7 + 7 * 8 * 8 + 3) + 7) + 2
        (7 + 4 + 5 * (3 + 5 * 2 + 3)) * 3 * (7 * 3 + 9 * (3 * 2 + 4 * 7 + 3 + 2) + 4) + (5 + 3 + (9 * 5 + 6 + 5 + 4 * 8) * 4 + 4)
        4 * 6 + 7 + (3 * (4 + 2 + 4)) * 4 + (7 + (6 + 7) * 3 + 2 + 6)
        6 + 3 * 5 * 2 * (4 * 9 + 6 + 5 * 8)
        (6 * (3 + 2)) + (8 + (3 * 8 + 7 * 7) * 5) * (3 * (6 + 3 * 5 * 2 * 7 + 4) + 5 + 5 * (5 + 6 + 5 * 3 * 2 + 6)) + 6
        (4 * 2 * 4 + 7 + 2) * 7 * (6 + 7 + (5 * 5 + 3) * (5 * 2)) + 5 + 2
        9 * ((5 + 3) * 5 + 6 * 5)
        ((7 + 9 * 9 + 8 * 8) * 4 + 6 * 5 * 6 + 9) + (9 + 5 * 3 + 5 * 8 * 2) + 8 + 2
        (7 * 4 * 6 + 5 + (9 + 5 * 5 + 5) + 3) + 5 * (3 * 4 * 6 * 5)
        2 + (8 + 9 * (8 + 3)) * 2
        (9 + 9 * 5 + 5) * 2 * 6 * (5 + (9 * 4 + 7 + 6 * 2) + 3 + 3) + (7 + 4 + 3 * 4 + (4 + 8 + 5 * 2))
        (4 + (7 + 3) + (4 + 5 + 7 * 9 * 8) + 5) + (6 + 5) * (2 * 2 * 9) * 7 * 9 + 4
        5 + 9 + (2 * (6 + 9 + 9 + 2 * 3 * 3) * 8 + 8 + 4) * (9 + 9 * 4 + 3 * 9 * (5 + 9 + 7 + 4 + 7))
        2 + 4 + 2 * (5 + 9) + (3 + 2 * 8 * (9 * 5 * 3 * 6 + 6 + 5) + 7 + 9) + 5
        6 + ((2 + 2 * 3 * 9) * (4 + 6)) + 2 + 3 + 2
        2 + (2 + 5) * (3 * 8 * 5 + 6 + 7) * 6
        2 + 2 + (7 * (4 + 4 * 7 + 3) + 2) * ((2 * 8 * 5 + 2 * 4 * 5) * 2 * 9 + (8 + 5 * 4)) + 9
        9 * 9 + 7 + (9 + 3 * (9 + 2 + 4) + 3 * 4 + 9)
        5 + (7 + 8 * (7 + 2 * 5 * 7)) * 8 + 6
        (2 * (2 + 5) * 2 + 2 + 8 * (4 + 3 * 8 + 8 + 2 * 9)) * 9 + 9 * 7 * 2 * 9
        4 * (7 * (8 + 6 * 2 * 6 + 2 + 7) * (5 * 7 + 5 * 2) + 5 + 5 + (3 + 8 + 2 + 5 * 8)) + 7
        5 + ((4 + 5 * 6 * 5) * (6 * 2 + 2) * 8) * (9 + 9 + 9 * 3 * 4 + 2) * 3 + 2 * 4
        7 + 7 + 3 + 9 + ((6 + 5) * 8 * 2) * 6
        5 * 7 * 5 + (5 + (8 * 6) + (5 * 2) * 6)
        (9 * 5 + 7 * 5 * 3 + 2) * 5
        (5 * 2 * 2 * (4 * 8 * 6 + 7 + 3) * 7) * 8 * 3
        (5 + 4 + 9 + (4 * 7 + 5 + 8) + 9) * 7 * (8 * 7 + 6 + 4 * 2) * 8
        3 * 9 * 7 + 7
        2 + 5 + 3 * (6 * 8 + 3 + 5 + (9 + 8 * 7))
        2 * 3 + 5 * 3 * (9 + 2 * 9 * 9 * 9 + 2) * 9
        8 * ((9 + 7) + 9 + 6 * 7 * (7 * 9 * 6 + 6 + 4)) + 3
        4 + 5 * 7 + (8 + (7 * 6 + 5 + 5) + 7) + 2 * 5
        2 + ((3 + 7) * 4 + (9 * 7 + 5) + 4) * 2
        5 + 2 + 4
        3 + ((5 + 9 + 8) * (5 * 2 * 9 * 6) + 6) + 9 * 2
        4 * (3 * 3 + 2 * 2) * (5 * 8 + 6 * 2 * 5 + 4)
        5 + 8 * 2 + (8 + 3 + 4 * 2 + 2 + 5) + (4 + 8) * ((7 + 8 * 3 * 9 + 5 * 5) + 7 + 7)
        5 + ((9 * 8 + 2 * 8 + 3 + 4) + 6 * 5) + 4 * 8
        2 + (8 + 4 + 6 + 2 + 6) * 5 * (5 + 7 * 7 * 6 * 5 + 4) + 9 * 8
        3 * (9 * 9 * 4) + 3
        4 * 9 * ((7 * 9 + 2 * 2 * 6 * 7) * 6 * 6 + 4) * 5 + 6 + 8
        2 + 6 + 7 + 5 + (4 + 2 + 2 + (9 * 2 + 8 * 7) + 9) + 9
        3 * (3 * 5 + 2 * (5 * 9 * 8)) * 8
        ((3 + 7 + 7 * 5) * 3) * 8 + 6 + 5 + 2 * 9
        4 * 4 + (7 + (4 * 3 + 2 * 5 + 3) * 7 + 6 * (8 + 2 * 5 + 4 * 7)) + 4 * 7 * 8
        7 * (2 + (4 + 6 * 4 * 8 * 7 * 6) + 5 + 8) * 5 + 2 + ((6 * 5 + 8 * 7 * 9 + 2) + 8 * 7 + 2 + 4) * (3 + 5 + (5 + 4) + 3 * 7 + 7)
        9 + ((4 * 2 + 7 + 8) + 7) + 9
        (6 * 7 * (5 + 9 * 9 + 9) + (5 * 9 * 8 + 5 + 2 * 2) * 5) * 2 * (6 * (7 * 3 + 5 * 7 * 9) * 2 * 5) + 5 * 2 + 8
        7 * ((4 + 8) + 7) + 5 + 6
        (8 * 4 + (5 + 4 + 7 + 3 * 4 + 5) * 9 + 9) * 2 * (3 * 3 + 5 + 4 * (5 * 5 * 5 * 9)) * 7
        9 * 8 + 8 + (4 * 5 + 3) * 8
        3 + 9 + (5 + 7 + 7) * 2 + 6
        4 + 8 + (9 * 2) * ((5 * 5) + 5 + 8 * (6 * 3))
        3 * 7 * 5 + 4 + (8 * 7)
        (3 + 5) * 9 * 6 * (9 * 4 * 8) * 5
        (9 + 8) * 3 * 9 + 3
        9 + 6 + 9
        (7 + 6 * (8 + 5 + 2) * 6 + 7 + 7) * 4 * (3 * 5) * 5 * 7 * 4
        (9 + 3 * (4 * 2 * 3 * 9 * 7)) + 7 + ((9 * 8 * 4 + 2 + 4 * 7) * 7) + 2
        2 + (6 + 9 * 3 + 6 + 5 + 4) + 8
        4 * 7 + 5 + (7 + 8 * 7 * 4 * 7 + (6 + 9 + 3 * 6 * 9 * 8))
        9 + 9 * 4 + 3 * 5
        4 + (3 * 7 + 4 + (7 + 6 * 4 * 8 + 9 + 7) * 9 * 9)
        (8 * (2 * 6) + 9 + 7 + 3) * 9 + 8 * (5 * 5 + 5) * (6 + 7 + 6)
        (2 * 3 * (6 + 3) * 5 * 6) + 7 + 8
        9 + 2 + 5 + (3 * (9 + 3 + 2 + 7 * 6) + (6 * 6 * 2 * 3 * 2 * 2) + 3 * 9 + 2) + (3 + 4 + 3 * 8 * 7) * 5
        4 * 7 + 4 + 5 * (9 + 7 + 7 * (6 * 8) * 7)
        (4 + 9 + (2 + 8 * 2 + 4) + 4) * 2 * 4 + 8
        (7 * 8 * 7 + 7 + 5 + (6 + 7)) * 8 + 8 * 6
        5 + 6 * 3 + 6 * (5 * 8 + 2 * 4 + 5) * 9
        5 + (5 * 8 + 7 * 7 * (7 * 4 * 9 + 4 + 8 * 5)) * 9 + 8 + 5
        5 * 6 + (2 + (3 + 3 * 6 * 4 + 5 * 2) * 7 * 7) + 8
        8 + 6 * (6 * (9 * 5 + 9 * 9) + 6 + (4 * 2) + 6 + 9) + 9
        8 + (3 + (6 * 2)) + 8
        6 * (5 * 2 * 8 * 5)
        4 * 2 * 7 + 7 + (3 + 2 + (4 * 6) + 5) * (2 * 6 + 5 + 7 * 2)
        9 * 7 + 4 * 3
        9 + (9 + (3 + 2) * (4 + 6 + 2 + 9 + 2) * 4 * 9 * 7) * 8
        7 * 5 + (4 * 4) + 8
        2 * 9 * 7 + (4 + 5 * 3 + 9 * 9 + 6)
        8 * 4 + 7 * (5 + 3 + 3 + (2 * 5 * 2 + 6) + 7 + 3) * (5 * 9 + 2 + 5) * 3
        ((7 * 8 * 6 * 3 * 9 * 5) + (6 + 5 * 7 + 8) * 5 * 7 * 9 * 2) + 8 * ((2 + 6 * 9 + 8 * 8 + 3) + 8 + 5 * 4 + 8) + 7 * 8
        6 + 3 * 2
        (8 + (8 * 4 + 3 * 2 + 3)) + 2 * 4 * 3 + 3
        (4 + 4) * (2 + 8 * 3 + (8 + 5 * 6 + 3) + 8 * 5)
        8 + ((4 * 5 + 7) + 9 * 2 * 2 + (2 * 7 + 3 * 6)) + 4 + 2 * 4
        6 * 8 + 9 + (3 + 2 + 4 + (2 * 2 + 7 * 5) + 3) * 3
        7 * ((3 * 6 * 3) * (3 + 4 * 5 * 4 + 8) + 5 + (7 + 3 * 2 * 9) + 7 * 4)
        6 * ((6 + 5 * 7 + 6 * 8) * 5 * 3) + 5 * 8 + 6
        (4 * 7) + (2 + 8) + ((3 + 4 + 4 * 8 * 3) * 2 * 2 + 7) + 5
        ((2 * 5 * 9) + 8 + 4 * 7) * 3 + 8 * (6 * 4 * 3 * 2)
        ((2 * 4 + 2) * 2 * 4) * 9 + 5 * 6
        3 * (8 * 3 + (6 + 3 + 4 + 6 * 6) * 7 + 8) * (7 * 2 + (9 + 4 + 3 * 7) + 3 * 7 + (4 * 5 + 3)) + (8 + 3 * 4 * 5 + (7 + 7 + 7) + 3) * 9 + 9
        (8 + 9 + 5 + 3 + 3) + 6 + 6 + 9
        7 + (6 * 2 * 3) + 8 * 8
        2 * 7 + 4
        (3 * (6 + 4) + (5 + 6 * 5 + 4) * 8 * 9 * 6) * 6
        2 * (7 + 4) * (6 + (3 * 2 + 9 + 2 + 2 + 7) + 4)
        5 * 8 * 4 + 5 + (6 * 7 + 3 * 2) + 2
        (9 + 8 + 5) * 2 + 2 + 6
        3 * 9 * (2 + 4 * 4 + 3 + 2 * 3)
        6 + ((9 * 6 * 3 + 8) * 4 * 8 + 7) * 3 + 2 + 8
        7 * 8 + (3 + 6 + 3) + 7
        7 * (8 + 2 * 5 + 3 * 5 * 3)
        2 + 2 + (3 + (7 * 7) + (7 + 3 + 4 + 3 + 3 * 5) * 4 * 7) + 5
        (3 * 8 + 4) + 4 * (5 + 5 * 2) * 4 * 2
        6 + 9 + (6 + 5) + 6 * (6 + 4 * 3 + 7 * 3 + 6)
        2 + ((6 + 6 * 2) * 5 * 2 * (4 * 7 + 3 * 9 * 4)) + (3 * (2 * 8 + 6 * 4 + 9 + 2) * 2)
        4 * ((5 * 9 * 2 + 3 + 3) * (5 * 8 + 9 + 8 * 5 + 7)) * (6 * 6 * 2 * 9 + 6 + 4) + 9
        (4 * 9) + (2 + 8 + 7 * 6) + 7 + 7 * 7 + 8
        8 + (9 + 5 + (5 * 2 * 6 * 2) * 4 * 9 + 7) + 8 * 3 + 4 * (5 + 4 * (2 + 2 + 6 * 8 + 9 * 7) + 2 + 3)
        (3 * 6) * 2 + 3 + 3 * 3 + ((2 + 5 + 2 + 4 * 4) + 7 * 9 * 2 + 7 * 4)
        (8 * 9 + 6) + 3 * 2 + (5 * 5 * (2 * 4 * 8 * 3) * (2 * 5))
        9 * (6 * 6) * 2
        8 + 6 * 4 * (9 * (8 + 7 * 6 + 8 + 5 + 8)) + 9
        8 + 8 * 7 + (8 * 7) + 8
        7 * ((6 * 5 * 5 + 9 * 6) * 4 + 3)
        6 + 3 + 8 * 9 * 4 * (8 + 7 * 4 * 6 * 2 + 5)
        (2 + 2 * 3 * 4 * (9 + 8 * 4) * 7) + 3
        3 * ((5 * 6 * 9 * 2 * 6 + 4) + 3 * 2 + 7 + 5) + 5 * 2
        9 * (4 + 8) + (6 * 5) * 4 * ((7 + 2 + 5 + 7) + 2 * 5 * 4) * (9 + 3 * (6 * 7 * 5 * 4 + 6) + (5 * 8 * 3 * 4 * 6) * 5 + (2 * 2 + 7 + 3))
        4 + ((8 * 3) * 4 * 7 + 2 + 8) + (4 + 8 + 6 + 2) * 5 * 2
        4 * (2 * 5 * 8 * 2 + 7 * (9 * 7 * 6 + 3 * 2 + 9))
        3 + ((4 * 6 + 3 + 6 * 5 + 3) * 3) + 2 + 7 * (3 + 2) + 7
        (9 + (4 + 8 * 4 + 6 * 4) + 4 * 9) + (4 * 6) * 6 + 3
        (4 + 5) * 8 * 2 + 3 + 5
        3 + (6 + (6 + 7) * 8 + (4 * 8 * 6 + 4) * (6 + 2 * 7))
        8 + 8 * (9 + 8 + (4 * 6 * 6 + 2 * 3 * 4) + (8 + 2 + 3 * 7 + 4) * 9) * (2 + 9) * (9 * 7 * (6 + 4 + 5 + 3 + 8 * 5) * 9 * 7)
        7 * 6 * (8 * 2 + 8 * 8 * (9 * 5) * 5) * 3 + 6
        5 * (2 * (5 + 6 + 3) * (9 * 6 + 6 * 2 * 7) + 6) * 5 * 4 + 2 + (6 * (3 + 9 * 8))
        (3 + 6 * 8 * 9) + 8 + 3 * 2 + 2 + 2
        4 * 7 * (3 * 5 * 5 + 8 + 5)
        (5 + 2) * 6 + ((9 + 3 * 7 * 5) * 6) + 8 * 9
        7 + 5 + 8 + 8 * (9 + 4 * 5 + 4 * 4 * 9)
        5 + 7 * 2 + 8 + 2
        9 + ((2 + 9 * 6) * 8 * 9 + 2 + 2) + (6 * (7 + 3) + 3 + 3 * 7) * 3 * 3 + 9
        8 * (5 + 8 + 2 * 4 * 2) + ((2 + 4 * 7) * 8 * (4 * 8 + 2 + 2 * 6 + 8) + 2) + ((8 + 3 * 6 + 9) + (5 * 3) * 8 * 7 * 8)
        9 + 4 + (4 + 9 + 7 * 6) + 3 * 6 + 9
        9 + (2 * 5 + 7 + 5 * (6 * 2 + 5 + 2 + 3 * 5) + 3) + 2 * (3 + 9 * 4 * 8) + 3 + ((9 + 3 + 7 * 2 + 7 * 5) + 7 * 5)
        7 * 4 * 6 * ((9 + 9 * 2 * 4 + 2 * 2) * 7 + 9) * 8
        6 * 5 + 4 * ((4 * 9 * 7) * 8 + 6 + 7) * 7 + 3
        9 + 9 * 9 * 4
        8 * 6 + 7 * ((9 * 4 * 2 + 9) + (6 * 9 * 2 + 2 + 5) + 8 * 6 * 6)
        3 * (6 + 9 * (9 * 3)) + ((5 * 6 + 7 * 5 + 4 * 3) + 5 * 6 * 9) * 5 * ((8 * 2 * 6 * 5) + 5 * 8 + 5 + 9)
        4 * (6 + 6 * 7 * 5 + 8) * 6 + 2
        ((9 * 8 * 3 * 6 + 2) * 4 + 7 * (5 * 8 * 2 + 4 + 9)) * 2 + ((7 + 3 * 3) * (7 + 3) * 3) + 7
        8 * 4 * 9 + 8 * (8 + (6 + 6 * 2 + 4 * 4) * 3) + 8
        (9 + (8 * 8 + 9 * 6) * 7) + 7 * 9 + 6 * 4
        3 * 7 + (6 * (5 * 5 + 2 * 8 + 7 * 2) + (2 + 2 + 5 + 4 + 9) + (4 + 5 * 3 + 8 * 7) + 9 + 9) + 2 * 4
        9 + (3 + 9 * (9 + 9 * 4) + 5) * 8 * ((6 * 8 * 4 * 9 + 9) * 5 + 2 * 9)
        7 + ((5 + 6 + 5) * 8) * 5 + 9 + 5
        2 + 2 + 9 + ((2 * 8 + 3) + 9 + 7) + ((6 + 3 + 2 + 8) + (4 * 7 * 6 + 2))
        3 * 6 + ((6 * 6 + 7) + (2 + 3 * 7 + 4) + 4 * 2) * 2
        9 * 3 + (9 * (6 * 5 + 6 * 2 + 7) + (5 * 7) + 3) * 6 * 9 + 3
        5 + 9 + (9 * (4 + 5)) + (9 * 2 * (3 + 7 + 2 + 6 + 8) + 6 + 2) * 7
        4 * 3 + ((7 * 4) * 3 * 4 + 7 + 9 + 7)
        2 * ((3 * 6 + 3 + 3 + 9 + 2) * 4 + (5 * 8 + 4 + 6 + 5 + 8) * 5) + 9 * 5
        4 + 9 * 3 * ((2 + 2 + 5 + 2 * 3 * 4) * 6 * 8 * (5 + 3 + 7 * 9 + 4) * (2 * 4) + (4 * 2 * 2))
        5 + 7 + ((4 + 5 + 5 + 6) * 5 + 9 + 6) * 9 * 7
        ((6 * 8 + 5) + 8 + 3 + (4 * 5 * 9 * 2 * 9 + 6) + 7) * 9 + (6 * (8 + 6 + 4) * (6 * 9) + (9 * 2 + 8 * 4 * 8 + 5) * 9 * 5) + (5 * (7 + 5 + 3) * 5)
        ((4 * 6 + 4 * 2 * 4) * 9 + 5 * 9 + 5 * 9) + (3 * 7 * 9) * 7
        2 * 2
        (3 + (5 + 6) + 3 * 4 * 5 + 3) * 7
        5 + 7 + 2 + 3
        (8 * 7 + 9 * 9 + (3 + 9 * 7 * 7 * 9) * 6) * 4
        8 * (9 + (3 + 4 + 7 * 5 * 9) + (8 * 4) * 4 * 7) * (8 + 3 + 5 * 9 + 8) + 2
        9 + 2 + (3 + 3 + 8) * 2 * 3 + (3 * 9 * 5)
        4 * 9 + 5 + (8 * 8 * 4) * 8 + 3
        6 * 5 * ((9 + 9 * 9) * (3 * 5) * 3 + 6 + 8) * 2
        4 * ((2 + 2 * 8 * 6 + 5 + 7) + 6 * 8 * 7 * 6)
        (9 + 3 * (4 + 5 * 8) * 5 + 9) + (9 * 4) * (3 * 3) * 8
        (2 * 3 * (6 * 5 + 8)) + 7 + ((5 * 7 * 5 + 9) + 9 * 3 + 2 * 2) + (3 * 5 * 8) * 2 * 4
        3 * (8 + (6 * 3 + 9 * 7 + 2 * 5) * 2) * 3
        7 * (3 + (8 * 9 + 9 * 6 * 4) * 8 + 4 + 6 + 7) + 7 + (9 + 5)
        8 + 4 + 7
        ((2 * 8 * 5 + 3 + 9) * (9 + 6 * 8 * 3 * 5) * 2 + 7 + (2 + 2 * 4 + 5) + 9) + 8 * 7 * 6 * (4 * 8 * 3 + 7 * 7 * 9) + 4
        (2 + 3) + 8
        5 * 7 * ((6 + 6 + 8 * 2 + 4 * 5) + (6 + 9 + 8 + 8 * 6)) * 8 + 3 + 2
        (3 + 9 + 7 + 5) + 6 + 3
        7 + ((2 * 5 + 8 + 7 * 3 * 2) * 9 + 5) + 9
        4 + 2 * 4 * (5 + 8 * 8 * 5 + 6)
        5 * 9 * (6 * 3 * 7 * 7 + 9 + 6) * 7 * (6 + 2 + 7 + 9) + 5
        4 + (5 * 2 + (5 + 4) * (2 * 3 + 4 * 5 + 4) * 3 * 2) * ((9 * 6 * 5 + 7 + 7) + 7)
        (7 + (5 * 9 * 3 * 8) * 4 + 2 * 7 + 2) * 5
        ((4 * 8 + 9) + (3 * 7 * 7 * 7) * (9 * 3 * 2) * (8 + 4 * 6 * 9)) * 7 + 3 * 7 + 2
        (8 * 3 + 8 + 2 * 3 + 3) + 2 * 3
        5 * (5 * 8 + 3 * 4 * 3 + 6) + 7 + 7
        5 * (7 + (4 * 9)) * 3 + 7
        8 * 9 + (9 + (2 * 2 * 8 + 6)) * 6
        4 + ((9 * 6 * 7 * 6 + 8) * 6 * 2 + (9 + 7 + 2 * 7 + 4) + 6) + 5 * 4 + 7
        (5 + 3 * 9 + (4 + 7 + 5) * 2 * (8 * 4)) * 5 + 3 + 6
        9 * 4
        2 * (3 + (9 + 6 * 4 + 7 * 5 + 4) + 7) * 6 * 4 + 8 + 7
        (2 * 9 + 3 * 2 + 8) * 5 * 8 + (9 * 3 * 2 + (9 + 4 * 8) * 6) + 7 + (8 + 7 + 8 * 2 * 2)
        (9 + 7 + 5 * (6 * 4 * 7 + 9 * 9 + 2) * 2) + 7 * (6 * (2 + 7 * 3 * 8 * 3 + 3) * 7 + (4 * 4 + 5 + 6 * 9))
        (2 + (6 + 8) * 6 + 9 * 4 * 2) * 9 * 6 + 8
        6 * (5 * 8 + 7) * (4 * 3 * 6 + 4 * 4 * 5) * 6 * (7 * 4 + 5)
        2 + (8 * (7 * 7 * 2) * 2) + 3 + (4 + 5 * (8 * 4 + 2 * 3) + 7 + 8) * 4
        3 + ((7 + 5 + 3) * 7)
        (5 + 6 + 7) * 3 + ((9 + 2) + 8 + (9 + 5 + 8 + 4 + 7 * 4) + 4)
        ((4 * 2 * 5 * 6 + 6) + 2 * 9 + 6 + 3) + 6 * (8 * 8 + 5 + (9 + 4 * 2 + 2 * 7 * 7) * 6) * 8
        (5 * 9 * 8 * 7 * 5 + 4) + 6 * 4 * 5 * 9 + 5
        5 * 5 + 5 + (9 * 3 + 3 + 7 * 4) + 6 + (7 + 2 + 5 * 6 * 4 + 4)
        (5 * 2 * 7 + 9 + (6 * 9 + 2 * 3)) * 3 * 7 * 6 + 5 * 9
        5 * (6 * 5 + 9 + 5) * 9 + (5 + 6 + (4 * 3 * 9 + 4 + 4 * 4) + 3)
        ((2 * 2) * 7 * 9 * 2 * 5) + 3 + (8 + 9) + 7
        7 * (3 + (8 * 9 + 3 + 8 + 2) + 8 * 9 + 5 + 7)
        8 * (4 + (6 * 3 + 6 * 5 * 6 + 5) * 9 * (4 + 3 + 5) + (7 + 4 * 6 * 3)) * 2 + 7 * 2
        (8 + 9 * 7 * 8) + 7 * 3 * 9 * 3
        7 + 6 * 4 * (9 * 8 + 6 + 7) * ((2 * 8) * 4 + (6 * 8) * (7 * 6 + 8 * 3) + 5 * 7) * 7
        (4 + 9 + (3 + 2) + (5 + 3)) * 9 * 7 + 3 * 4 + 4
        8 * (3 + (9 + 5 + 9 * 3) * 9 * 7 + 3 * 9) + 6 + 6
        2 + 3 + (4 * 6) * (5 * 9 * (2 + 3 + 7 * 8 * 4) * 8 * 3)
        3 + 8 * (2 * (7 + 8 + 6 + 7 + 7))
        ((8 + 7 * 7 + 6) + 5) + 3
        7 * 3 + (2 * 5 * 9 + 8) + 8
        2 * 5 * (7 + (6 + 9 * 5 * 2 * 6 * 6) * 8) + 6
        ((4 * 3 + 3 + 3 + 6 + 9) * (9 + 2) * (5 * 8 * 9 + 6 * 4) + (9 * 8)) + 6 + 8
        ((7 + 9 + 2 + 7 + 4) * 8 + (4 * 7 * 4) * 4) + (5 + 8 + 6) + 5 * 9
        (8 * 6 * 7 * 7 + 7) + 2 + 5
        2 + ((8 + 3 * 7 + 7 * 7) * 2 + 8 + (4 * 8 * 5 + 4))
        9 + 2
        4 * 7 * (3 * (9 + 8) * 8 + 2 * 8) * (8 + 2 + 6 + 3) * 8
        6 + 3 * 7 * (2 + 5 + (3 + 8 + 9 * 2 * 3 * 4) + (7 * 9 + 6 + 4) * 2 * 6)
        (5 * 2) + 3 + (4 * 8 * 9) * 7 * 7 + ((7 * 3) + 9)
        8 * (3 * 4 * 5 + 8) * 7 + 3
        5 + (6 + (7 * 8 + 2 * 4) + 2 + (4 + 2 + 9 * 7 + 4 + 6) + 5 + 5) + ((5 + 9 + 3) * 6 * (9 * 7 + 4 * 5 + 8) * 3 * 8) * 6
        (9 + 6 * (7 * 4 + 3 + 7 + 9 + 5)) * 5 * ((7 + 7) * 4 * 7) + 6
        5 + (9 + 3 * 6 + 2 * 9) + 5 * 3 * 5 + 6
        9 * ((7 + 5 + 2) + (4 * 8 + 7 + 9 * 5) * (8 + 9) + 8) + 5
        3 * (4 * 8) + 2 * 4 + (6 + (9 * 3 * 9) * (3 + 3 + 6 + 2 + 8)) * ((5 * 4 * 9 + 2 + 4) + 7 + 8 * 2)
        (2 * 3) * 4 * (4 + 6 * 3)
        5 + (4 * 4) + 2 * 8
        (4 * 5 * 5 + (6 * 9 + 9 * 6) + 2 * 7) * (4 + (5 * 6 + 5 * 8))
        5 + ((3 + 5) + 5) + 5 + 6 + 5
        6 * (4 * 3 + 6 + 3 + 9 + 5) * (7 + 6) * 2 * 7
        5 + 5 * 5 + 2 * (2 + (7 + 8 * 9 * 6 + 4) + 4 + 2)
        9 + ((8 + 6 + 4 + 4) + 5 * (5 + 3 * 6 + 2 + 2 + 8) + (3 + 9 * 5) + 4) + 4
        5 + 3 * 9 * (8 + 3 + 9 + 2) * 7
        (5 * (3 + 5 * 2 * 3)) * 9 + 5 * 4
        9 * 6 * 8 + (4 + (5 + 6 * 9 * 5 + 7) * 6) * 2 * 2
        8 + 2 * 4 * (5 * 3 * 2 + (7 + 3)) * 9 + 3
        2 + 3 * 9 * (4 * 4 + 3) + 2 + (7 * 2 + (2 + 6 + 8 * 7 + 6 * 2) + (4 + 3 + 3 + 3 * 5 * 5))
        2 * 2 + (9 + 6) + 5 + 5 + 8
        6 + 5 * (6 * 2 + (2 + 2) + 7)
        5 + 7 + (7 * (3 + 7 + 7) * 9 * 2 + 8 + (6 + 7 * 8 * 3))
        (6 * 5 + 7 + 5 + 7) * (4 + (5 + 6 + 4 * 7 + 4 + 4) + 6 * 9 * (5 * 7 + 9 * 5 * 6) + (2 + 8 * 4 * 6)) + (4 * 5 + 7 * 9 * 3) * 4 * ((2 + 8 + 9 + 2 * 8 + 3) * (4 + 3 + 2 + 7 + 7 * 6))
        2 * 6 * 4 * ((5 + 9) * 5 * (6 * 7) * 4 * 8)
        (7 + 4 + 8 + 2 + 5) * 2 + 3 * 6 + 7
        6 + 3 * (6 * (2 * 4 + 7 + 3) * 6 * 9 + 4 * 3) + (5 * (4 + 9 * 5 * 5 * 2 + 2)) + 2
        9 * 9 * 9 * 3 * ((9 * 9 + 6 * 2 + 6 * 5) + 7) * 6
        (3 + 8 * 8 + 8 * 8) + (5 + 3 * 5 + 4 + 6) + 9
        6 * 8 * 4 + (8 + 5 * 2 * 7)
        4 * (2 + (8 + 3 * 9) * 3) + 2
        (2 * 9) * 8 + 4 * (4 + (7 * 6 * 9) + 4 + (5 * 5 + 7 * 7 * 9) * 2) + 3 * 9
        ((4 + 7 * 3 + 4 * 2 + 3) + (9 * 3 * 9 + 6 * 8) + 9) * 3 * 5 + (5 + 4 * 5 * 6)
        (8 * 2 * 9 * 6 * 3 * (5 + 6 * 2 + 9 * 4)) + 3
        3 + 3 * 7 + 3 * 4 + 5
        8 + (7 + 5) * 8 + 3 + ((8 * 7 + 8 + 6 + 6 * 3) + 7 + 2)
        3 * 4 * (4 + 3 * 6)
        3 + (8 * 4 + 8 + 9 + 6)
        6 * 9 * 6 * 2 * (7 * 6 * 2 + 3 * (8 + 6)) + (5 + 7)
        6 * 7 * 6 * 7 * 8
        6 + 9 * (2 * (2 + 2 * 9 + 4) * 2 + 6 * (5 * 8 * 5 + 3 * 5)) + 4
        8 * 3 * 3 * 3 * 8 + (3 + (3 * 8 + 7) + 5 + 2)
        7 * 2 * ((8 * 7 + 3) + 3)
        2 * 9 + (7 * 6) + (5 + 8) + 7 + 9
        9 + 4 + (6 + (7 * 3 * 9 + 3 + 7) * 4 + (2 * 9 + 3 * 2 * 6) * 3 + 6) * 2 + (5 + (6 + 2 * 4 * 5 * 3 + 7) + 5 * 3 + 7 + 6) + 3
        2 + 2 + 4 * 5 * 9 * 2
        7 * 2 * 3 + 8 * 6 * 5
        5 + 6
        (3 + (6 + 7 * 2) + 8 * (2 + 4 + 4 + 5 + 6)) * 6
        (4 * (2 + 3)) + (8 * 3) + (7 * 8 * 8 + 3 + 9 * 4)
        8 + (8 * (2 * 5) * 8 * 7 * 2) + 7
        6 * (6 * 8 + (9 * 5 + 2 + 9 + 3 * 6) * 8) + 7 + 6 * 6 + 2
        2 * 7 * ((7 * 3) * 7 * 2)
        2 * (9 + 8) * 3 + 8 + 7
        (6 + (2 * 2 * 2) + 9 * 6) * 6 + 9 + (7 * 4 + 8)
        4 * 7 + 7 * (3 + 2 * 4 * 8 + 6) + 9
        8 + ((6 * 4 * 6 * 3 * 2) * (9 + 5 + 4 * 4 + 5 + 9) * 3 * 3 * (4 + 5 * 8 + 5 + 6) + (9 + 8 * 9 + 6 + 8 * 7)) * (9 * 9 * 2) * 5 * 3 + 2
        5 + ((3 + 7 * 9 * 6 * 6) + 8 + 3 * 3 + 8 + 4) + (4 * 8 * (4 * 9 + 8))
        ((6 * 4 + 2 + 7 * 4) * 2) + (8 + 9) * (8 * (2 + 7 * 7 * 4 * 9 * 3) * 7 * 7 + 4) * 3 * 4 * 7
        (8 + (9 * 6 + 5) + (4 + 5 * 4)) + 9 + (3 * 8) + 6
        ((3 + 7 + 9) + 3 + 3) * 4 + 2 + (6 * (8 + 4 + 3 + 4) + 3) * 7
        ((7 + 9) * 4 + (7 + 8 * 6 * 5 + 8) + 2) * ((3 + 4 + 7) + 2 * 3 * (5 * 6 + 6 * 4 * 4) * (5 + 2) + (3 * 4 * 4))
        5 * (8 * 6 * 3 + (2 * 8)) + 2 + 5 * 2 + 6
        4 * 5 + (8 * 4)
        (4 * 5 + (8 + 7 + 5 * 8 * 5 * 8) + (2 + 7)) * 2 * ((8 * 3 + 5 + 9 + 3 + 5) + 3 + 5 + 8) * (3 + 8 * 6)
        (7 * 6) * (2 + 8 + 6 + 3 * 5) * 2
        3 * 7 + 5 * 2 * ((9 + 8 * 7 * 4 * 2) * 5 + 4 + 9 * 4 * 5)
        9 + 7 * 3 * ((7 + 3 + 2) + 8 * 4 * 4 * (7 + 5 * 6)) + 4
        ((2 + 9) * 4 * 7) * (8 + 9 + 4 * 8 + 6 + 2) + (9 * 4 * 9 * 6 * 6 * (6 * 4 + 6 * 4 * 7 + 3)) * 6 * 3
        (4 * 4) + 6 + 4 * 7 * (4 + 8 + 9 + 9 + 3) + 3
        6 + 3 * (7 * 3) * 8 + 9
        6 * 3 * 2 * 3 * 4
        9 * (5 + 6 + (2 * 9 + 6 + 8 * 7) + (2 * 5 + 7) + (5 * 2 + 9 * 3 + 7 + 7)) * 6 * 5 * (9 + 6 * (5 + 2 * 8 * 9 * 5 * 9) * 3 + 6)
        8 + 4 + 2 + (3 * 3 * 2 * (9 * 7 * 8 * 2)) + 4 + 7
        (3 * 6 + 9 + 8 * (6 * 4)) * 7 * ((5 * 9 * 2 * 2) + 3 + 4 + 8 + 5) + 3 * 7
        (2 * 4 + 4 + (8 * 2 + 8 + 6 + 2) + 4 + 9) + 9 * (2 * 6 * (4 * 3 + 7 + 6 * 4 * 7) + 3 * 2) + 3 + 8 * 7
        7 + 7 + 8 + (9 * 7 * (6 * 8 * 2 + 7 * 4)) * 5 + 9
        (9 + (8 + 8 * 7) + 2 * 3) + 3 + 5 * 2 * (5 + 4 + 2 + 6 * 8 + 5) + 8
        4 * 4 * 4 * (2 + 6 * 7) * (5 + 4)
        7 + 7 * 8 + 4 + (6 + 4 + 4 + 5)
        ((3 + 6) * 6 * 7 * (5 * 6 + 5)) + 2
        ((9 + 9 + 4) * 7) * 7 * 7 * 3 + 6 + 4
        9 + 2 * 9 * 5 * 8
        3 * (7 * 7)
        6 * 2 + 3 + 2 * ((6 * 6) * 3)
        2 + 6 * ((9 + 7 * 3) * 7 + 8 + (3 + 9) * 7) + 5 * 3
        6 + 6 * (8 * 5) * (2 * 3 + 5 * 8 * 5 + 2)
        (5 + 5 * 4) * 2 + 3 * ((4 * 6 + 2 + 9) * 9 + 7) + 8 * (7 * 8 * 5 * 7 + 4 * 9)
        5 + 8 + (4 + (5 * 6 * 6 * 5 + 4)) * 4 + 2
        6 + 2 + (4 * 7 * 7 * 2 * 8 + 8) + 7
        8 + ((5 * 9) + (8 + 8 + 6 + 7 + 6 + 3) * 9) + 7 + 7
        5 + 5 * 3 + 8
        (6 + 4 + (8 * 2) * 5) * 3 * 6 * 8 + 3
        (4 * 2) * 2 + 2 + 5 + (7 * (6 * 5 * 6 + 4) * 8 * (8 * 2) * (9 * 5 + 4 * 3 + 6 * 4) * 3)
        8 * (3 + 7 * 5 * 4) + 4 + 4 + 6 * 8
        (5 * 7) * 5 + 9 + (4 + 8 * 9 * 5)
        3 * ((5 + 9) * 4 + 6 * 7) * 2 * 3 * 8
        7 * (6 * 9 * (6 * 9 + 3 + 6 * 4) * 5) + ((8 + 5 + 2 + 4 + 8) + 4 + 9) + 8
        7 + (3 * 5 * 7 + (4 + 9 + 3 + 6 + 7)) + (5 + 8 * (7 + 5 + 7)) + (7 * 4)
        (4 + 7 + 2) * 2 + 9
        6 * 4 + 9 + 6 * 6 + 7
        6 * ((7 * 6) * 7 + 4 * 5 * 6 + 4) * (9 * (9 + 3) * 7)
        (4 * 5 + 4 * 2 + 3 + 3) + 8 * 6 * ((3 * 4 + 5) + 2 + 3 * 8 + 6 + 9) * 8
        ((5 * 2 * 6 + 3) + (7 + 3 + 3) * (5 + 9)) * 7 * 6
        5 + 6 * 4 + (7 + (3 + 3)) * (9 * 9 + (2 * 4 * 4 + 3) * 5 + 5 * 4) + 5
        3 + 5 * (6 + 9 + (7 + 3 + 3 + 7) * 4 + 2 + 8)
        5 * 5 + (5 * 6 * 5) * 5 * 2 + (3 * 5 + 9 + 6)
        6 * (8 * 7 * 2 + 6) * 3`
    );
}
