{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,aAIA,IAAM,EAA+B,SAA/B,EACF,EACA,EACA,GAEA,YAHA,IAAA,IAAA,EAAA,QACA,IAAA,IAAA,EAAA,GAEA,GAAQ,EAAM,OACV,EACA,EACI,EACA,EAAO,EACE,IAAT,EAAa,SAAS,EAAM,IACxB,EAAO,GAAM,EACW,MAApB,EAAM,EAAO,GACT,EAAQ,SAAS,EAAM,IACvB,EAAQ,SAAS,EAAM,IAC3B,IAGd,EAA0B,SAA1B,EACF,EACA,EACA,GAEA,YAHA,IAAA,IAAA,EAAA,QACA,IAAA,IAAA,EAAA,IAEC,EAAM,OAUH,EACI,EAAM,MAAM,GACC,MAAb,EAAM,GACF,EAAQ,EACK,MAAb,EAAM,GACF,EAAQ,EACR,EACR,EAAW,OACP,CACI,KAAM,EAAM,GACZ,MAAO,EACP,MAAO,EAAW,UApB9B,EACK,OAAO,SAAC,GACL,OAAA,EAAI,QAAU,KAAK,IAAG,MAAR,KAAY,EAAW,IAAI,SAAA,GAAO,OAAA,EAAI,WACvD,MAAM,EACH,EACK,OAAO,SAAC,GACL,OAAA,EAAI,QAAU,KAAK,IAAG,MAAR,KAAY,EAAW,IAAI,SAAA,GAAO,OAAA,EAAI,WACvD,UAAU,SAAA,GAAO,MAAa,MAAb,EAAI,SAkBpC,EAAe,SAAf,EACF,GAEM,IAAA,EAAgB,EAAwB,GAC1C,IAAC,EAAM,KAAK,SAAC,GAAiB,MAAS,MAAT,IACvB,OAAA,EAA6B,GAGlC,IAAA,EAAc,EAA6B,EAAc,IAAI,SAAC,GAAa,OAAA,EAAI,QAE9E,OAAA,EACH,EACK,OAAO,SAAC,EAAM,GAAU,OAAC,EAAc,KAAK,SAAC,GAAqB,OAAA,EAAY,QAAU,MACxF,KAAK,IACL,QAAQ,KAAM,GAAK,GACnB,MAAM,iBAAiB,OAAO,SAAA,GAAK,OAAA,EAAE,WAQ5C,GAAY,IAAI,MAAO,UAEvB,EAAY,IAyBlB,SAAS,IAAI,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACgB,oBAAb,UACR,QAAQ,IAAG,MAAX,QAAe,GACf,SAAS,cAAc,OAAQ,WAAa,QAAU,EAAK,KAAK,MAKxE,SAAS,IACG,MAAA,mFAIZ,SAAS,IAED,MAAA,m0tBAtCR,EAAI,OAEA,EACK,MAAM,MACN,IAAI,SAAC,GACF,OAAA,EACI,EACK,OACA,MAAM,IACN,OAAO,SAAA,GAAK,OAAA,EAAE,OAAO,aAK1C,EAAI,MAGJ,EACI,mBACA,IAAI,MAAO,UAAY,EACvB","file":"index.js","sourceRoot":"../src","sourcesContent":["// import { get8, betweenOrEqual } from \"../../../helpmodule.js\";\r\n\r\n\r\n\r\nconst solveEquationWithoutBrackets = (\r\n    input: string[],\r\n    step: number = 0,\r\n    total: number = 0,\r\n): number =>\r\n    step >= input.length ?\r\n        total :\r\n        solveEquationWithoutBrackets(\r\n            input,\r\n            step + 1,\r\n            step === 0 ? parseInt(input[step]) :\r\n                step % 2 === 0 ?\r\n                    input[step - 1] === \"+\" ?\r\n                        total + parseInt(input[step]) :\r\n                        total * parseInt(input[step]) :\r\n                    total\r\n        )\r\n\r\nconst getDeepestInnerBrackets = (\r\n    input: string[],\r\n    depth: number = 0,\r\n    resultList: { char: string, depth: number, index: number }[] = []\r\n): /*string[]*/any =>\r\n    !input.length ?\r\n        resultList\r\n            .filter((res) =>\r\n                res.depth === Math.max(...resultList.map(res => res.depth)))\r\n            .slice(0,\r\n                resultList\r\n                    .filter((res) =>\r\n                        res.depth === Math.max(...resultList.map(res => res.depth)))\r\n                    .findIndex(res => res.char === \")\"))\r\n        :\r\n        getDeepestInnerBrackets(\r\n            input.slice(1),\r\n            input[0] === \"(\" ?\r\n                depth + 1 :\r\n                input[0] === \")\" ?\r\n                    depth - 1 :\r\n                    depth,\r\n            resultList.concat(\r\n                {\r\n                    char: input[0],\r\n                    depth: depth,\r\n                    index: resultList.length\r\n                })\r\n        )\r\n\r\n\r\nconst openBrackets = (\r\n    input: string[],\r\n): number => {\r\n    const innerBrackets = getDeepestInnerBrackets(input)\r\n    if (!input.find((char: string) => char === \"(\")) {\r\n        return solveEquationWithoutBrackets(input)\r\n    }\r\n\r\n    const innerResult = solveEquationWithoutBrackets(innerBrackets.map((obj: any) => obj.char))\r\n\r\n    return openBrackets(\r\n        input\r\n            .filter((elem, index) => !innerBrackets.find((bracketElem: any) => bracketElem.index === index))\r\n            .join(\"\")\r\n            .replace(\"()\", \"\" + innerResult)\r\n            .split(/(\\d+|\\+|\\\\*)/g).filter(e => e.length)\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst startTime = new Date().getTime()\r\n\r\nconst usedInput = getInput();\r\n\r\nlog(\"a:\\n\",\r\n\r\n    usedInput\r\n        .split(\"\\n\")\r\n        .map((line: string) =>\r\n            openBrackets(\r\n                line\r\n                    .trim()\r\n                    .split(\"\")\r\n                    .filter(e => e.trim().length)))\r\n\r\n\r\n)\r\n\r\nlog(\"b:\",\r\n\r\n)\r\nlog(\r\n    \"everything took\",\r\n    new Date().getTime() - startTime,\r\n    \"ms\"\r\n)\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\n\r\nfunction getTestInput(): string {\r\n    return (`1 + (2 * 3) + (4 * (5 + 6))\r\n    ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2`)\r\n}\r\n\r\nfunction getInput(): string {\r\n    return (\r\n        `(8 * (6 * 8 + 3) * 9 * 9 * 8) * 2\r\n        4 + (9 * (8 + 9 + 7 + 5 + 2) * (4 + 3 + 2 + 9 + 5 * 7)) * 2\r\n        (7 * 8 + 6 * 3) * 3 * 2 * ((5 + 7 * 8 * 8) * (9 + 6 * 9 * 7 + 6 * 7) + 8 + (7 + 2 + 3 + 7 * 5 * 5) * (5 + 8) + 5) * 6\r\n        4 * 9 * (6 + 7 + 6 + 5 + 7 + (4 * 6 + 5)) + 9 + (4 * 2 * 6) + 2\r\n        5 * ((3 * 2 + 2 * 7) + 9 * 6) + (6 * (5 * 4 + 4 * 2 * 3 + 9) + 8 * (4 * 4) * 7 * 2) + (9 * 7 + 5 * 4)\r\n        4 + (8 + 9 * 5) + 5 + 9 + 6 + 2\r\n        (4 + 4 * 2 + 2 + 3) + (9 * 7 * 9) + 2 * 9 + 9 * 5\r\n        6 + (9 + 4) + 4 + 6 * 7 * 5\r\n        4 * (8 * (4 + 4 + 8 * 7 * 6 + 8) * 8 * 9 + 7 * 7) * 8 + 2 * 9 + (5 * 7 + 3 + (8 * 8 * 3 + 3 + 4) * (8 * 5 + 4))\r\n        (7 + 4 + 6) * 6 * 3 * 6 * 8 + 4\r\n        3 + (7 * (4 * 3 + 7 * 8 + 3 + 3) * 8) + (7 + 9 + 4 + 3 + (4 * 7) * 5) + (3 + 8) + 2 + 3\r\n        4 + (9 + (8 * 3 * 8 * 6 * 4 * 9) + (5 * 4 + 5 + 8 + 5) + (7 * 8 + 3 * 4 + 8)) * 9 + 7 * 9\r\n        7 + (2 + 8 + (7 * 6 * 8 + 6) * 8) * 9 + (5 * (9 * 6))\r\n        (9 * (6 + 2 * 3 * 9 + 7 + 5) * 9 + (6 + 6 * 9 * 6)) * 6 + 8 * 8 + 2 * 4\r\n        (5 * (7 * 9 + 8 * 2 + 5 * 4) + (6 + 7 + 6 + 9) + (5 + 3 + 6 + 9 * 7) + 7 + (4 + 9 + 2 * 3 * 4 + 5)) * 2 * 8 * (2 * 9 * (8 * 5 + 3 * 8 + 5)) + (5 + 4 * 4 * 2) * 2\r\n        9 * (9 * 2 * 3)\r\n        (7 * 8 * (6 * 4) + 8) * 4 + (3 * (9 * 4 + 7 * 6 * 3 + 9)) + 2 + 5\r\n        (6 + (4 * 6 + 8 * 9)) * 6\r\n        9 + 5 * (9 + 6 + (9 + 7 * 8 + 2 * 9) * (4 + 6 * 5 * 8 * 2) + 2 * 8) * 8 * (9 + 5 * (4 * 9) * 3 + 3 + (4 * 2))\r\n        2 + (6 * 8 + 6) * 8 * (5 + 2)\r\n        6 + 8 + 8 + (9 * 8 + 2 * 4 + 4 + 2) * 2 * 3\r\n        ((5 + 5) + 2 + (7 * 2)) + 8 * 5\r\n        ((8 * 9 * 5 * 7 + 3) * 8 + 4 * 5) * 2 + 7 + 9 + (6 * 5 + 7 + 2 * 6 * (4 * 9 + 5 + 2)) + (7 + 2 * 4 + (9 * 3 + 6 + 6 * 7 + 6) + (9 * 6 * 2 + 3 + 5) * 4)\r\n        3 + (2 + 7 * (5 + 2 + 8 * 5) * 7 * 7 * 3) * 9 * 4 + 3 * 8\r\n        (6 * 3) * (2 + 4 * 5 + 5 * 3)\r\n        5 * (2 * 2 + 6 * 2 * 2) + 5 * 6 * 4 + (9 * 5 * (5 * 4))\r\n        3 + 6 * 2 * 6 + 8 * 9\r\n        5 + 4 * (2 + (7 + 2 * 8 + 5 + 9 * 7)) * 8 + (2 * (6 * 3 * 3) + (6 * 5) * 8 * 9)\r\n        7 + (2 + 9 * 2 + (2 + 4 + 8 * 4)) * 4 * 3 * (8 * 4 * (4 + 5 + 8) * 5 + 3)\r\n        8 + ((8 * 3) + 3 * 7 + 6 + 8) * 4 + 6 * 6\r\n        2 * (4 + 9 * 8 * 8 * 3 + 9) + 9 * (8 + 9 * (5 * 4 * 4 + 9) + (6 * 2 * 6 * 3 + 9 + 5) + 3 + 3)\r\n        ((7 * 5 + 3) + 7 * 5) + 4 * 2 * 7 + 5 + 6\r\n        4 + 9 * (6 * 6 * 4) + (7 + 6) * (3 * 8 + 3 * 6)\r\n        (7 + 5 * 6 * 8 * (7 + 4 * 5)) + 9 * 6 + 2 + 7\r\n        4 * 3 * 4 * (2 + 6 + 6 + 2 + 6) + 8 * (6 + 6 * 3 * 2 * 6)\r\n        4 * 6 * 2 * (9 + 4)\r\n        4 * 3 * 6 + 9 + (3 + 5 * 9 * 3 + 3) * (8 * 3 * 7)\r\n        ((6 * 7 * 9) + 2 * 5 * 4 * 8) * ((3 + 4 + 6) * 3 * 3) * 8 + ((3 * 8 + 9 * 5 + 6 + 8) * 2)\r\n        4 * 6 + 3 * 6 + 6 * (4 + 7 + (8 + 4 * 5 + 4) * 6)\r\n        2 + (6 + (5 + 8 + 4 * 5 * 6 + 6) + 4 + 2 * 2 * 8) * 9 * (6 * 6 + 9 + 7 * 8)\r\n        3 * 6\r\n        (9 + 8 * 9) * 4 * (3 + 5 * 3 + 5) * (6 * 3 + 6 + 9) * (6 * 9 * 3 * 3 * 4 + 9) * (6 + 9 + 2 + 8)\r\n        4 * (8 + 9 * 6) * 7 * 3 * (9 + 6 * 2)\r\n        (7 + 3) * (3 + 8 + 3 * 8 + (4 * 9 * 9 + 5)) + 4 * ((2 + 2 * 2 + 7 + 4 + 9) + 5 * (2 * 6 + 8 + 2) + 4 * (7 + 7 + 7 * 8 * 8 + 3) + 7) + 2\r\n        (7 + 4 + 5 * (3 + 5 * 2 + 3)) * 3 * (7 * 3 + 9 * (3 * 2 + 4 * 7 + 3 + 2) + 4) + (5 + 3 + (9 * 5 + 6 + 5 + 4 * 8) * 4 + 4)\r\n        4 * 6 + 7 + (3 * (4 + 2 + 4)) * 4 + (7 + (6 + 7) * 3 + 2 + 6)\r\n        6 + 3 * 5 * 2 * (4 * 9 + 6 + 5 * 8)\r\n        (6 * (3 + 2)) + (8 + (3 * 8 + 7 * 7) * 5) * (3 * (6 + 3 * 5 * 2 * 7 + 4) + 5 + 5 * (5 + 6 + 5 * 3 * 2 + 6)) + 6\r\n        (4 * 2 * 4 + 7 + 2) * 7 * (6 + 7 + (5 * 5 + 3) * (5 * 2)) + 5 + 2\r\n        9 * ((5 + 3) * 5 + 6 * 5)\r\n        ((7 + 9 * 9 + 8 * 8) * 4 + 6 * 5 * 6 + 9) + (9 + 5 * 3 + 5 * 8 * 2) + 8 + 2\r\n        (7 * 4 * 6 + 5 + (9 + 5 * 5 + 5) + 3) + 5 * (3 * 4 * 6 * 5)\r\n        2 + (8 + 9 * (8 + 3)) * 2\r\n        (9 + 9 * 5 + 5) * 2 * 6 * (5 + (9 * 4 + 7 + 6 * 2) + 3 + 3) + (7 + 4 + 3 * 4 + (4 + 8 + 5 * 2))\r\n        (4 + (7 + 3) + (4 + 5 + 7 * 9 * 8) + 5) + (6 + 5) * (2 * 2 * 9) * 7 * 9 + 4\r\n        5 + 9 + (2 * (6 + 9 + 9 + 2 * 3 * 3) * 8 + 8 + 4) * (9 + 9 * 4 + 3 * 9 * (5 + 9 + 7 + 4 + 7))\r\n        2 + 4 + 2 * (5 + 9) + (3 + 2 * 8 * (9 * 5 * 3 * 6 + 6 + 5) + 7 + 9) + 5\r\n        6 + ((2 + 2 * 3 * 9) * (4 + 6)) + 2 + 3 + 2\r\n        2 + (2 + 5) * (3 * 8 * 5 + 6 + 7) * 6\r\n        2 + 2 + (7 * (4 + 4 * 7 + 3) + 2) * ((2 * 8 * 5 + 2 * 4 * 5) * 2 * 9 + (8 + 5 * 4)) + 9\r\n        9 * 9 + 7 + (9 + 3 * (9 + 2 + 4) + 3 * 4 + 9)\r\n        5 + (7 + 8 * (7 + 2 * 5 * 7)) * 8 + 6\r\n        (2 * (2 + 5) * 2 + 2 + 8 * (4 + 3 * 8 + 8 + 2 * 9)) * 9 + 9 * 7 * 2 * 9\r\n        4 * (7 * (8 + 6 * 2 * 6 + 2 + 7) * (5 * 7 + 5 * 2) + 5 + 5 + (3 + 8 + 2 + 5 * 8)) + 7\r\n        5 + ((4 + 5 * 6 * 5) * (6 * 2 + 2) * 8) * (9 + 9 + 9 * 3 * 4 + 2) * 3 + 2 * 4\r\n        7 + 7 + 3 + 9 + ((6 + 5) * 8 * 2) * 6\r\n        5 * 7 * 5 + (5 + (8 * 6) + (5 * 2) * 6)\r\n        (9 * 5 + 7 * 5 * 3 + 2) * 5\r\n        (5 * 2 * 2 * (4 * 8 * 6 + 7 + 3) * 7) * 8 * 3\r\n        (5 + 4 + 9 + (4 * 7 + 5 + 8) + 9) * 7 * (8 * 7 + 6 + 4 * 2) * 8\r\n        3 * 9 * 7 + 7\r\n        2 + 5 + 3 * (6 * 8 + 3 + 5 + (9 + 8 * 7))\r\n        2 * 3 + 5 * 3 * (9 + 2 * 9 * 9 * 9 + 2) * 9\r\n        8 * ((9 + 7) + 9 + 6 * 7 * (7 * 9 * 6 + 6 + 4)) + 3\r\n        4 + 5 * 7 + (8 + (7 * 6 + 5 + 5) + 7) + 2 * 5\r\n        2 + ((3 + 7) * 4 + (9 * 7 + 5) + 4) * 2\r\n        5 + 2 + 4\r\n        3 + ((5 + 9 + 8) * (5 * 2 * 9 * 6) + 6) + 9 * 2\r\n        4 * (3 * 3 + 2 * 2) * (5 * 8 + 6 * 2 * 5 + 4)\r\n        5 + 8 * 2 + (8 + 3 + 4 * 2 + 2 + 5) + (4 + 8) * ((7 + 8 * 3 * 9 + 5 * 5) + 7 + 7)\r\n        5 + ((9 * 8 + 2 * 8 + 3 + 4) + 6 * 5) + 4 * 8\r\n        2 + (8 + 4 + 6 + 2 + 6) * 5 * (5 + 7 * 7 * 6 * 5 + 4) + 9 * 8\r\n        3 * (9 * 9 * 4) + 3\r\n        4 * 9 * ((7 * 9 + 2 * 2 * 6 * 7) * 6 * 6 + 4) * 5 + 6 + 8\r\n        2 + 6 + 7 + 5 + (4 + 2 + 2 + (9 * 2 + 8 * 7) + 9) + 9\r\n        3 * (3 * 5 + 2 * (5 * 9 * 8)) * 8\r\n        ((3 + 7 + 7 * 5) * 3) * 8 + 6 + 5 + 2 * 9\r\n        4 * 4 + (7 + (4 * 3 + 2 * 5 + 3) * 7 + 6 * (8 + 2 * 5 + 4 * 7)) + 4 * 7 * 8\r\n        7 * (2 + (4 + 6 * 4 * 8 * 7 * 6) + 5 + 8) * 5 + 2 + ((6 * 5 + 8 * 7 * 9 + 2) + 8 * 7 + 2 + 4) * (3 + 5 + (5 + 4) + 3 * 7 + 7)\r\n        9 + ((4 * 2 + 7 + 8) + 7) + 9\r\n        (6 * 7 * (5 + 9 * 9 + 9) + (5 * 9 * 8 + 5 + 2 * 2) * 5) * 2 * (6 * (7 * 3 + 5 * 7 * 9) * 2 * 5) + 5 * 2 + 8\r\n        7 * ((4 + 8) + 7) + 5 + 6\r\n        (8 * 4 + (5 + 4 + 7 + 3 * 4 + 5) * 9 + 9) * 2 * (3 * 3 + 5 + 4 * (5 * 5 * 5 * 9)) * 7\r\n        9 * 8 + 8 + (4 * 5 + 3) * 8\r\n        3 + 9 + (5 + 7 + 7) * 2 + 6\r\n        4 + 8 + (9 * 2) * ((5 * 5) + 5 + 8 * (6 * 3))\r\n        3 * 7 * 5 + 4 + (8 * 7)\r\n        (3 + 5) * 9 * 6 * (9 * 4 * 8) * 5\r\n        (9 + 8) * 3 * 9 + 3\r\n        9 + 6 + 9\r\n        (7 + 6 * (8 + 5 + 2) * 6 + 7 + 7) * 4 * (3 * 5) * 5 * 7 * 4\r\n        (9 + 3 * (4 * 2 * 3 * 9 * 7)) + 7 + ((9 * 8 * 4 + 2 + 4 * 7) * 7) + 2\r\n        2 + (6 + 9 * 3 + 6 + 5 + 4) + 8\r\n        4 * 7 + 5 + (7 + 8 * 7 * 4 * 7 + (6 + 9 + 3 * 6 * 9 * 8))\r\n        9 + 9 * 4 + 3 * 5\r\n        4 + (3 * 7 + 4 + (7 + 6 * 4 * 8 + 9 + 7) * 9 * 9)\r\n        (8 * (2 * 6) + 9 + 7 + 3) * 9 + 8 * (5 * 5 + 5) * (6 + 7 + 6)\r\n        (2 * 3 * (6 + 3) * 5 * 6) + 7 + 8\r\n        9 + 2 + 5 + (3 * (9 + 3 + 2 + 7 * 6) + (6 * 6 * 2 * 3 * 2 * 2) + 3 * 9 + 2) + (3 + 4 + 3 * 8 * 7) * 5\r\n        4 * 7 + 4 + 5 * (9 + 7 + 7 * (6 * 8) * 7)\r\n        (4 + 9 + (2 + 8 * 2 + 4) + 4) * 2 * 4 + 8\r\n        (7 * 8 * 7 + 7 + 5 + (6 + 7)) * 8 + 8 * 6\r\n        5 + 6 * 3 + 6 * (5 * 8 + 2 * 4 + 5) * 9\r\n        5 + (5 * 8 + 7 * 7 * (7 * 4 * 9 + 4 + 8 * 5)) * 9 + 8 + 5\r\n        5 * 6 + (2 + (3 + 3 * 6 * 4 + 5 * 2) * 7 * 7) + 8\r\n        8 + 6 * (6 * (9 * 5 + 9 * 9) + 6 + (4 * 2) + 6 + 9) + 9\r\n        8 + (3 + (6 * 2)) + 8\r\n        6 * (5 * 2 * 8 * 5)\r\n        4 * 2 * 7 + 7 + (3 + 2 + (4 * 6) + 5) * (2 * 6 + 5 + 7 * 2)\r\n        9 * 7 + 4 * 3\r\n        9 + (9 + (3 + 2) * (4 + 6 + 2 + 9 + 2) * 4 * 9 * 7) * 8\r\n        7 * 5 + (4 * 4) + 8\r\n        2 * 9 * 7 + (4 + 5 * 3 + 9 * 9 + 6)\r\n        8 * 4 + 7 * (5 + 3 + 3 + (2 * 5 * 2 + 6) + 7 + 3) * (5 * 9 + 2 + 5) * 3\r\n        ((7 * 8 * 6 * 3 * 9 * 5) + (6 + 5 * 7 + 8) * 5 * 7 * 9 * 2) + 8 * ((2 + 6 * 9 + 8 * 8 + 3) + 8 + 5 * 4 + 8) + 7 * 8\r\n        6 + 3 * 2\r\n        (8 + (8 * 4 + 3 * 2 + 3)) + 2 * 4 * 3 + 3\r\n        (4 + 4) * (2 + 8 * 3 + (8 + 5 * 6 + 3) + 8 * 5)\r\n        8 + ((4 * 5 + 7) + 9 * 2 * 2 + (2 * 7 + 3 * 6)) + 4 + 2 * 4\r\n        6 * 8 + 9 + (3 + 2 + 4 + (2 * 2 + 7 * 5) + 3) * 3\r\n        7 * ((3 * 6 * 3) * (3 + 4 * 5 * 4 + 8) + 5 + (7 + 3 * 2 * 9) + 7 * 4)\r\n        6 * ((6 + 5 * 7 + 6 * 8) * 5 * 3) + 5 * 8 + 6\r\n        (4 * 7) + (2 + 8) + ((3 + 4 + 4 * 8 * 3) * 2 * 2 + 7) + 5\r\n        ((2 * 5 * 9) + 8 + 4 * 7) * 3 + 8 * (6 * 4 * 3 * 2)\r\n        ((2 * 4 + 2) * 2 * 4) * 9 + 5 * 6\r\n        3 * (8 * 3 + (6 + 3 + 4 + 6 * 6) * 7 + 8) * (7 * 2 + (9 + 4 + 3 * 7) + 3 * 7 + (4 * 5 + 3)) + (8 + 3 * 4 * 5 + (7 + 7 + 7) + 3) * 9 + 9\r\n        (8 + 9 + 5 + 3 + 3) + 6 + 6 + 9\r\n        7 + (6 * 2 * 3) + 8 * 8\r\n        2 * 7 + 4\r\n        (3 * (6 + 4) + (5 + 6 * 5 + 4) * 8 * 9 * 6) * 6\r\n        2 * (7 + 4) * (6 + (3 * 2 + 9 + 2 + 2 + 7) + 4)\r\n        5 * 8 * 4 + 5 + (6 * 7 + 3 * 2) + 2\r\n        (9 + 8 + 5) * 2 + 2 + 6\r\n        3 * 9 * (2 + 4 * 4 + 3 + 2 * 3)\r\n        6 + ((9 * 6 * 3 + 8) * 4 * 8 + 7) * 3 + 2 + 8\r\n        7 * 8 + (3 + 6 + 3) + 7\r\n        7 * (8 + 2 * 5 + 3 * 5 * 3)\r\n        2 + 2 + (3 + (7 * 7) + (7 + 3 + 4 + 3 + 3 * 5) * 4 * 7) + 5\r\n        (3 * 8 + 4) + 4 * (5 + 5 * 2) * 4 * 2\r\n        6 + 9 + (6 + 5) + 6 * (6 + 4 * 3 + 7 * 3 + 6)\r\n        2 + ((6 + 6 * 2) * 5 * 2 * (4 * 7 + 3 * 9 * 4)) + (3 * (2 * 8 + 6 * 4 + 9 + 2) * 2)\r\n        4 * ((5 * 9 * 2 + 3 + 3) * (5 * 8 + 9 + 8 * 5 + 7)) * (6 * 6 * 2 * 9 + 6 + 4) + 9\r\n        (4 * 9) + (2 + 8 + 7 * 6) + 7 + 7 * 7 + 8\r\n        8 + (9 + 5 + (5 * 2 * 6 * 2) * 4 * 9 + 7) + 8 * 3 + 4 * (5 + 4 * (2 + 2 + 6 * 8 + 9 * 7) + 2 + 3)\r\n        (3 * 6) * 2 + 3 + 3 * 3 + ((2 + 5 + 2 + 4 * 4) + 7 * 9 * 2 + 7 * 4)\r\n        (8 * 9 + 6) + 3 * 2 + (5 * 5 * (2 * 4 * 8 * 3) * (2 * 5))\r\n        9 * (6 * 6) * 2\r\n        8 + 6 * 4 * (9 * (8 + 7 * 6 + 8 + 5 + 8)) + 9\r\n        8 + 8 * 7 + (8 * 7) + 8\r\n        7 * ((6 * 5 * 5 + 9 * 6) * 4 + 3)\r\n        6 + 3 + 8 * 9 * 4 * (8 + 7 * 4 * 6 * 2 + 5)\r\n        (2 + 2 * 3 * 4 * (9 + 8 * 4) * 7) + 3\r\n        3 * ((5 * 6 * 9 * 2 * 6 + 4) + 3 * 2 + 7 + 5) + 5 * 2\r\n        9 * (4 + 8) + (6 * 5) * 4 * ((7 + 2 + 5 + 7) + 2 * 5 * 4) * (9 + 3 * (6 * 7 * 5 * 4 + 6) + (5 * 8 * 3 * 4 * 6) * 5 + (2 * 2 + 7 + 3))\r\n        4 + ((8 * 3) * 4 * 7 + 2 + 8) + (4 + 8 + 6 + 2) * 5 * 2\r\n        4 * (2 * 5 * 8 * 2 + 7 * (9 * 7 * 6 + 3 * 2 + 9))\r\n        3 + ((4 * 6 + 3 + 6 * 5 + 3) * 3) + 2 + 7 * (3 + 2) + 7\r\n        (9 + (4 + 8 * 4 + 6 * 4) + 4 * 9) + (4 * 6) * 6 + 3\r\n        (4 + 5) * 8 * 2 + 3 + 5\r\n        3 + (6 + (6 + 7) * 8 + (4 * 8 * 6 + 4) * (6 + 2 * 7))\r\n        8 + 8 * (9 + 8 + (4 * 6 * 6 + 2 * 3 * 4) + (8 + 2 + 3 * 7 + 4) * 9) * (2 + 9) * (9 * 7 * (6 + 4 + 5 + 3 + 8 * 5) * 9 * 7)\r\n        7 * 6 * (8 * 2 + 8 * 8 * (9 * 5) * 5) * 3 + 6\r\n        5 * (2 * (5 + 6 + 3) * (9 * 6 + 6 * 2 * 7) + 6) * 5 * 4 + 2 + (6 * (3 + 9 * 8))\r\n        (3 + 6 * 8 * 9) + 8 + 3 * 2 + 2 + 2\r\n        4 * 7 * (3 * 5 * 5 + 8 + 5)\r\n        (5 + 2) * 6 + ((9 + 3 * 7 * 5) * 6) + 8 * 9\r\n        7 + 5 + 8 + 8 * (9 + 4 * 5 + 4 * 4 * 9)\r\n        5 + 7 * 2 + 8 + 2\r\n        9 + ((2 + 9 * 6) * 8 * 9 + 2 + 2) + (6 * (7 + 3) + 3 + 3 * 7) * 3 * 3 + 9\r\n        8 * (5 + 8 + 2 * 4 * 2) + ((2 + 4 * 7) * 8 * (4 * 8 + 2 + 2 * 6 + 8) + 2) + ((8 + 3 * 6 + 9) + (5 * 3) * 8 * 7 * 8)\r\n        9 + 4 + (4 + 9 + 7 * 6) + 3 * 6 + 9\r\n        9 + (2 * 5 + 7 + 5 * (6 * 2 + 5 + 2 + 3 * 5) + 3) + 2 * (3 + 9 * 4 * 8) + 3 + ((9 + 3 + 7 * 2 + 7 * 5) + 7 * 5)\r\n        7 * 4 * 6 * ((9 + 9 * 2 * 4 + 2 * 2) * 7 + 9) * 8\r\n        6 * 5 + 4 * ((4 * 9 * 7) * 8 + 6 + 7) * 7 + 3\r\n        9 + 9 * 9 * 4\r\n        8 * 6 + 7 * ((9 * 4 * 2 + 9) + (6 * 9 * 2 + 2 + 5) + 8 * 6 * 6)\r\n        3 * (6 + 9 * (9 * 3)) + ((5 * 6 + 7 * 5 + 4 * 3) + 5 * 6 * 9) * 5 * ((8 * 2 * 6 * 5) + 5 * 8 + 5 + 9)\r\n        4 * (6 + 6 * 7 * 5 + 8) * 6 + 2\r\n        ((9 * 8 * 3 * 6 + 2) * 4 + 7 * (5 * 8 * 2 + 4 + 9)) * 2 + ((7 + 3 * 3) * (7 + 3) * 3) + 7\r\n        8 * 4 * 9 + 8 * (8 + (6 + 6 * 2 + 4 * 4) * 3) + 8\r\n        (9 + (8 * 8 + 9 * 6) * 7) + 7 * 9 + 6 * 4\r\n        3 * 7 + (6 * (5 * 5 + 2 * 8 + 7 * 2) + (2 + 2 + 5 + 4 + 9) + (4 + 5 * 3 + 8 * 7) + 9 + 9) + 2 * 4\r\n        9 + (3 + 9 * (9 + 9 * 4) + 5) * 8 * ((6 * 8 * 4 * 9 + 9) * 5 + 2 * 9)\r\n        7 + ((5 + 6 + 5) * 8) * 5 + 9 + 5\r\n        2 + 2 + 9 + ((2 * 8 + 3) + 9 + 7) + ((6 + 3 + 2 + 8) + (4 * 7 * 6 + 2))\r\n        3 * 6 + ((6 * 6 + 7) + (2 + 3 * 7 + 4) + 4 * 2) * 2\r\n        9 * 3 + (9 * (6 * 5 + 6 * 2 + 7) + (5 * 7) + 3) * 6 * 9 + 3\r\n        5 + 9 + (9 * (4 + 5)) + (9 * 2 * (3 + 7 + 2 + 6 + 8) + 6 + 2) * 7\r\n        4 * 3 + ((7 * 4) * 3 * 4 + 7 + 9 + 7)\r\n        2 * ((3 * 6 + 3 + 3 + 9 + 2) * 4 + (5 * 8 + 4 + 6 + 5 + 8) * 5) + 9 * 5\r\n        4 + 9 * 3 * ((2 + 2 + 5 + 2 * 3 * 4) * 6 * 8 * (5 + 3 + 7 * 9 + 4) * (2 * 4) + (4 * 2 * 2))\r\n        5 + 7 + ((4 + 5 + 5 + 6) * 5 + 9 + 6) * 9 * 7\r\n        ((6 * 8 + 5) + 8 + 3 + (4 * 5 * 9 * 2 * 9 + 6) + 7) * 9 + (6 * (8 + 6 + 4) * (6 * 9) + (9 * 2 + 8 * 4 * 8 + 5) * 9 * 5) + (5 * (7 + 5 + 3) * 5)\r\n        ((4 * 6 + 4 * 2 * 4) * 9 + 5 * 9 + 5 * 9) + (3 * 7 * 9) * 7\r\n        2 * 2\r\n        (3 + (5 + 6) + 3 * 4 * 5 + 3) * 7\r\n        5 + 7 + 2 + 3\r\n        (8 * 7 + 9 * 9 + (3 + 9 * 7 * 7 * 9) * 6) * 4\r\n        8 * (9 + (3 + 4 + 7 * 5 * 9) + (8 * 4) * 4 * 7) * (8 + 3 + 5 * 9 + 8) + 2\r\n        9 + 2 + (3 + 3 + 8) * 2 * 3 + (3 * 9 * 5)\r\n        4 * 9 + 5 + (8 * 8 * 4) * 8 + 3\r\n        6 * 5 * ((9 + 9 * 9) * (3 * 5) * 3 + 6 + 8) * 2\r\n        4 * ((2 + 2 * 8 * 6 + 5 + 7) + 6 * 8 * 7 * 6)\r\n        (9 + 3 * (4 + 5 * 8) * 5 + 9) + (9 * 4) * (3 * 3) * 8\r\n        (2 * 3 * (6 * 5 + 8)) + 7 + ((5 * 7 * 5 + 9) + 9 * 3 + 2 * 2) + (3 * 5 * 8) * 2 * 4\r\n        3 * (8 + (6 * 3 + 9 * 7 + 2 * 5) * 2) * 3\r\n        7 * (3 + (8 * 9 + 9 * 6 * 4) * 8 + 4 + 6 + 7) + 7 + (9 + 5)\r\n        8 + 4 + 7\r\n        ((2 * 8 * 5 + 3 + 9) * (9 + 6 * 8 * 3 * 5) * 2 + 7 + (2 + 2 * 4 + 5) + 9) + 8 * 7 * 6 * (4 * 8 * 3 + 7 * 7 * 9) + 4\r\n        (2 + 3) + 8\r\n        5 * 7 * ((6 + 6 + 8 * 2 + 4 * 5) + (6 + 9 + 8 + 8 * 6)) * 8 + 3 + 2\r\n        (3 + 9 + 7 + 5) + 6 + 3\r\n        7 + ((2 * 5 + 8 + 7 * 3 * 2) * 9 + 5) + 9\r\n        4 + 2 * 4 * (5 + 8 * 8 * 5 + 6)\r\n        5 * 9 * (6 * 3 * 7 * 7 + 9 + 6) * 7 * (6 + 2 + 7 + 9) + 5\r\n        4 + (5 * 2 + (5 + 4) * (2 * 3 + 4 * 5 + 4) * 3 * 2) * ((9 * 6 * 5 + 7 + 7) + 7)\r\n        (7 + (5 * 9 * 3 * 8) * 4 + 2 * 7 + 2) * 5\r\n        ((4 * 8 + 9) + (3 * 7 * 7 * 7) * (9 * 3 * 2) * (8 + 4 * 6 * 9)) * 7 + 3 * 7 + 2\r\n        (8 * 3 + 8 + 2 * 3 + 3) + 2 * 3\r\n        5 * (5 * 8 + 3 * 4 * 3 + 6) + 7 + 7\r\n        5 * (7 + (4 * 9)) * 3 + 7\r\n        8 * 9 + (9 + (2 * 2 * 8 + 6)) * 6\r\n        4 + ((9 * 6 * 7 * 6 + 8) * 6 * 2 + (9 + 7 + 2 * 7 + 4) + 6) + 5 * 4 + 7\r\n        (5 + 3 * 9 + (4 + 7 + 5) * 2 * (8 * 4)) * 5 + 3 + 6\r\n        9 * 4\r\n        2 * (3 + (9 + 6 * 4 + 7 * 5 + 4) + 7) * 6 * 4 + 8 + 7\r\n        (2 * 9 + 3 * 2 + 8) * 5 * 8 + (9 * 3 * 2 + (9 + 4 * 8) * 6) + 7 + (8 + 7 + 8 * 2 * 2)\r\n        (9 + 7 + 5 * (6 * 4 * 7 + 9 * 9 + 2) * 2) + 7 * (6 * (2 + 7 * 3 * 8 * 3 + 3) * 7 + (4 * 4 + 5 + 6 * 9))\r\n        (2 + (6 + 8) * 6 + 9 * 4 * 2) * 9 * 6 + 8\r\n        6 * (5 * 8 + 7) * (4 * 3 * 6 + 4 * 4 * 5) * 6 * (7 * 4 + 5)\r\n        2 + (8 * (7 * 7 * 2) * 2) + 3 + (4 + 5 * (8 * 4 + 2 * 3) + 7 + 8) * 4\r\n        3 + ((7 + 5 + 3) * 7)\r\n        (5 + 6 + 7) * 3 + ((9 + 2) + 8 + (9 + 5 + 8 + 4 + 7 * 4) + 4)\r\n        ((4 * 2 * 5 * 6 + 6) + 2 * 9 + 6 + 3) + 6 * (8 * 8 + 5 + (9 + 4 * 2 + 2 * 7 * 7) * 6) * 8\r\n        (5 * 9 * 8 * 7 * 5 + 4) + 6 * 4 * 5 * 9 + 5\r\n        5 * 5 + 5 + (9 * 3 + 3 + 7 * 4) + 6 + (7 + 2 + 5 * 6 * 4 + 4)\r\n        (5 * 2 * 7 + 9 + (6 * 9 + 2 * 3)) * 3 * 7 * 6 + 5 * 9\r\n        5 * (6 * 5 + 9 + 5) * 9 + (5 + 6 + (4 * 3 * 9 + 4 + 4 * 4) + 3)\r\n        ((2 * 2) * 7 * 9 * 2 * 5) + 3 + (8 + 9) + 7\r\n        7 * (3 + (8 * 9 + 3 + 8 + 2) + 8 * 9 + 5 + 7)\r\n        8 * (4 + (6 * 3 + 6 * 5 * 6 + 5) * 9 * (4 + 3 + 5) + (7 + 4 * 6 * 3)) * 2 + 7 * 2\r\n        (8 + 9 * 7 * 8) + 7 * 3 * 9 * 3\r\n        7 + 6 * 4 * (9 * 8 + 6 + 7) * ((2 * 8) * 4 + (6 * 8) * (7 * 6 + 8 * 3) + 5 * 7) * 7\r\n        (4 + 9 + (3 + 2) + (5 + 3)) * 9 * 7 + 3 * 4 + 4\r\n        8 * (3 + (9 + 5 + 9 * 3) * 9 * 7 + 3 * 9) + 6 + 6\r\n        2 + 3 + (4 * 6) * (5 * 9 * (2 + 3 + 7 * 8 * 4) * 8 * 3)\r\n        3 + 8 * (2 * (7 + 8 + 6 + 7 + 7))\r\n        ((8 + 7 * 7 + 6) + 5) + 3\r\n        7 * 3 + (2 * 5 * 9 + 8) + 8\r\n        2 * 5 * (7 + (6 + 9 * 5 * 2 * 6 * 6) * 8) + 6\r\n        ((4 * 3 + 3 + 3 + 6 + 9) * (9 + 2) * (5 * 8 * 9 + 6 * 4) + (9 * 8)) + 6 + 8\r\n        ((7 + 9 + 2 + 7 + 4) * 8 + (4 * 7 * 4) * 4) + (5 + 8 + 6) + 5 * 9\r\n        (8 * 6 * 7 * 7 + 7) + 2 + 5\r\n        2 + ((8 + 3 * 7 + 7 * 7) * 2 + 8 + (4 * 8 * 5 + 4))\r\n        9 + 2\r\n        4 * 7 * (3 * (9 + 8) * 8 + 2 * 8) * (8 + 2 + 6 + 3) * 8\r\n        6 + 3 * 7 * (2 + 5 + (3 + 8 + 9 * 2 * 3 * 4) + (7 * 9 + 6 + 4) * 2 * 6)\r\n        (5 * 2) + 3 + (4 * 8 * 9) * 7 * 7 + ((7 * 3) + 9)\r\n        8 * (3 * 4 * 5 + 8) * 7 + 3\r\n        5 + (6 + (7 * 8 + 2 * 4) + 2 + (4 + 2 + 9 * 7 + 4 + 6) + 5 + 5) + ((5 + 9 + 3) * 6 * (9 * 7 + 4 * 5 + 8) * 3 * 8) * 6\r\n        (9 + 6 * (7 * 4 + 3 + 7 + 9 + 5)) * 5 * ((7 + 7) * 4 * 7) + 6\r\n        5 + (9 + 3 * 6 + 2 * 9) + 5 * 3 * 5 + 6\r\n        9 * ((7 + 5 + 2) + (4 * 8 + 7 + 9 * 5) * (8 + 9) + 8) + 5\r\n        3 * (4 * 8) + 2 * 4 + (6 + (9 * 3 * 9) * (3 + 3 + 6 + 2 + 8)) * ((5 * 4 * 9 + 2 + 4) + 7 + 8 * 2)\r\n        (2 * 3) * 4 * (4 + 6 * 3)\r\n        5 + (4 * 4) + 2 * 8\r\n        (4 * 5 * 5 + (6 * 9 + 9 * 6) + 2 * 7) * (4 + (5 * 6 + 5 * 8))\r\n        5 + ((3 + 5) + 5) + 5 + 6 + 5\r\n        6 * (4 * 3 + 6 + 3 + 9 + 5) * (7 + 6) * 2 * 7\r\n        5 + 5 * 5 + 2 * (2 + (7 + 8 * 9 * 6 + 4) + 4 + 2)\r\n        9 + ((8 + 6 + 4 + 4) + 5 * (5 + 3 * 6 + 2 + 2 + 8) + (3 + 9 * 5) + 4) + 4\r\n        5 + 3 * 9 * (8 + 3 + 9 + 2) * 7\r\n        (5 * (3 + 5 * 2 * 3)) * 9 + 5 * 4\r\n        9 * 6 * 8 + (4 + (5 + 6 * 9 * 5 + 7) * 6) * 2 * 2\r\n        8 + 2 * 4 * (5 * 3 * 2 + (7 + 3)) * 9 + 3\r\n        2 + 3 * 9 * (4 * 4 + 3) + 2 + (7 * 2 + (2 + 6 + 8 * 7 + 6 * 2) + (4 + 3 + 3 + 3 * 5 * 5))\r\n        2 * 2 + (9 + 6) + 5 + 5 + 8\r\n        6 + 5 * (6 * 2 + (2 + 2) + 7)\r\n        5 + 7 + (7 * (3 + 7 + 7) * 9 * 2 + 8 + (6 + 7 * 8 * 3))\r\n        (6 * 5 + 7 + 5 + 7) * (4 + (5 + 6 + 4 * 7 + 4 + 4) + 6 * 9 * (5 * 7 + 9 * 5 * 6) + (2 + 8 * 4 * 6)) + (4 * 5 + 7 * 9 * 3) * 4 * ((2 + 8 + 9 + 2 * 8 + 3) * (4 + 3 + 2 + 7 + 7 * 6))\r\n        2 * 6 * 4 * ((5 + 9) * 5 * (6 * 7) * 4 * 8)\r\n        (7 + 4 + 8 + 2 + 5) * 2 + 3 * 6 + 7\r\n        6 + 3 * (6 * (2 * 4 + 7 + 3) * 6 * 9 + 4 * 3) + (5 * (4 + 9 * 5 * 5 * 2 + 2)) + 2\r\n        9 * 9 * 9 * 3 * ((9 * 9 + 6 * 2 + 6 * 5) + 7) * 6\r\n        (3 + 8 * 8 + 8 * 8) + (5 + 3 * 5 + 4 + 6) + 9\r\n        6 * 8 * 4 + (8 + 5 * 2 * 7)\r\n        4 * (2 + (8 + 3 * 9) * 3) + 2\r\n        (2 * 9) * 8 + 4 * (4 + (7 * 6 * 9) + 4 + (5 * 5 + 7 * 7 * 9) * 2) + 3 * 9\r\n        ((4 + 7 * 3 + 4 * 2 + 3) + (9 * 3 * 9 + 6 * 8) + 9) * 3 * 5 + (5 + 4 * 5 * 6)\r\n        (8 * 2 * 9 * 6 * 3 * (5 + 6 * 2 + 9 * 4)) + 3\r\n        3 + 3 * 7 + 3 * 4 + 5\r\n        8 + (7 + 5) * 8 + 3 + ((8 * 7 + 8 + 6 + 6 * 3) + 7 + 2)\r\n        3 * 4 * (4 + 3 * 6)\r\n        3 + (8 * 4 + 8 + 9 + 6)\r\n        6 * 9 * 6 * 2 * (7 * 6 * 2 + 3 * (8 + 6)) + (5 + 7)\r\n        6 * 7 * 6 * 7 * 8\r\n        6 + 9 * (2 * (2 + 2 * 9 + 4) * 2 + 6 * (5 * 8 * 5 + 3 * 5)) + 4\r\n        8 * 3 * 3 * 3 * 8 + (3 + (3 * 8 + 7) + 5 + 2)\r\n        7 * 2 * ((8 * 7 + 3) + 3)\r\n        2 * 9 + (7 * 6) + (5 + 8) + 7 + 9\r\n        9 + 4 + (6 + (7 * 3 * 9 + 3 + 7) * 4 + (2 * 9 + 3 * 2 * 6) * 3 + 6) * 2 + (5 + (6 + 2 * 4 * 5 * 3 + 7) + 5 * 3 + 7 + 6) + 3\r\n        2 + 2 + 4 * 5 * 9 * 2\r\n        7 * 2 * 3 + 8 * 6 * 5\r\n        5 + 6\r\n        (3 + (6 + 7 * 2) + 8 * (2 + 4 + 4 + 5 + 6)) * 6\r\n        (4 * (2 + 3)) + (8 * 3) + (7 * 8 * 8 + 3 + 9 * 4)\r\n        8 + (8 * (2 * 5) * 8 * 7 * 2) + 7\r\n        6 * (6 * 8 + (9 * 5 + 2 + 9 + 3 * 6) * 8) + 7 + 6 * 6 + 2\r\n        2 * 7 * ((7 * 3) * 7 * 2)\r\n        2 * (9 + 8) * 3 + 8 + 7\r\n        (6 + (2 * 2 * 2) + 9 * 6) * 6 + 9 + (7 * 4 + 8)\r\n        4 * 7 + 7 * (3 + 2 * 4 * 8 + 6) + 9\r\n        8 + ((6 * 4 * 6 * 3 * 2) * (9 + 5 + 4 * 4 + 5 + 9) * 3 * 3 * (4 + 5 * 8 + 5 + 6) + (9 + 8 * 9 + 6 + 8 * 7)) * (9 * 9 * 2) * 5 * 3 + 2\r\n        5 + ((3 + 7 * 9 * 6 * 6) + 8 + 3 * 3 + 8 + 4) + (4 * 8 * (4 * 9 + 8))\r\n        ((6 * 4 + 2 + 7 * 4) * 2) + (8 + 9) * (8 * (2 + 7 * 7 * 4 * 9 * 3) * 7 * 7 + 4) * 3 * 4 * 7\r\n        (8 + (9 * 6 + 5) + (4 + 5 * 4)) + 9 + (3 * 8) + 6\r\n        ((3 + 7 + 9) + 3 + 3) * 4 + 2 + (6 * (8 + 4 + 3 + 4) + 3) * 7\r\n        ((7 + 9) * 4 + (7 + 8 * 6 * 5 + 8) + 2) * ((3 + 4 + 7) + 2 * 3 * (5 * 6 + 6 * 4 * 4) * (5 + 2) + (3 * 4 * 4))\r\n        5 * (8 * 6 * 3 + (2 * 8)) + 2 + 5 * 2 + 6\r\n        4 * 5 + (8 * 4)\r\n        (4 * 5 + (8 + 7 + 5 * 8 * 5 * 8) + (2 + 7)) * 2 * ((8 * 3 + 5 + 9 + 3 + 5) + 3 + 5 + 8) * (3 + 8 * 6)\r\n        (7 * 6) * (2 + 8 + 6 + 3 * 5) * 2\r\n        3 * 7 + 5 * 2 * ((9 + 8 * 7 * 4 * 2) * 5 + 4 + 9 * 4 * 5)\r\n        9 + 7 * 3 * ((7 + 3 + 2) + 8 * 4 * 4 * (7 + 5 * 6)) + 4\r\n        ((2 + 9) * 4 * 7) * (8 + 9 + 4 * 8 + 6 + 2) + (9 * 4 * 9 * 6 * 6 * (6 * 4 + 6 * 4 * 7 + 3)) * 6 * 3\r\n        (4 * 4) + 6 + 4 * 7 * (4 + 8 + 9 + 9 + 3) + 3\r\n        6 + 3 * (7 * 3) * 8 + 9\r\n        6 * 3 * 2 * 3 * 4\r\n        9 * (5 + 6 + (2 * 9 + 6 + 8 * 7) + (2 * 5 + 7) + (5 * 2 + 9 * 3 + 7 + 7)) * 6 * 5 * (9 + 6 * (5 + 2 * 8 * 9 * 5 * 9) * 3 + 6)\r\n        8 + 4 + 2 + (3 * 3 * 2 * (9 * 7 * 8 * 2)) + 4 + 7\r\n        (3 * 6 + 9 + 8 * (6 * 4)) * 7 * ((5 * 9 * 2 * 2) + 3 + 4 + 8 + 5) + 3 * 7\r\n        (2 * 4 + 4 + (8 * 2 + 8 + 6 + 2) + 4 + 9) + 9 * (2 * 6 * (4 * 3 + 7 + 6 * 4 * 7) + 3 * 2) + 3 + 8 * 7\r\n        7 + 7 + 8 + (9 * 7 * (6 * 8 * 2 + 7 * 4)) * 5 + 9\r\n        (9 + (8 + 8 * 7) + 2 * 3) + 3 + 5 * 2 * (5 + 4 + 2 + 6 * 8 + 5) + 8\r\n        4 * 4 * 4 * (2 + 6 * 7) * (5 + 4)\r\n        7 + 7 * 8 + 4 + (6 + 4 + 4 + 5)\r\n        ((3 + 6) * 6 * 7 * (5 * 6 + 5)) + 2\r\n        ((9 + 9 + 4) * 7) * 7 * 7 * 3 + 6 + 4\r\n        9 + 2 * 9 * 5 * 8\r\n        3 * (7 * 7)\r\n        6 * 2 + 3 + 2 * ((6 * 6) * 3)\r\n        2 + 6 * ((9 + 7 * 3) * 7 + 8 + (3 + 9) * 7) + 5 * 3\r\n        6 + 6 * (8 * 5) * (2 * 3 + 5 * 8 * 5 + 2)\r\n        (5 + 5 * 4) * 2 + 3 * ((4 * 6 + 2 + 9) * 9 + 7) + 8 * (7 * 8 * 5 * 7 + 4 * 9)\r\n        5 + 8 + (4 + (5 * 6 * 6 * 5 + 4)) * 4 + 2\r\n        6 + 2 + (4 * 7 * 7 * 2 * 8 + 8) + 7\r\n        8 + ((5 * 9) + (8 + 8 + 6 + 7 + 6 + 3) * 9) + 7 + 7\r\n        5 + 5 * 3 + 8\r\n        (6 + 4 + (8 * 2) * 5) * 3 * 6 * 8 + 3\r\n        (4 * 2) * 2 + 2 + 5 + (7 * (6 * 5 * 6 + 4) * 8 * (8 * 2) * (9 * 5 + 4 * 3 + 6 * 4) * 3)\r\n        8 * (3 + 7 * 5 * 4) + 4 + 4 + 6 * 8\r\n        (5 * 7) * 5 + 9 + (4 + 8 * 9 * 5)\r\n        3 * ((5 + 9) * 4 + 6 * 7) * 2 * 3 * 8\r\n        7 * (6 * 9 * (6 * 9 + 3 + 6 * 4) * 5) + ((8 + 5 + 2 + 4 + 8) + 4 + 9) + 8\r\n        7 + (3 * 5 * 7 + (4 + 9 + 3 + 6 + 7)) + (5 + 8 * (7 + 5 + 7)) + (7 * 4)\r\n        (4 + 7 + 2) * 2 + 9\r\n        6 * 4 + 9 + 6 * 6 + 7\r\n        6 * ((7 * 6) * 7 + 4 * 5 * 6 + 4) * (9 * (9 + 3) * 7)\r\n        (4 * 5 + 4 * 2 + 3 + 3) + 8 * 6 * ((3 * 4 + 5) + 2 + 3 * 8 + 6 + 9) * 8\r\n        ((5 * 2 * 6 + 3) + (7 + 3 + 3) * (5 + 9)) * 7 * 6\r\n        5 + 6 * 4 + (7 + (3 + 3)) * (9 * 9 + (2 * 4 * 4 + 3) * 5 + 5 * 4) + 5\r\n        3 + 5 * (6 + 9 + (7 + 3 + 3 + 7) * 4 + 2 + 8)\r\n        5 * 5 + (5 * 6 * 5) * 5 * 2 + (3 * 5 + 9 + 6)\r\n        6 * (8 * 7 * 2 + 6) * 3`\r\n    );\r\n}\r\n"]}