parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"QCba":[function(require,module,exports) {
"use strict";var n=function n(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=0),e>=t.length?r:n(t,e+1,0===e?parseInt(t[e]):e%2==0?"+"===t[e-1]?r+parseInt(t[e]):r*parseInt(t[e]):r)},t=function n(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=[]),t.length?n(t.slice(1),"("===t[0]?e+1:")"===t[0]?e-1:e,r.concat({char:t[0],depth:e,index:r.length})):r.filter(function(n){return n.depth===Math.max.apply(Math,r.map(function(n){return n.depth}))}).slice(0,r.filter(function(n){return n.depth===Math.max.apply(Math,r.map(function(n){return n.depth}))}).findIndex(function(n){return")"===n.char}))},e=function e(r){var i=t(r);if(!r.find(function(n){return"("===n}))return n(r);var u=n(i.map(function(n){return n.char}));return e(r.filter(function(n,t){return!i.find(function(n){return n.index===t})}).join("").replace("()",""+u).split(/(\d+|\+|\\*)/g).filter(function(n){return n.length}))},r=(new Date).getTime(),i=c();function u(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];"undefined"!=typeof console&&(console.log.apply(console,n),document.querySelector("pre").innerHTML+="<br/>"+n.join(" "))}function o(){return"1 + (2 * 3) + (4 * (5 + 6))\n    ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"}function c(){return"(8 * (6 * 8 + 3) * 9 * 9 * 8) * 2\n        4 + (9 * (8 + 9 + 7 + 5 + 2) * (4 + 3 + 2 + 9 + 5 * 7)) * 2\n        (7 * 8 + 6 * 3) * 3 * 2 * ((5 + 7 * 8 * 8) * (9 + 6 * 9 * 7 + 6 * 7) + 8 + (7 + 2 + 3 + 7 * 5 * 5) * (5 + 8) + 5) * 6\n        4 * 9 * (6 + 7 + 6 + 5 + 7 + (4 * 6 + 5)) + 9 + (4 * 2 * 6) + 2\n        5 * ((3 * 2 + 2 * 7) + 9 * 6) + (6 * (5 * 4 + 4 * 2 * 3 + 9) + 8 * (4 * 4) * 7 * 2) + (9 * 7 + 5 * 4)\n        4 + (8 + 9 * 5) + 5 + 9 + 6 + 2\n        (4 + 4 * 2 + 2 + 3) + (9 * 7 * 9) + 2 * 9 + 9 * 5\n        6 + (9 + 4) + 4 + 6 * 7 * 5\n        4 * (8 * (4 + 4 + 8 * 7 * 6 + 8) * 8 * 9 + 7 * 7) * 8 + 2 * 9 + (5 * 7 + 3 + (8 * 8 * 3 + 3 + 4) * (8 * 5 + 4))\n        (7 + 4 + 6) * 6 * 3 * 6 * 8 + 4\n        3 + (7 * (4 * 3 + 7 * 8 + 3 + 3) * 8) + (7 + 9 + 4 + 3 + (4 * 7) * 5) + (3 + 8) + 2 + 3\n        4 + (9 + (8 * 3 * 8 * 6 * 4 * 9) + (5 * 4 + 5 + 8 + 5) + (7 * 8 + 3 * 4 + 8)) * 9 + 7 * 9\n        7 + (2 + 8 + (7 * 6 * 8 + 6) * 8) * 9 + (5 * (9 * 6))\n        (9 * (6 + 2 * 3 * 9 + 7 + 5) * 9 + (6 + 6 * 9 * 6)) * 6 + 8 * 8 + 2 * 4\n        (5 * (7 * 9 + 8 * 2 + 5 * 4) + (6 + 7 + 6 + 9) + (5 + 3 + 6 + 9 * 7) + 7 + (4 + 9 + 2 * 3 * 4 + 5)) * 2 * 8 * (2 * 9 * (8 * 5 + 3 * 8 + 5)) + (5 + 4 * 4 * 2) * 2\n        9 * (9 * 2 * 3)\n        (7 * 8 * (6 * 4) + 8) * 4 + (3 * (9 * 4 + 7 * 6 * 3 + 9)) + 2 + 5\n        (6 + (4 * 6 + 8 * 9)) * 6\n        9 + 5 * (9 + 6 + (9 + 7 * 8 + 2 * 9) * (4 + 6 * 5 * 8 * 2) + 2 * 8) * 8 * (9 + 5 * (4 * 9) * 3 + 3 + (4 * 2))\n        2 + (6 * 8 + 6) * 8 * (5 + 2)\n        6 + 8 + 8 + (9 * 8 + 2 * 4 + 4 + 2) * 2 * 3\n        ((5 + 5) + 2 + (7 * 2)) + 8 * 5\n        ((8 * 9 * 5 * 7 + 3) * 8 + 4 * 5) * 2 + 7 + 9 + (6 * 5 + 7 + 2 * 6 * (4 * 9 + 5 + 2)) + (7 + 2 * 4 + (9 * 3 + 6 + 6 * 7 + 6) + (9 * 6 * 2 + 3 + 5) * 4)\n        3 + (2 + 7 * (5 + 2 + 8 * 5) * 7 * 7 * 3) * 9 * 4 + 3 * 8\n        (6 * 3) * (2 + 4 * 5 + 5 * 3)\n        5 * (2 * 2 + 6 * 2 * 2) + 5 * 6 * 4 + (9 * 5 * (5 * 4))\n        3 + 6 * 2 * 6 + 8 * 9\n        5 + 4 * (2 + (7 + 2 * 8 + 5 + 9 * 7)) * 8 + (2 * (6 * 3 * 3) + (6 * 5) * 8 * 9)\n        7 + (2 + 9 * 2 + (2 + 4 + 8 * 4)) * 4 * 3 * (8 * 4 * (4 + 5 + 8) * 5 + 3)\n        8 + ((8 * 3) + 3 * 7 + 6 + 8) * 4 + 6 * 6\n        2 * (4 + 9 * 8 * 8 * 3 + 9) + 9 * (8 + 9 * (5 * 4 * 4 + 9) + (6 * 2 * 6 * 3 + 9 + 5) + 3 + 3)\n        ((7 * 5 + 3) + 7 * 5) + 4 * 2 * 7 + 5 + 6\n        4 + 9 * (6 * 6 * 4) + (7 + 6) * (3 * 8 + 3 * 6)\n        (7 + 5 * 6 * 8 * (7 + 4 * 5)) + 9 * 6 + 2 + 7\n        4 * 3 * 4 * (2 + 6 + 6 + 2 + 6) + 8 * (6 + 6 * 3 * 2 * 6)\n        4 * 6 * 2 * (9 + 4)\n        4 * 3 * 6 + 9 + (3 + 5 * 9 * 3 + 3) * (8 * 3 * 7)\n        ((6 * 7 * 9) + 2 * 5 * 4 * 8) * ((3 + 4 + 6) * 3 * 3) * 8 + ((3 * 8 + 9 * 5 + 6 + 8) * 2)\n        4 * 6 + 3 * 6 + 6 * (4 + 7 + (8 + 4 * 5 + 4) * 6)\n        2 + (6 + (5 + 8 + 4 * 5 * 6 + 6) + 4 + 2 * 2 * 8) * 9 * (6 * 6 + 9 + 7 * 8)\n        3 * 6\n        (9 + 8 * 9) * 4 * (3 + 5 * 3 + 5) * (6 * 3 + 6 + 9) * (6 * 9 * 3 * 3 * 4 + 9) * (6 + 9 + 2 + 8)\n        4 * (8 + 9 * 6) * 7 * 3 * (9 + 6 * 2)\n        (7 + 3) * (3 + 8 + 3 * 8 + (4 * 9 * 9 + 5)) + 4 * ((2 + 2 * 2 + 7 + 4 + 9) + 5 * (2 * 6 + 8 + 2) + 4 * (7 + 7 + 7 * 8 * 8 + 3) + 7) + 2\n        (7 + 4 + 5 * (3 + 5 * 2 + 3)) * 3 * (7 * 3 + 9 * (3 * 2 + 4 * 7 + 3 + 2) + 4) + (5 + 3 + (9 * 5 + 6 + 5 + 4 * 8) * 4 + 4)\n        4 * 6 + 7 + (3 * (4 + 2 + 4)) * 4 + (7 + (6 + 7) * 3 + 2 + 6)\n        6 + 3 * 5 * 2 * (4 * 9 + 6 + 5 * 8)\n        (6 * (3 + 2)) + (8 + (3 * 8 + 7 * 7) * 5) * (3 * (6 + 3 * 5 * 2 * 7 + 4) + 5 + 5 * (5 + 6 + 5 * 3 * 2 + 6)) + 6\n        (4 * 2 * 4 + 7 + 2) * 7 * (6 + 7 + (5 * 5 + 3) * (5 * 2)) + 5 + 2\n        9 * ((5 + 3) * 5 + 6 * 5)\n        ((7 + 9 * 9 + 8 * 8) * 4 + 6 * 5 * 6 + 9) + (9 + 5 * 3 + 5 * 8 * 2) + 8 + 2\n        (7 * 4 * 6 + 5 + (9 + 5 * 5 + 5) + 3) + 5 * (3 * 4 * 6 * 5)\n        2 + (8 + 9 * (8 + 3)) * 2\n        (9 + 9 * 5 + 5) * 2 * 6 * (5 + (9 * 4 + 7 + 6 * 2) + 3 + 3) + (7 + 4 + 3 * 4 + (4 + 8 + 5 * 2))\n        (4 + (7 + 3) + (4 + 5 + 7 * 9 * 8) + 5) + (6 + 5) * (2 * 2 * 9) * 7 * 9 + 4\n        5 + 9 + (2 * (6 + 9 + 9 + 2 * 3 * 3) * 8 + 8 + 4) * (9 + 9 * 4 + 3 * 9 * (5 + 9 + 7 + 4 + 7))\n        2 + 4 + 2 * (5 + 9) + (3 + 2 * 8 * (9 * 5 * 3 * 6 + 6 + 5) + 7 + 9) + 5\n        6 + ((2 + 2 * 3 * 9) * (4 + 6)) + 2 + 3 + 2\n        2 + (2 + 5) * (3 * 8 * 5 + 6 + 7) * 6\n        2 + 2 + (7 * (4 + 4 * 7 + 3) + 2) * ((2 * 8 * 5 + 2 * 4 * 5) * 2 * 9 + (8 + 5 * 4)) + 9\n        9 * 9 + 7 + (9 + 3 * (9 + 2 + 4) + 3 * 4 + 9)\n        5 + (7 + 8 * (7 + 2 * 5 * 7)) * 8 + 6\n        (2 * (2 + 5) * 2 + 2 + 8 * (4 + 3 * 8 + 8 + 2 * 9)) * 9 + 9 * 7 * 2 * 9\n        4 * (7 * (8 + 6 * 2 * 6 + 2 + 7) * (5 * 7 + 5 * 2) + 5 + 5 + (3 + 8 + 2 + 5 * 8)) + 7\n        5 + ((4 + 5 * 6 * 5) * (6 * 2 + 2) * 8) * (9 + 9 + 9 * 3 * 4 + 2) * 3 + 2 * 4\n        7 + 7 + 3 + 9 + ((6 + 5) * 8 * 2) * 6\n        5 * 7 * 5 + (5 + (8 * 6) + (5 * 2) * 6)\n        (9 * 5 + 7 * 5 * 3 + 2) * 5\n        (5 * 2 * 2 * (4 * 8 * 6 + 7 + 3) * 7) * 8 * 3\n        (5 + 4 + 9 + (4 * 7 + 5 + 8) + 9) * 7 * (8 * 7 + 6 + 4 * 2) * 8\n        3 * 9 * 7 + 7\n        2 + 5 + 3 * (6 * 8 + 3 + 5 + (9 + 8 * 7))\n        2 * 3 + 5 * 3 * (9 + 2 * 9 * 9 * 9 + 2) * 9\n        8 * ((9 + 7) + 9 + 6 * 7 * (7 * 9 * 6 + 6 + 4)) + 3\n        4 + 5 * 7 + (8 + (7 * 6 + 5 + 5) + 7) + 2 * 5\n        2 + ((3 + 7) * 4 + (9 * 7 + 5) + 4) * 2\n        5 + 2 + 4\n        3 + ((5 + 9 + 8) * (5 * 2 * 9 * 6) + 6) + 9 * 2\n        4 * (3 * 3 + 2 * 2) * (5 * 8 + 6 * 2 * 5 + 4)\n        5 + 8 * 2 + (8 + 3 + 4 * 2 + 2 + 5) + (4 + 8) * ((7 + 8 * 3 * 9 + 5 * 5) + 7 + 7)\n        5 + ((9 * 8 + 2 * 8 + 3 + 4) + 6 * 5) + 4 * 8\n        2 + (8 + 4 + 6 + 2 + 6) * 5 * (5 + 7 * 7 * 6 * 5 + 4) + 9 * 8\n        3 * (9 * 9 * 4) + 3\n        4 * 9 * ((7 * 9 + 2 * 2 * 6 * 7) * 6 * 6 + 4) * 5 + 6 + 8\n        2 + 6 + 7 + 5 + (4 + 2 + 2 + (9 * 2 + 8 * 7) + 9) + 9\n        3 * (3 * 5 + 2 * (5 * 9 * 8)) * 8\n        ((3 + 7 + 7 * 5) * 3) * 8 + 6 + 5 + 2 * 9\n        4 * 4 + (7 + (4 * 3 + 2 * 5 + 3) * 7 + 6 * (8 + 2 * 5 + 4 * 7)) + 4 * 7 * 8\n        7 * (2 + (4 + 6 * 4 * 8 * 7 * 6) + 5 + 8) * 5 + 2 + ((6 * 5 + 8 * 7 * 9 + 2) + 8 * 7 + 2 + 4) * (3 + 5 + (5 + 4) + 3 * 7 + 7)\n        9 + ((4 * 2 + 7 + 8) + 7) + 9\n        (6 * 7 * (5 + 9 * 9 + 9) + (5 * 9 * 8 + 5 + 2 * 2) * 5) * 2 * (6 * (7 * 3 + 5 * 7 * 9) * 2 * 5) + 5 * 2 + 8\n        7 * ((4 + 8) + 7) + 5 + 6\n        (8 * 4 + (5 + 4 + 7 + 3 * 4 + 5) * 9 + 9) * 2 * (3 * 3 + 5 + 4 * (5 * 5 * 5 * 9)) * 7\n        9 * 8 + 8 + (4 * 5 + 3) * 8\n        3 + 9 + (5 + 7 + 7) * 2 + 6\n        4 + 8 + (9 * 2) * ((5 * 5) + 5 + 8 * (6 * 3))\n        3 * 7 * 5 + 4 + (8 * 7)\n        (3 + 5) * 9 * 6 * (9 * 4 * 8) * 5\n        (9 + 8) * 3 * 9 + 3\n        9 + 6 + 9\n        (7 + 6 * (8 + 5 + 2) * 6 + 7 + 7) * 4 * (3 * 5) * 5 * 7 * 4\n        (9 + 3 * (4 * 2 * 3 * 9 * 7)) + 7 + ((9 * 8 * 4 + 2 + 4 * 7) * 7) + 2\n        2 + (6 + 9 * 3 + 6 + 5 + 4) + 8\n        4 * 7 + 5 + (7 + 8 * 7 * 4 * 7 + (6 + 9 + 3 * 6 * 9 * 8))\n        9 + 9 * 4 + 3 * 5\n        4 + (3 * 7 + 4 + (7 + 6 * 4 * 8 + 9 + 7) * 9 * 9)\n        (8 * (2 * 6) + 9 + 7 + 3) * 9 + 8 * (5 * 5 + 5) * (6 + 7 + 6)\n        (2 * 3 * (6 + 3) * 5 * 6) + 7 + 8\n        9 + 2 + 5 + (3 * (9 + 3 + 2 + 7 * 6) + (6 * 6 * 2 * 3 * 2 * 2) + 3 * 9 + 2) + (3 + 4 + 3 * 8 * 7) * 5\n        4 * 7 + 4 + 5 * (9 + 7 + 7 * (6 * 8) * 7)\n        (4 + 9 + (2 + 8 * 2 + 4) + 4) * 2 * 4 + 8\n        (7 * 8 * 7 + 7 + 5 + (6 + 7)) * 8 + 8 * 6\n        5 + 6 * 3 + 6 * (5 * 8 + 2 * 4 + 5) * 9\n        5 + (5 * 8 + 7 * 7 * (7 * 4 * 9 + 4 + 8 * 5)) * 9 + 8 + 5\n        5 * 6 + (2 + (3 + 3 * 6 * 4 + 5 * 2) * 7 * 7) + 8\n        8 + 6 * (6 * (9 * 5 + 9 * 9) + 6 + (4 * 2) + 6 + 9) + 9\n        8 + (3 + (6 * 2)) + 8\n        6 * (5 * 2 * 8 * 5)\n        4 * 2 * 7 + 7 + (3 + 2 + (4 * 6) + 5) * (2 * 6 + 5 + 7 * 2)\n        9 * 7 + 4 * 3\n        9 + (9 + (3 + 2) * (4 + 6 + 2 + 9 + 2) * 4 * 9 * 7) * 8\n        7 * 5 + (4 * 4) + 8\n        2 * 9 * 7 + (4 + 5 * 3 + 9 * 9 + 6)\n        8 * 4 + 7 * (5 + 3 + 3 + (2 * 5 * 2 + 6) + 7 + 3) * (5 * 9 + 2 + 5) * 3\n        ((7 * 8 * 6 * 3 * 9 * 5) + (6 + 5 * 7 + 8) * 5 * 7 * 9 * 2) + 8 * ((2 + 6 * 9 + 8 * 8 + 3) + 8 + 5 * 4 + 8) + 7 * 8\n        6 + 3 * 2\n        (8 + (8 * 4 + 3 * 2 + 3)) + 2 * 4 * 3 + 3\n        (4 + 4) * (2 + 8 * 3 + (8 + 5 * 6 + 3) + 8 * 5)\n        8 + ((4 * 5 + 7) + 9 * 2 * 2 + (2 * 7 + 3 * 6)) + 4 + 2 * 4\n        6 * 8 + 9 + (3 + 2 + 4 + (2 * 2 + 7 * 5) + 3) * 3\n        7 * ((3 * 6 * 3) * (3 + 4 * 5 * 4 + 8) + 5 + (7 + 3 * 2 * 9) + 7 * 4)\n        6 * ((6 + 5 * 7 + 6 * 8) * 5 * 3) + 5 * 8 + 6\n        (4 * 7) + (2 + 8) + ((3 + 4 + 4 * 8 * 3) * 2 * 2 + 7) + 5\n        ((2 * 5 * 9) + 8 + 4 * 7) * 3 + 8 * (6 * 4 * 3 * 2)\n        ((2 * 4 + 2) * 2 * 4) * 9 + 5 * 6\n        3 * (8 * 3 + (6 + 3 + 4 + 6 * 6) * 7 + 8) * (7 * 2 + (9 + 4 + 3 * 7) + 3 * 7 + (4 * 5 + 3)) + (8 + 3 * 4 * 5 + (7 + 7 + 7) + 3) * 9 + 9\n        (8 + 9 + 5 + 3 + 3) + 6 + 6 + 9\n        7 + (6 * 2 * 3) + 8 * 8\n        2 * 7 + 4\n        (3 * (6 + 4) + (5 + 6 * 5 + 4) * 8 * 9 * 6) * 6\n        2 * (7 + 4) * (6 + (3 * 2 + 9 + 2 + 2 + 7) + 4)\n        5 * 8 * 4 + 5 + (6 * 7 + 3 * 2) + 2\n        (9 + 8 + 5) * 2 + 2 + 6\n        3 * 9 * (2 + 4 * 4 + 3 + 2 * 3)\n        6 + ((9 * 6 * 3 + 8) * 4 * 8 + 7) * 3 + 2 + 8\n        7 * 8 + (3 + 6 + 3) + 7\n        7 * (8 + 2 * 5 + 3 * 5 * 3)\n        2 + 2 + (3 + (7 * 7) + (7 + 3 + 4 + 3 + 3 * 5) * 4 * 7) + 5\n        (3 * 8 + 4) + 4 * (5 + 5 * 2) * 4 * 2\n        6 + 9 + (6 + 5) + 6 * (6 + 4 * 3 + 7 * 3 + 6)\n        2 + ((6 + 6 * 2) * 5 * 2 * (4 * 7 + 3 * 9 * 4)) + (3 * (2 * 8 + 6 * 4 + 9 + 2) * 2)\n        4 * ((5 * 9 * 2 + 3 + 3) * (5 * 8 + 9 + 8 * 5 + 7)) * (6 * 6 * 2 * 9 + 6 + 4) + 9\n        (4 * 9) + (2 + 8 + 7 * 6) + 7 + 7 * 7 + 8\n        8 + (9 + 5 + (5 * 2 * 6 * 2) * 4 * 9 + 7) + 8 * 3 + 4 * (5 + 4 * (2 + 2 + 6 * 8 + 9 * 7) + 2 + 3)\n        (3 * 6) * 2 + 3 + 3 * 3 + ((2 + 5 + 2 + 4 * 4) + 7 * 9 * 2 + 7 * 4)\n        (8 * 9 + 6) + 3 * 2 + (5 * 5 * (2 * 4 * 8 * 3) * (2 * 5))\n        9 * (6 * 6) * 2\n        8 + 6 * 4 * (9 * (8 + 7 * 6 + 8 + 5 + 8)) + 9\n        8 + 8 * 7 + (8 * 7) + 8\n        7 * ((6 * 5 * 5 + 9 * 6) * 4 + 3)\n        6 + 3 + 8 * 9 * 4 * (8 + 7 * 4 * 6 * 2 + 5)\n        (2 + 2 * 3 * 4 * (9 + 8 * 4) * 7) + 3\n        3 * ((5 * 6 * 9 * 2 * 6 + 4) + 3 * 2 + 7 + 5) + 5 * 2\n        9 * (4 + 8) + (6 * 5) * 4 * ((7 + 2 + 5 + 7) + 2 * 5 * 4) * (9 + 3 * (6 * 7 * 5 * 4 + 6) + (5 * 8 * 3 * 4 * 6) * 5 + (2 * 2 + 7 + 3))\n        4 + ((8 * 3) * 4 * 7 + 2 + 8) + (4 + 8 + 6 + 2) * 5 * 2\n        4 * (2 * 5 * 8 * 2 + 7 * (9 * 7 * 6 + 3 * 2 + 9))\n        3 + ((4 * 6 + 3 + 6 * 5 + 3) * 3) + 2 + 7 * (3 + 2) + 7\n        (9 + (4 + 8 * 4 + 6 * 4) + 4 * 9) + (4 * 6) * 6 + 3\n        (4 + 5) * 8 * 2 + 3 + 5\n        3 + (6 + (6 + 7) * 8 + (4 * 8 * 6 + 4) * (6 + 2 * 7))\n        8 + 8 * (9 + 8 + (4 * 6 * 6 + 2 * 3 * 4) + (8 + 2 + 3 * 7 + 4) * 9) * (2 + 9) * (9 * 7 * (6 + 4 + 5 + 3 + 8 * 5) * 9 * 7)\n        7 * 6 * (8 * 2 + 8 * 8 * (9 * 5) * 5) * 3 + 6\n        5 * (2 * (5 + 6 + 3) * (9 * 6 + 6 * 2 * 7) + 6) * 5 * 4 + 2 + (6 * (3 + 9 * 8))\n        (3 + 6 * 8 * 9) + 8 + 3 * 2 + 2 + 2\n        4 * 7 * (3 * 5 * 5 + 8 + 5)\n        (5 + 2) * 6 + ((9 + 3 * 7 * 5) * 6) + 8 * 9\n        7 + 5 + 8 + 8 * (9 + 4 * 5 + 4 * 4 * 9)\n        5 + 7 * 2 + 8 + 2\n        9 + ((2 + 9 * 6) * 8 * 9 + 2 + 2) + (6 * (7 + 3) + 3 + 3 * 7) * 3 * 3 + 9\n        8 * (5 + 8 + 2 * 4 * 2) + ((2 + 4 * 7) * 8 * (4 * 8 + 2 + 2 * 6 + 8) + 2) + ((8 + 3 * 6 + 9) + (5 * 3) * 8 * 7 * 8)\n        9 + 4 + (4 + 9 + 7 * 6) + 3 * 6 + 9\n        9 + (2 * 5 + 7 + 5 * (6 * 2 + 5 + 2 + 3 * 5) + 3) + 2 * (3 + 9 * 4 * 8) + 3 + ((9 + 3 + 7 * 2 + 7 * 5) + 7 * 5)\n        7 * 4 * 6 * ((9 + 9 * 2 * 4 + 2 * 2) * 7 + 9) * 8\n        6 * 5 + 4 * ((4 * 9 * 7) * 8 + 6 + 7) * 7 + 3\n        9 + 9 * 9 * 4\n        8 * 6 + 7 * ((9 * 4 * 2 + 9) + (6 * 9 * 2 + 2 + 5) + 8 * 6 * 6)\n        3 * (6 + 9 * (9 * 3)) + ((5 * 6 + 7 * 5 + 4 * 3) + 5 * 6 * 9) * 5 * ((8 * 2 * 6 * 5) + 5 * 8 + 5 + 9)\n        4 * (6 + 6 * 7 * 5 + 8) * 6 + 2\n        ((9 * 8 * 3 * 6 + 2) * 4 + 7 * (5 * 8 * 2 + 4 + 9)) * 2 + ((7 + 3 * 3) * (7 + 3) * 3) + 7\n        8 * 4 * 9 + 8 * (8 + (6 + 6 * 2 + 4 * 4) * 3) + 8\n        (9 + (8 * 8 + 9 * 6) * 7) + 7 * 9 + 6 * 4\n        3 * 7 + (6 * (5 * 5 + 2 * 8 + 7 * 2) + (2 + 2 + 5 + 4 + 9) + (4 + 5 * 3 + 8 * 7) + 9 + 9) + 2 * 4\n        9 + (3 + 9 * (9 + 9 * 4) + 5) * 8 * ((6 * 8 * 4 * 9 + 9) * 5 + 2 * 9)\n        7 + ((5 + 6 + 5) * 8) * 5 + 9 + 5\n        2 + 2 + 9 + ((2 * 8 + 3) + 9 + 7) + ((6 + 3 + 2 + 8) + (4 * 7 * 6 + 2))\n        3 * 6 + ((6 * 6 + 7) + (2 + 3 * 7 + 4) + 4 * 2) * 2\n        9 * 3 + (9 * (6 * 5 + 6 * 2 + 7) + (5 * 7) + 3) * 6 * 9 + 3\n        5 + 9 + (9 * (4 + 5)) + (9 * 2 * (3 + 7 + 2 + 6 + 8) + 6 + 2) * 7\n        4 * 3 + ((7 * 4) * 3 * 4 + 7 + 9 + 7)\n        2 * ((3 * 6 + 3 + 3 + 9 + 2) * 4 + (5 * 8 + 4 + 6 + 5 + 8) * 5) + 9 * 5\n        4 + 9 * 3 * ((2 + 2 + 5 + 2 * 3 * 4) * 6 * 8 * (5 + 3 + 7 * 9 + 4) * (2 * 4) + (4 * 2 * 2))\n        5 + 7 + ((4 + 5 + 5 + 6) * 5 + 9 + 6) * 9 * 7\n        ((6 * 8 + 5) + 8 + 3 + (4 * 5 * 9 * 2 * 9 + 6) + 7) * 9 + (6 * (8 + 6 + 4) * (6 * 9) + (9 * 2 + 8 * 4 * 8 + 5) * 9 * 5) + (5 * (7 + 5 + 3) * 5)\n        ((4 * 6 + 4 * 2 * 4) * 9 + 5 * 9 + 5 * 9) + (3 * 7 * 9) * 7\n        2 * 2\n        (3 + (5 + 6) + 3 * 4 * 5 + 3) * 7\n        5 + 7 + 2 + 3\n        (8 * 7 + 9 * 9 + (3 + 9 * 7 * 7 * 9) * 6) * 4\n        8 * (9 + (3 + 4 + 7 * 5 * 9) + (8 * 4) * 4 * 7) * (8 + 3 + 5 * 9 + 8) + 2\n        9 + 2 + (3 + 3 + 8) * 2 * 3 + (3 * 9 * 5)\n        4 * 9 + 5 + (8 * 8 * 4) * 8 + 3\n        6 * 5 * ((9 + 9 * 9) * (3 * 5) * 3 + 6 + 8) * 2\n        4 * ((2 + 2 * 8 * 6 + 5 + 7) + 6 * 8 * 7 * 6)\n        (9 + 3 * (4 + 5 * 8) * 5 + 9) + (9 * 4) * (3 * 3) * 8\n        (2 * 3 * (6 * 5 + 8)) + 7 + ((5 * 7 * 5 + 9) + 9 * 3 + 2 * 2) + (3 * 5 * 8) * 2 * 4\n        3 * (8 + (6 * 3 + 9 * 7 + 2 * 5) * 2) * 3\n        7 * (3 + (8 * 9 + 9 * 6 * 4) * 8 + 4 + 6 + 7) + 7 + (9 + 5)\n        8 + 4 + 7\n        ((2 * 8 * 5 + 3 + 9) * (9 + 6 * 8 * 3 * 5) * 2 + 7 + (2 + 2 * 4 + 5) + 9) + 8 * 7 * 6 * (4 * 8 * 3 + 7 * 7 * 9) + 4\n        (2 + 3) + 8\n        5 * 7 * ((6 + 6 + 8 * 2 + 4 * 5) + (6 + 9 + 8 + 8 * 6)) * 8 + 3 + 2\n        (3 + 9 + 7 + 5) + 6 + 3\n        7 + ((2 * 5 + 8 + 7 * 3 * 2) * 9 + 5) + 9\n        4 + 2 * 4 * (5 + 8 * 8 * 5 + 6)\n        5 * 9 * (6 * 3 * 7 * 7 + 9 + 6) * 7 * (6 + 2 + 7 + 9) + 5\n        4 + (5 * 2 + (5 + 4) * (2 * 3 + 4 * 5 + 4) * 3 * 2) * ((9 * 6 * 5 + 7 + 7) + 7)\n        (7 + (5 * 9 * 3 * 8) * 4 + 2 * 7 + 2) * 5\n        ((4 * 8 + 9) + (3 * 7 * 7 * 7) * (9 * 3 * 2) * (8 + 4 * 6 * 9)) * 7 + 3 * 7 + 2\n        (8 * 3 + 8 + 2 * 3 + 3) + 2 * 3\n        5 * (5 * 8 + 3 * 4 * 3 + 6) + 7 + 7\n        5 * (7 + (4 * 9)) * 3 + 7\n        8 * 9 + (9 + (2 * 2 * 8 + 6)) * 6\n        4 + ((9 * 6 * 7 * 6 + 8) * 6 * 2 + (9 + 7 + 2 * 7 + 4) + 6) + 5 * 4 + 7\n        (5 + 3 * 9 + (4 + 7 + 5) * 2 * (8 * 4)) * 5 + 3 + 6\n        9 * 4\n        2 * (3 + (9 + 6 * 4 + 7 * 5 + 4) + 7) * 6 * 4 + 8 + 7\n        (2 * 9 + 3 * 2 + 8) * 5 * 8 + (9 * 3 * 2 + (9 + 4 * 8) * 6) + 7 + (8 + 7 + 8 * 2 * 2)\n        (9 + 7 + 5 * (6 * 4 * 7 + 9 * 9 + 2) * 2) + 7 * (6 * (2 + 7 * 3 * 8 * 3 + 3) * 7 + (4 * 4 + 5 + 6 * 9))\n        (2 + (6 + 8) * 6 + 9 * 4 * 2) * 9 * 6 + 8\n        6 * (5 * 8 + 7) * (4 * 3 * 6 + 4 * 4 * 5) * 6 * (7 * 4 + 5)\n        2 + (8 * (7 * 7 * 2) * 2) + 3 + (4 + 5 * (8 * 4 + 2 * 3) + 7 + 8) * 4\n        3 + ((7 + 5 + 3) * 7)\n        (5 + 6 + 7) * 3 + ((9 + 2) + 8 + (9 + 5 + 8 + 4 + 7 * 4) + 4)\n        ((4 * 2 * 5 * 6 + 6) + 2 * 9 + 6 + 3) + 6 * (8 * 8 + 5 + (9 + 4 * 2 + 2 * 7 * 7) * 6) * 8\n        (5 * 9 * 8 * 7 * 5 + 4) + 6 * 4 * 5 * 9 + 5\n        5 * 5 + 5 + (9 * 3 + 3 + 7 * 4) + 6 + (7 + 2 + 5 * 6 * 4 + 4)\n        (5 * 2 * 7 + 9 + (6 * 9 + 2 * 3)) * 3 * 7 * 6 + 5 * 9\n        5 * (6 * 5 + 9 + 5) * 9 + (5 + 6 + (4 * 3 * 9 + 4 + 4 * 4) + 3)\n        ((2 * 2) * 7 * 9 * 2 * 5) + 3 + (8 + 9) + 7\n        7 * (3 + (8 * 9 + 3 + 8 + 2) + 8 * 9 + 5 + 7)\n        8 * (4 + (6 * 3 + 6 * 5 * 6 + 5) * 9 * (4 + 3 + 5) + (7 + 4 * 6 * 3)) * 2 + 7 * 2\n        (8 + 9 * 7 * 8) + 7 * 3 * 9 * 3\n        7 + 6 * 4 * (9 * 8 + 6 + 7) * ((2 * 8) * 4 + (6 * 8) * (7 * 6 + 8 * 3) + 5 * 7) * 7\n        (4 + 9 + (3 + 2) + (5 + 3)) * 9 * 7 + 3 * 4 + 4\n        8 * (3 + (9 + 5 + 9 * 3) * 9 * 7 + 3 * 9) + 6 + 6\n        2 + 3 + (4 * 6) * (5 * 9 * (2 + 3 + 7 * 8 * 4) * 8 * 3)\n        3 + 8 * (2 * (7 + 8 + 6 + 7 + 7))\n        ((8 + 7 * 7 + 6) + 5) + 3\n        7 * 3 + (2 * 5 * 9 + 8) + 8\n        2 * 5 * (7 + (6 + 9 * 5 * 2 * 6 * 6) * 8) + 6\n        ((4 * 3 + 3 + 3 + 6 + 9) * (9 + 2) * (5 * 8 * 9 + 6 * 4) + (9 * 8)) + 6 + 8\n        ((7 + 9 + 2 + 7 + 4) * 8 + (4 * 7 * 4) * 4) + (5 + 8 + 6) + 5 * 9\n        (8 * 6 * 7 * 7 + 7) + 2 + 5\n        2 + ((8 + 3 * 7 + 7 * 7) * 2 + 8 + (4 * 8 * 5 + 4))\n        9 + 2\n        4 * 7 * (3 * (9 + 8) * 8 + 2 * 8) * (8 + 2 + 6 + 3) * 8\n        6 + 3 * 7 * (2 + 5 + (3 + 8 + 9 * 2 * 3 * 4) + (7 * 9 + 6 + 4) * 2 * 6)\n        (5 * 2) + 3 + (4 * 8 * 9) * 7 * 7 + ((7 * 3) + 9)\n        8 * (3 * 4 * 5 + 8) * 7 + 3\n        5 + (6 + (7 * 8 + 2 * 4) + 2 + (4 + 2 + 9 * 7 + 4 + 6) + 5 + 5) + ((5 + 9 + 3) * 6 * (9 * 7 + 4 * 5 + 8) * 3 * 8) * 6\n        (9 + 6 * (7 * 4 + 3 + 7 + 9 + 5)) * 5 * ((7 + 7) * 4 * 7) + 6\n        5 + (9 + 3 * 6 + 2 * 9) + 5 * 3 * 5 + 6\n        9 * ((7 + 5 + 2) + (4 * 8 + 7 + 9 * 5) * (8 + 9) + 8) + 5\n        3 * (4 * 8) + 2 * 4 + (6 + (9 * 3 * 9) * (3 + 3 + 6 + 2 + 8)) * ((5 * 4 * 9 + 2 + 4) + 7 + 8 * 2)\n        (2 * 3) * 4 * (4 + 6 * 3)\n        5 + (4 * 4) + 2 * 8\n        (4 * 5 * 5 + (6 * 9 + 9 * 6) + 2 * 7) * (4 + (5 * 6 + 5 * 8))\n        5 + ((3 + 5) + 5) + 5 + 6 + 5\n        6 * (4 * 3 + 6 + 3 + 9 + 5) * (7 + 6) * 2 * 7\n        5 + 5 * 5 + 2 * (2 + (7 + 8 * 9 * 6 + 4) + 4 + 2)\n        9 + ((8 + 6 + 4 + 4) + 5 * (5 + 3 * 6 + 2 + 2 + 8) + (3 + 9 * 5) + 4) + 4\n        5 + 3 * 9 * (8 + 3 + 9 + 2) * 7\n        (5 * (3 + 5 * 2 * 3)) * 9 + 5 * 4\n        9 * 6 * 8 + (4 + (5 + 6 * 9 * 5 + 7) * 6) * 2 * 2\n        8 + 2 * 4 * (5 * 3 * 2 + (7 + 3)) * 9 + 3\n        2 + 3 * 9 * (4 * 4 + 3) + 2 + (7 * 2 + (2 + 6 + 8 * 7 + 6 * 2) + (4 + 3 + 3 + 3 * 5 * 5))\n        2 * 2 + (9 + 6) + 5 + 5 + 8\n        6 + 5 * (6 * 2 + (2 + 2) + 7)\n        5 + 7 + (7 * (3 + 7 + 7) * 9 * 2 + 8 + (6 + 7 * 8 * 3))\n        (6 * 5 + 7 + 5 + 7) * (4 + (5 + 6 + 4 * 7 + 4 + 4) + 6 * 9 * (5 * 7 + 9 * 5 * 6) + (2 + 8 * 4 * 6)) + (4 * 5 + 7 * 9 * 3) * 4 * ((2 + 8 + 9 + 2 * 8 + 3) * (4 + 3 + 2 + 7 + 7 * 6))\n        2 * 6 * 4 * ((5 + 9) * 5 * (6 * 7) * 4 * 8)\n        (7 + 4 + 8 + 2 + 5) * 2 + 3 * 6 + 7\n        6 + 3 * (6 * (2 * 4 + 7 + 3) * 6 * 9 + 4 * 3) + (5 * (4 + 9 * 5 * 5 * 2 + 2)) + 2\n        9 * 9 * 9 * 3 * ((9 * 9 + 6 * 2 + 6 * 5) + 7) * 6\n        (3 + 8 * 8 + 8 * 8) + (5 + 3 * 5 + 4 + 6) + 9\n        6 * 8 * 4 + (8 + 5 * 2 * 7)\n        4 * (2 + (8 + 3 * 9) * 3) + 2\n        (2 * 9) * 8 + 4 * (4 + (7 * 6 * 9) + 4 + (5 * 5 + 7 * 7 * 9) * 2) + 3 * 9\n        ((4 + 7 * 3 + 4 * 2 + 3) + (9 * 3 * 9 + 6 * 8) + 9) * 3 * 5 + (5 + 4 * 5 * 6)\n        (8 * 2 * 9 * 6 * 3 * (5 + 6 * 2 + 9 * 4)) + 3\n        3 + 3 * 7 + 3 * 4 + 5\n        8 + (7 + 5) * 8 + 3 + ((8 * 7 + 8 + 6 + 6 * 3) + 7 + 2)\n        3 * 4 * (4 + 3 * 6)\n        3 + (8 * 4 + 8 + 9 + 6)\n        6 * 9 * 6 * 2 * (7 * 6 * 2 + 3 * (8 + 6)) + (5 + 7)\n        6 * 7 * 6 * 7 * 8\n        6 + 9 * (2 * (2 + 2 * 9 + 4) * 2 + 6 * (5 * 8 * 5 + 3 * 5)) + 4\n        8 * 3 * 3 * 3 * 8 + (3 + (3 * 8 + 7) + 5 + 2)\n        7 * 2 * ((8 * 7 + 3) + 3)\n        2 * 9 + (7 * 6) + (5 + 8) + 7 + 9\n        9 + 4 + (6 + (7 * 3 * 9 + 3 + 7) * 4 + (2 * 9 + 3 * 2 * 6) * 3 + 6) * 2 + (5 + (6 + 2 * 4 * 5 * 3 + 7) + 5 * 3 + 7 + 6) + 3\n        2 + 2 + 4 * 5 * 9 * 2\n        7 * 2 * 3 + 8 * 6 * 5\n        5 + 6\n        (3 + (6 + 7 * 2) + 8 * (2 + 4 + 4 + 5 + 6)) * 6\n        (4 * (2 + 3)) + (8 * 3) + (7 * 8 * 8 + 3 + 9 * 4)\n        8 + (8 * (2 * 5) * 8 * 7 * 2) + 7\n        6 * (6 * 8 + (9 * 5 + 2 + 9 + 3 * 6) * 8) + 7 + 6 * 6 + 2\n        2 * 7 * ((7 * 3) * 7 * 2)\n        2 * (9 + 8) * 3 + 8 + 7\n        (6 + (2 * 2 * 2) + 9 * 6) * 6 + 9 + (7 * 4 + 8)\n        4 * 7 + 7 * (3 + 2 * 4 * 8 + 6) + 9\n        8 + ((6 * 4 * 6 * 3 * 2) * (9 + 5 + 4 * 4 + 5 + 9) * 3 * 3 * (4 + 5 * 8 + 5 + 6) + (9 + 8 * 9 + 6 + 8 * 7)) * (9 * 9 * 2) * 5 * 3 + 2\n        5 + ((3 + 7 * 9 * 6 * 6) + 8 + 3 * 3 + 8 + 4) + (4 * 8 * (4 * 9 + 8))\n        ((6 * 4 + 2 + 7 * 4) * 2) + (8 + 9) * (8 * (2 + 7 * 7 * 4 * 9 * 3) * 7 * 7 + 4) * 3 * 4 * 7\n        (8 + (9 * 6 + 5) + (4 + 5 * 4)) + 9 + (3 * 8) + 6\n        ((3 + 7 + 9) + 3 + 3) * 4 + 2 + (6 * (8 + 4 + 3 + 4) + 3) * 7\n        ((7 + 9) * 4 + (7 + 8 * 6 * 5 + 8) + 2) * ((3 + 4 + 7) + 2 * 3 * (5 * 6 + 6 * 4 * 4) * (5 + 2) + (3 * 4 * 4))\n        5 * (8 * 6 * 3 + (2 * 8)) + 2 + 5 * 2 + 6\n        4 * 5 + (8 * 4)\n        (4 * 5 + (8 + 7 + 5 * 8 * 5 * 8) + (2 + 7)) * 2 * ((8 * 3 + 5 + 9 + 3 + 5) + 3 + 5 + 8) * (3 + 8 * 6)\n        (7 * 6) * (2 + 8 + 6 + 3 * 5) * 2\n        3 * 7 + 5 * 2 * ((9 + 8 * 7 * 4 * 2) * 5 + 4 + 9 * 4 * 5)\n        9 + 7 * 3 * ((7 + 3 + 2) + 8 * 4 * 4 * (7 + 5 * 6)) + 4\n        ((2 + 9) * 4 * 7) * (8 + 9 + 4 * 8 + 6 + 2) + (9 * 4 * 9 * 6 * 6 * (6 * 4 + 6 * 4 * 7 + 3)) * 6 * 3\n        (4 * 4) + 6 + 4 * 7 * (4 + 8 + 9 + 9 + 3) + 3\n        6 + 3 * (7 * 3) * 8 + 9\n        6 * 3 * 2 * 3 * 4\n        9 * (5 + 6 + (2 * 9 + 6 + 8 * 7) + (2 * 5 + 7) + (5 * 2 + 9 * 3 + 7 + 7)) * 6 * 5 * (9 + 6 * (5 + 2 * 8 * 9 * 5 * 9) * 3 + 6)\n        8 + 4 + 2 + (3 * 3 * 2 * (9 * 7 * 8 * 2)) + 4 + 7\n        (3 * 6 + 9 + 8 * (6 * 4)) * 7 * ((5 * 9 * 2 * 2) + 3 + 4 + 8 + 5) + 3 * 7\n        (2 * 4 + 4 + (8 * 2 + 8 + 6 + 2) + 4 + 9) + 9 * (2 * 6 * (4 * 3 + 7 + 6 * 4 * 7) + 3 * 2) + 3 + 8 * 7\n        7 + 7 + 8 + (9 * 7 * (6 * 8 * 2 + 7 * 4)) * 5 + 9\n        (9 + (8 + 8 * 7) + 2 * 3) + 3 + 5 * 2 * (5 + 4 + 2 + 6 * 8 + 5) + 8\n        4 * 4 * 4 * (2 + 6 * 7) * (5 + 4)\n        7 + 7 * 8 + 4 + (6 + 4 + 4 + 5)\n        ((3 + 6) * 6 * 7 * (5 * 6 + 5)) + 2\n        ((9 + 9 + 4) * 7) * 7 * 7 * 3 + 6 + 4\n        9 + 2 * 9 * 5 * 8\n        3 * (7 * 7)\n        6 * 2 + 3 + 2 * ((6 * 6) * 3)\n        2 + 6 * ((9 + 7 * 3) * 7 + 8 + (3 + 9) * 7) + 5 * 3\n        6 + 6 * (8 * 5) * (2 * 3 + 5 * 8 * 5 + 2)\n        (5 + 5 * 4) * 2 + 3 * ((4 * 6 + 2 + 9) * 9 + 7) + 8 * (7 * 8 * 5 * 7 + 4 * 9)\n        5 + 8 + (4 + (5 * 6 * 6 * 5 + 4)) * 4 + 2\n        6 + 2 + (4 * 7 * 7 * 2 * 8 + 8) + 7\n        8 + ((5 * 9) + (8 + 8 + 6 + 7 + 6 + 3) * 9) + 7 + 7\n        5 + 5 * 3 + 8\n        (6 + 4 + (8 * 2) * 5) * 3 * 6 * 8 + 3\n        (4 * 2) * 2 + 2 + 5 + (7 * (6 * 5 * 6 + 4) * 8 * (8 * 2) * (9 * 5 + 4 * 3 + 6 * 4) * 3)\n        8 * (3 + 7 * 5 * 4) + 4 + 4 + 6 * 8\n        (5 * 7) * 5 + 9 + (4 + 8 * 9 * 5)\n        3 * ((5 + 9) * 4 + 6 * 7) * 2 * 3 * 8\n        7 * (6 * 9 * (6 * 9 + 3 + 6 * 4) * 5) + ((8 + 5 + 2 + 4 + 8) + 4 + 9) + 8\n        7 + (3 * 5 * 7 + (4 + 9 + 3 + 6 + 7)) + (5 + 8 * (7 + 5 + 7)) + (7 * 4)\n        (4 + 7 + 2) * 2 + 9\n        6 * 4 + 9 + 6 * 6 + 7\n        6 * ((7 * 6) * 7 + 4 * 5 * 6 + 4) * (9 * (9 + 3) * 7)\n        (4 * 5 + 4 * 2 + 3 + 3) + 8 * 6 * ((3 * 4 + 5) + 2 + 3 * 8 + 6 + 9) * 8\n        ((5 * 2 * 6 + 3) + (7 + 3 + 3) * (5 + 9)) * 7 * 6\n        5 + 6 * 4 + (7 + (3 + 3)) * (9 * 9 + (2 * 4 * 4 + 3) * 5 + 5 * 4) + 5\n        3 + 5 * (6 + 9 + (7 + 3 + 3 + 7) * 4 + 2 + 8)\n        5 * 5 + (5 * 6 * 5) * 5 * 2 + (3 * 5 + 9 + 6)\n        6 * (8 * 7 * 2 + 6) * 3"}u("a:\n",i.split("\n").map(function(n){return e(n.trim().split("").filter(function(n){return n.trim().length}))})),u("b:"),u("everything took",(new Date).getTime()-r,"ms");
},{}]},{},["QCba"], null)
//# sourceMappingURL=index.js.map