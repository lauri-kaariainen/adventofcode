{"version":3,"sources":["../../../helpmodule.js","index.ts"],"names":["find4","x","y","matrix","wantedChar","returnable","length","push","get8","positions","forEach","pos","undefined","num2letter","chr","String","fromCharCode","hex2bin","hex","nulls","nullAmount","Array","map","e","join","parseInt","toString","substr","num2hex","num","dec2bin","bin2dec","binary","swapPositions","arr","index1","index2","insertValueAtMutating","index","newValue","splice","arrayRotate","reverse","unshift","pop","shift","trampoline","fn","uniqueShallow","item","i","slice","includes","uniqueDeep","some","other","JSON","stringify","combineMatrices","larger","smaller","largerLine","lineNum","startPoint","Math","floor","char","charNum","flatten","reduce","flat","toFlatten","concat","isArray","insert","array","rest","reduceSum","acc","next","reduceMultiply","reduceFlatten","permutations","xs","ret","j","returnUniqueAmountsAsObj","val","betweenOrEqual","number","min","max","gcd2","a","b","NaN","gcd","n","lcm2","lcm"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\n\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) =>\n  acc + next;\n\nconst reduceMultiply = (acc, next) =>\n  acc * next;\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\n\n\n\nexport {\n  find4,\n  get8,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd\n}","import { get8, betweenOrEqual } from \"../../../helpmodule.js\";\r\n\r\nconst get8Typed = (x: number, y: number, matrix: string[][]): string[] => get8(x, y, matrix)\r\n\r\nenum Position {\r\n    Active = \"#\",\r\n    InActive = \".\"\r\n}\r\n\r\nconst getSeenActivePositions = (x: number, y: number, z: number, arr: string[][][]): number =>\r\n    get8Typed(x, y, arr[z])\r\n        .filter((anotherPosition: string) => anotherPosition === Position.Active).length\r\n    +\r\n    (arr[z - 1] ?\r\n        (get8Typed(x, y, arr[z - 1])\r\n            .filter((anotherPosition: string) => anotherPosition === Position.Active).length +\r\n            (arr[z - 1][y][x] === Position.Active ? 1 : 0)) :\r\n        0)\r\n    +\r\n    (arr[z + 1] ?\r\n        (get8Typed(x, y, arr[z + 1])\r\n            .filter((anotherPosition: string) => anotherPosition === Position.Active).length +\r\n            (arr[z + 1][y][x] === Position.Active ? 1 : 0)) :\r\n        0)\r\n\r\n\r\nconst recursivelyChangePositions = (\r\n    matrixIn3D: string[][][],\r\n    targetSteps: number,\r\n    step: number = 0,\r\n): string[][][] =>\r\n    step >= targetSteps ?\r\n        matrixIn3D :\r\n        recursivelyChangePositions(\r\n            matrixIn3D.map(\r\n                (matrix2D: string[][], z: number, matrix3D): string[][] =>\r\n                    matrix2D.map((line: string[], y: number): string[] =>\r\n                        line.map((char: string, x: number): Position =>\r\n                            char === Position.Active ?\r\n                                (betweenOrEqual(\r\n                                    getSeenActivePositions(x, y, z, matrix3D),\r\n                                    2,\r\n                                    3) ?\r\n                                    Position.Active :\r\n                                    Position.InActive) :\r\n                                //char === Position.InActive ?\r\n                                getSeenActivePositions(x, y, z, matrix3D) === 3 ?\r\n                                    Position.Active :\r\n                                    Position.InActive\r\n                        )\r\n                    )\r\n            ),\r\n            targetSteps,\r\n            step + 1\r\n        )\r\n\r\n\r\n\r\nconst startTime = new Date().getTime()\r\n\r\nconst cycleLimit = 6;\r\n\r\nconst createWhole3DMatrix = (inputMatrix: string[][], extraLength: number): string[][][] => {\r\n\r\n    const addableArray: string[][] = Array.from(new Array(inputMatrix.length + (extraLength * 2)))\r\n        .map((_, i) =>\r\n            Array.from(new Array(inputMatrix.length + (extraLength * 2))).map(e => Position.InActive))\r\n\r\n    // console.log(addableArray.map(line => line.join(\" \")).join(\"\\n\"))\r\n\r\n    inputMatrix.forEach((line: string[], i: number) =>\r\n        addableArray[Math.floor(extraLength) + i].splice(\r\n            Math.floor(extraLength), line.length, ...line\r\n        )\r\n    )\r\n\r\n    // console.log(inputMatrix.map(line => line.join(\" \")).join(\"\\n\"))\r\n    // console.log(addableArray.map(line => line.join(\" \")).join(\"\\n\"))\r\n\r\n    const new3dArray: string[][][] =    //create Z-axis\r\n        Array.from(new Array(inputMatrix.length + (extraLength * 2)))\r\n            .map((_: undefined, i: number) =>\r\n                i === extraLength ? addableArray :\r\n                    Array.from(new Array(inputMatrix.length + (extraLength * 2)))\r\n                        .map((_, i) =>\r\n                            Array.from(new Array(inputMatrix.length + (extraLength * 2))).map(e => Position.InActive)))\r\n\r\n    return new3dArray\r\n}\r\n\r\n\r\n\r\nconst usedInput = getInput();\r\n\r\nlog(\"a:\\n\",\r\n\r\n    // recursivelyTakeSeats(\r\n    recursivelyChangePositions(\r\n        createWhole3DMatrix(\r\n            usedInput\r\n                .split(/\\s*\\n\\s*/)\r\n                .map(line => line.split(\"\"))\r\n            , cycleLimit)\r\n        ,\r\n        6),\r\n    recursivelyChangePositions(\r\n        createWhole3DMatrix(\r\n            usedInput\r\n                .split(/\\s*\\n\\s*/)\r\n                .map(line => line.split(\"\"))\r\n            , cycleLimit)\r\n        ,\r\n        6)\r\n        .map(matrix =>\r\n            matrix\r\n                .flatMap(line =>\r\n                    line.filter(char => char === \"#\")))\r\n        .map(e => e.length)\r\n        .reduce((a, b) => a + b)\r\n    // ,\r\n    // createWhole3DMatrix(\r\n    //     usedInput\r\n    //         .split(/\\s*\\n\\s*/)\r\n    //         .map(line => line.split(\"\"))\r\n    //     , cycleLimit)\r\n)\r\n\r\nlog(\"b:\",\r\n\r\n)\r\nlog(\r\n    \"everything took\",\r\n    new Date().getTime() - startTime,\r\n    \"ms\"\r\n)\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\n\r\nfunction getTestInput(): string {\r\n    return (`.#.\r\n    ..#\r\n    ###`)\r\n}\r\n\r\nfunction getInput(): string {\r\n    return (\r\n        `....###.\r\n        #...####\r\n        ##.#.###\r\n        ..#.#...\r\n        ##.#.#.#\r\n        #.######\r\n        ..#..#.#\r\n        ######.#`\r\n    );\r\n}\r\n"]}