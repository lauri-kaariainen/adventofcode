{"mappings":"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","sources":["src/index.ts","src/astar.js","../../helpmodule.js"],"sourcesContent":["import { reduceSum } from \"../../../helpmodule.js\";\r\nimport { astar, Graph } from \"./astar.js\";\r\nconsole.log(getInput().length);\r\nconsole.log(getTESTInput().length);\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined' && typeof (document) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\nconst testInputArr: string = getTESTInput();\r\nconst inputArr: string = getInput();\r\n\r\n\r\nconst parseInput = (input: string): any =>\r\n    input.split(\"\\n\").map((line: string) => line.split(\"\").map(chr => parseInt(chr)))\r\n\r\nconst mirrorXY = (pointObj: any): { x: number, y: number } =>\r\n({\r\n    x: pointObj.y,\r\n    y: pointObj.x\r\n})\r\n\r\n// A few notes about weight values:\r\n\r\n// A weight of 0 denotes a wall.\r\n// A weight cannot be negative.\r\n// A weight cannot be between 0 and 1 (exclusive).\r\n// A weight can contain decimal values (greater than 1).\r\n\r\n\r\nconst arrInUse =\r\n    getInput();\r\nconst parsedArr = parseInput(arrInUse)\r\nconsole.log(astar)\r\n//NOTE!! x and y are mirrored with astar!\r\nconst graphWithWeight = new Graph(parsedArr);\r\nconst startWithWeight = graphWithWeight.grid[0][0];\r\nconst endWithWeight = graphWithWeight.grid[parsedArr.length - 1][parsedArr[0].length - 1];\r\nconst routeWithWeight = astar.search(graphWithWeight, startWithWeight, endWithWeight);\r\nconst convertedRoute = routeWithWeight.map(mirrorXY)\r\n// resultWithWeight is an array containing the shortest path taking into account the weight of a node\r\n\r\n\r\nlog(\"a:\",\r\n    convertedRoute\r\n        .map(point => parsedArr[point.y][point.x])\r\n        .reduce(reduceSum)\r\n\r\n\r\n)\r\n\r\nlog(\"b:\",\r\n\r\n\r\n)\r\n\r\n\r\nfunction getTESTInput(): string {\r\n    return (\r\n        `1163751742\r\n1381373672\r\n2136511328\r\n3694931569\r\n7463417111\r\n1319128137\r\n1359912421\r\n3125421639\r\n1293138521\r\n2311944581`)\r\n}\r\n\r\nfunction getInput(): string {\r\n    return (\r\n\r\n        `9956978467598825771298981722484596335818889199959653868179249999625599695779356228986873188891687284\r\n2689689264298797391119983529199959929858717969159391918681149969777492315688758986884866649397344369\r\n7172588131466121589783888671998218118876859987982967195137181498916455889797182194619794894661629837\r\n1233915929951588187849869199557858368639699117699688284859878443929999216978195119999586994518395892\r\n9936995927995999181961898584664489968882718885899689991948779689429318576999239788488143592176591999\r\n4897812918593459844917171834839975629813379971269169715938988896273649199919822997859787183217266891\r\n3933479167694699988319796863899446989269729449353695242844661984577961677295376286699769399319179358\r\n8987971987557238146557624799143829841679714886637818814698722922629981272226771789888594293727111941\r\n9674793972799591469997914789999881914562866899896527271538614679686339678188599786718883888297884985\r\n3961546999429929697613295879446959999892529586841738538988955529791599788979945996552179737819798781\r\n8844499362795969617994798868899899967824718292987354124929799999999618888579375128149986291724818549\r\n6319846159183995575829928989855577928968687494197997676113642777249672499899922998489399689953482875\r\n9318687755659372657924997867798988249219919195777499949395644897994967496851972899172918985191986597\r\n1998599789837695923861376925899583587862947979985968841769887158695968694796847698692896798761999877\r\n5389282482999389799417698173893793899555831488784993293489986775988887249661449988932199149826678929\r\n8885947487894125927844118934698315379199888789929515426975914988499896859985997738397828665929167667\r\n6298126815327916531712852259122155187297979818671127395658129297993863829999995739149985894397989743\r\n1891818878562954593599769891715178798578198418759575992878686979669849659989376719878793751989873589\r\n7985499598548294965777989549188571469396129839958919965359993968917797946999895164825697975265318994\r\n8939965352883349869987249262938897838999248787325191338911189196687898923799292934597931568686612994\r\n7883898892974459457272249846188161917193149598787915749973585899456996887596471274789926636819983548\r\n2893991266649412992998149988584297828117178919999295117889696435789899766195171297784699292989289912\r\n1889714497629498271876915259919916877619271584853928872546293189869749972719666595921649989796592959\r\n7989499773979971784991185677884772123776243315312592283695855829888699449884842589715776989991789788\r\n7969795549486918991741685993996689683991966793692719315219418594972994877669188497657994424741182716\r\n9891947169875483798968286797952944449969337387522685989126929899999186138748689929857925548689799775\r\n9934896897676629969846778999787616627743482859289949899173264238945619889896999992469794974489738168\r\n9649159979125986881692895488749887858778122897977996878266986997989985581382219174136998186328958999\r\n5868691619999883889799358879965896559782969287865997969412992135731371297995484417789177978999385999\r\n4987897118498941972858679939188913296758597957999159988899986765499688389749658649972788771194622759\r\n1484677635957996929559394997115194644415987837679917276568956717892651758726847486766995239622121618\r\n9989825558961948591989389179598799512428197998473996198491319844117397786299159926869928984999524599\r\n9917489296996997892917815829949821398462883759798899955315774553399987927967851318618379995454697825\r\n9899299512998939797198987378498237991935772689793749139688253135773898648876616593117848746989718389\r\n9997972916561279591989268558868997998782877967294893997282835818298696664999271999816281912219699946\r\n6799984995998883892269931298291819919852918918797134688842882966259814991647587815893276276818959675\r\n2871799844997986881319989698985799523755429889896999957822163591959924968239999854149897942628668477\r\n1995516921867788958199262639437657998684938999998937819965919589587365113799977817192699734182899375\r\n5911698839287819813698283389479956621591539915445638599938928889889999987592185459259842276386718359\r\n6988184995767228398797357898988136259292456271151782749739585392874599153488799986677756154921998775\r\n5889929568199528716917269697939589839936697973974687392391998983885167197295577686933487169797662969\r\n3576282138549491591775319176995538717999696588956995986695547613191839999512898715915936144392561948\r\n5329291717962161983227685489686918845996485997797396429999778881967959896987173997982847473369768897\r\n9164877781748889899469935799585918943989878977762998481869615689939727996997779688475748199844328798\r\n7991798237196899759673953382693927758496873888976788729351868197693796999369249969791967491137567799\r\n9991695968149396561848295799981998693141199398256927816469955854719769376962761743394948485552314828\r\n7186982892991599596272997398958488711982959664528917897576966858736399542649887128419993918518649589\r\n8999989998887485976988528481447878238888715919917699589959417318968677596299273377619723799734898143\r\n5169759894554293926482859352168158938898158397815319411261867193588842668867949888992986989912694675\r\n8427473979159967517766496846922999759861788196891899348748453495589395979484411832439745788998684749\r\n8979884898599659995653699764474992169918891845926589298187821985789331496992892739877557699399978889\r\n4117135275897846694979693356776419864316434198781749699399367328249826173831856819118872599887929117\r\n9879692658499978199599958786823949284997756118947995691794672327135471866488699919688193434735639585\r\n5691984588698969477979699978918969898918843129191794615781694841492886319696159938666583888649697795\r\n7189792431819239183896995186829891998578999466945599954117398899964997997971389145796939891639759499\r\n9969315998289288839685999879984999391938198897279438593919898811199693927729161249553274797871579955\r\n1397679395879587899999669189986964964999618829967419381999986859319416977398958959718958929978957382\r\n6894969894281478382719899781799987581557999826119214189196671986242299959884989979649529422543719967\r\n5981739475817947337868896926557129487952934635768334175511729813799968872337293512818311266539869789\r\n5859971281996158947896999985565894597181699999239559563991657519998757442189829991395937666836311593\r\n9968994867989926199441198198936757993274471923418981999389838988468878984888673962722692615494994916\r\n3412989194698818488388395996795357868465884171614913988853947119968999199694989575882882897788754196\r\n4767793319914896979199935929955397569993689616359493297947517199829987968826779949998365977814959924\r\n2579972398289957987898849924347928451689465791831947348756986989948598821793892916666725547789741299\r\n9698989769676955862992919199339895299629837998423697491249883483599482292954759887829993292627872191\r\n1894619155917969889918757658925899599689781921899269989427239978652658489188493949679618396136949299\r\n7712943759193929987161997175874316616112999266279789989697738811792676856992288912397788157897879898\r\n7891199595911898419259681615768959188518795943876188369392846121938555699336786418329929798119869899\r\n2796935459996838899793711969696999482299355989299989966798699899578998998995999694942878296779957749\r\n4719483381989998499982591777895592799878676851889999639599194219135897985978325759838972952973185948\r\n8965912619221745652577826328989598641499946592178869488499927162899585757385941597967851868197894763\r\n8968695392792679597328229296399468238915291348856156176658189554419981971975789178898588648216792946\r\n3694899896814879119881449917673689939386629993879189938479899217774991999917899821137417799198637637\r\n5645661179381989929244868899917199387518895199571843654858799839999745993352769499895481849381896897\r\n9651497219912776328185181986618747416337918889734673282681872989791999949935713999993969339279198953\r\n4314949398895886943322397517587556441759979499928122411997918368816918184399881141261381347876568616\r\n5187293161286489982862974561982928899978837649549913847496156789731291181557888959476992992881482582\r\n9317992939383168491917991759264246565676891875962999958999757698623183898357397767392891287912962868\r\n1799982437869993916939953411873913995541879869793889572866919896412765623887865749378966915413927898\r\n9519787945431432316313866197973328267939581218979649989439384224999472881299732999597352772753791368\r\n9288483569399269795915929419419136973331899194387846645998973819199773878634519282999223793324966229\r\n6755829165937992937993893768199949761128166811959979779699129626188827215694641186878869191698651191\r\n9799359993719926899876838991998368937197882188149191968977826896378899978686199548658893562678998579\r\n3897958689718149561892985516687895789198398548689645643884695999999847494283968756796765389139599839\r\n5818578147898416913367195515611597885861963578883578997187918599287756577474396983356312967793128892\r\n9999892769284995919972819835547962786736828152819184951161662279799894817599791878181753149877894881\r\n8299976964465999287197581918879685397888356594792988199697982765599427566287823683431351869995623962\r\n8989496693957987663678978593593738931986779777991313898594961994695949896798884139938616151819966565\r\n6898258912998949478473966768888494482448481939998236784669299799997816791891267967195319818818979489\r\n7768427926996979688996299284916648789185799693838939518998993658998919289198619735288918586275797617\r\n9877886949939119114117598819669599875829575673498688598163398885845347726982589975482198997862547995\r\n5597689771938983973982619291188793285821886981895899191372797519999399581692538649838931291961891287\r\n8577194549714988975998688698899479153995216852979764837138991671792834878995969442481912618443911927\r\n9586172919854431896891871994969319226453687499979851699789283289898959899239286739579255644212647999\r\n3966599598558974987689898899966735148191945177788188358719588958287189491299792478998288954884975941\r\n9857984259191773999893262946889397892366998191262597118924895918951469846746979119989112768998759988\r\n9487493194185853443118348557381979199114998581958626984133689529217198991359988198776267891998985428\r\n7253864979196694796646966283794927398942982897999588293398762766965949771799885768956895355878512657\r\n7939941892849576866851816855958734169789934758298874844919928289119988823599357892155959839679679918\r\n8195996699568965579198729534577878698778991795617454587967117967862889252256796526887997997398959165`\r\n    );\r\n}\r\n","// javascript-astar 0.4.1\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n(function (definition) {\n  /* global module, define */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], definition);\n  } else {\n    var exports = definition();\n    window.astar = exports.astar;\n    window.Graph = exports.Graph;\n  }\n})(function () {\n\n  function pathTo(node) {\n    var curr = node;\n    var path = [];\n    while (curr.parent) {\n      path.unshift(curr);\n      curr = curr.parent;\n    }\n    return path;\n  }\n\n  function getHeap() {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  var astar = {\n    /**\n    * Perform an A* Search on a graph given a start and end node.\n    * @param {Graph} graph\n    * @param {GridNode} start\n    * @param {GridNode} end\n    * @param {Object} [options]\n    * @param {bool} [options.closest] Specifies whether to return the\n               path to the closest node if the target is unreachable.\n    * @param {Function} [options.heuristic] Heuristic function (see\n    *          astar.heuristics).\n    */\n    search: function (graph, start, end, options) {\n      graph.cleanDirty();\n      options = options || {};\n      var heuristic = options.heuristic || astar.heuristics.manhattan;\n      var closest = options.closest || false;\n\n      var openHeap = getHeap();\n      var closestNode = start; // set the start node to be the closest if required\n\n      start.h = heuristic(start, end);\n      graph.markDirty(start);\n\n      openHeap.push(start);\n\n      while (openHeap.size() > 0) {\n\n        // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n        var currentNode = openHeap.pop();\n\n        // End case -- result has been found, return the traced path.\n        if (currentNode === end) {\n          return pathTo(currentNode);\n        }\n\n        // Normal case -- move currentNode from open to closed, process each of its neighbors.\n        currentNode.closed = true;\n\n        // Find all neighbors for the current node.\n        var neighbors = graph.neighbors(currentNode);\n\n        for (var i = 0, il = neighbors.length; i < il; ++i) {\n          var neighbor = neighbors[i];\n\n          if (neighbor.closed || neighbor.isWall()) {\n            // Not a valid node to process, skip to next neighbor.\n            continue;\n          }\n\n          // The g score is the shortest distance from start to current node.\n          // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n          var gScore = currentNode.g + neighbor.getCost(currentNode);\n          var beenVisited = neighbor.visited;\n\n          if (!beenVisited || gScore < neighbor.g) {\n\n            // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n            neighbor.visited = true;\n            neighbor.parent = currentNode;\n            neighbor.h = neighbor.h || heuristic(neighbor, end);\n            neighbor.g = gScore;\n            neighbor.f = neighbor.g + neighbor.h;\n            graph.markDirty(neighbor);\n            if (closest) {\n              // If the neighbour is closer than the current closestNode or if it's equally close but has\n              // a cheaper path than the current closest node then it becomes the closest node\n              if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n                closestNode = neighbor;\n              }\n            }\n\n            if (!beenVisited) {\n              // Pushing to heap will put it in proper place based on the 'f' value.\n              openHeap.push(neighbor);\n            } else {\n              // Already seen the node, but since it has been rescored we need to reorder it in the heap\n              openHeap.rescoreElement(neighbor);\n            }\n          }\n        }\n      }\n\n      if (closest) {\n        return pathTo(closestNode);\n      }\n\n      // No result was found - empty array signifies failure to find path.\n      return [];\n    },\n    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n    heuristics: {\n      manhattan: function (pos0, pos1) {\n        var d1 = Math.abs(pos1.x - pos0.x);\n        var d2 = Math.abs(pos1.y - pos0.y);\n        return d1 + d2;\n      },\n      diagonal: function (pos0, pos1) {\n        var D = 1;\n        var D2 = Math.sqrt(2);\n        var d1 = Math.abs(pos1.x - pos0.x);\n        var d2 = Math.abs(pos1.y - pos0.y);\n        return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n      }\n    },\n    cleanNode: function (node) {\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  };\n\n  /**\n   * A graph memory structure\n   * @param {Array} gridIn 2D array of input weights\n   * @param {Object} [options]\n   * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n   */\n  function Graph(gridIn, options) {\n    options = options || {};\n    this.nodes = [];\n    this.diagonal = !!options.diagonal;\n    this.grid = [];\n    for (var x = 0; x < gridIn.length; x++) {\n      this.grid[x] = [];\n\n      for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n        var node = new GridNode(x, y, row[y]);\n        this.grid[x][y] = node;\n        this.nodes.push(node);\n      }\n    }\n    this.init();\n  }\n\n  Graph.prototype.init = function () {\n    this.dirtyNodes = [];\n    for (var i = 0; i < this.nodes.length; i++) {\n      astar.cleanNode(this.nodes[i]);\n    }\n  };\n\n  Graph.prototype.cleanDirty = function () {\n    for (var i = 0; i < this.dirtyNodes.length; i++) {\n      astar.cleanNode(this.dirtyNodes[i]);\n    }\n    this.dirtyNodes = [];\n  };\n\n  Graph.prototype.markDirty = function (node) {\n    this.dirtyNodes.push(node);\n  };\n\n  Graph.prototype.neighbors = function (node) {\n    var ret = [];\n    var x = node.x;\n    var y = node.y;\n    var grid = this.grid;\n\n    // West\n    if (grid[x - 1] && grid[x - 1][y]) {\n      ret.push(grid[x - 1][y]);\n    }\n\n    // East\n    if (grid[x + 1] && grid[x + 1][y]) {\n      ret.push(grid[x + 1][y]);\n    }\n\n    // South\n    if (grid[x] && grid[x][y - 1]) {\n      ret.push(grid[x][y - 1]);\n    }\n\n    // North\n    if (grid[x] && grid[x][y + 1]) {\n      ret.push(grid[x][y + 1]);\n    }\n\n    if (this.diagonal) {\n      // Southwest\n      if (grid[x - 1] && grid[x - 1][y - 1]) {\n        ret.push(grid[x - 1][y - 1]);\n      }\n\n      // Southeast\n      if (grid[x + 1] && grid[x + 1][y - 1]) {\n        ret.push(grid[x + 1][y - 1]);\n      }\n\n      // Northwest\n      if (grid[x - 1] && grid[x - 1][y + 1]) {\n        ret.push(grid[x - 1][y + 1]);\n      }\n\n      // Northeast\n      if (grid[x + 1] && grid[x + 1][y + 1]) {\n        ret.push(grid[x + 1][y + 1]);\n      }\n    }\n\n    return ret;\n  };\n\n  Graph.prototype.toString = function () {\n    var graphString = [];\n    var nodes = this.grid;\n    for (var x = 0; x < nodes.length; x++) {\n      var rowDebug = [];\n      var row = nodes[x];\n      for (var y = 0; y < row.length; y++) {\n        rowDebug.push(row[y].weight);\n      }\n      graphString.push(rowDebug.join(\" \"));\n    }\n    return graphString.join(\"\\n\");\n  };\n\n  function GridNode(x, y, weight) {\n    this.x = x;\n    this.y = y;\n    this.weight = weight;\n  }\n\n  GridNode.prototype.toString = function () {\n    return \"[\" + this.x + \" \" + this.y + \"]\";\n  };\n\n  GridNode.prototype.getCost = function (fromNeighbor) {\n    // Take diagonal weight into consideration.\n    if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n      return this.weight * 1.41421;\n    }\n    return this.weight;\n  };\n\n  GridNode.prototype.isWall = function () {\n    return this.weight === 0;\n  };\n\n  function BinaryHeap(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  BinaryHeap.prototype = {\n    push: function (element) {\n      // Add the new element to the end of the array.\n      this.content.push(element);\n\n      // Allow it to sink down.\n      this.sinkDown(this.content.length - 1);\n    },\n    pop: function () {\n      // Store the first element so we can return it later.\n      var result = this.content[0];\n      // Get the element at the end of the array.\n      var end = this.content.pop();\n      // If there are any elements left, put the end element at the\n      // start, and let it bubble up.\n      if (this.content.length > 0) {\n        this.content[0] = end;\n        this.bubbleUp(0);\n      }\n      return result;\n    },\n    remove: function (node) {\n      var i = this.content.indexOf(node);\n\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      var end = this.content.pop();\n\n      if (i !== this.content.length - 1) {\n        this.content[i] = end;\n\n        if (this.scoreFunction(end) < this.scoreFunction(node)) {\n          this.sinkDown(i);\n        } else {\n          this.bubbleUp(i);\n        }\n      }\n    },\n    size: function () {\n      return this.content.length;\n    },\n    rescoreElement: function (node) {\n      this.sinkDown(this.content.indexOf(node));\n    },\n    sinkDown: function (n) {\n      // Fetch the element that has to be sunk.\n      var element = this.content[n];\n\n      // When at 0, an element can not sink any further.\n      while (n > 0) {\n\n        // Compute the parent element's index, and fetch it.\n        var parentN = ((n + 1) >> 1) - 1;\n        var parent = this.content[parentN];\n        // Swap the elements if the parent is greater.\n        if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n          this.content[parentN] = element;\n          this.content[n] = parent;\n          // Update 'n' to continue at the new position.\n          n = parentN;\n        }\n        // Found a parent that is less, no need to sink any further.\n        else {\n          break;\n        }\n      }\n    },\n    bubbleUp: function (n) {\n      // Look up the target element and its score.\n      var length = this.content.length;\n      var element = this.content[n];\n      var elemScore = this.scoreFunction(element);\n\n      while (true) {\n        // Compute the indices of the child elements.\n        var child2N = (n + 1) << 1;\n        var child1N = child2N - 1;\n        // This is used to store the new position of the element, if any.\n        var swap = null;\n        var child1Score;\n        // If the first child exists (is inside the array)...\n        if (child1N < length) {\n          // Look it up and compute its score.\n          var child1 = this.content[child1N];\n          child1Score = this.scoreFunction(child1);\n\n          // If the score is less than our element's, we need to swap.\n          if (child1Score < elemScore) {\n            swap = child1N;\n          }\n        }\n\n        // Do the same checks for the other child.\n        if (child2N < length) {\n          var child2 = this.content[child2N];\n          var child2Score = this.scoreFunction(child2);\n          if (child2Score < (swap === null ? elemScore : child1Score)) {\n            swap = child2N;\n          }\n        }\n\n        // If the element needs to be moved, swap it, and continue.\n        if (swap !== null) {\n          this.content[n] = this.content[swap];\n          this.content[swap] = element;\n          n = swap;\n        }\n        // Otherwise, we are done.\n        else {\n          break;\n        }\n      }\n    }\n  };\n\n  return {\n    astar: astar,\n    Graph: Graph\n  };\n\n});","const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\nconst get8Positions = (x, y, matrix) => {\n  const positions =\n    [\n      {y: y - 1, x: x - 1},\n      {y: y - 1, x: x},\n      {y: y - 1, x: x + 1},\n      {y: y, x: x + 1},\n      {y: y + 1, x: x + 1},\n      {y: y + 1, x: x},\n      {y: y + 1, x: x - 1},\n      {y: y, x: x - 1},\n    ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(pos));\n  return returnable\n\n}\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst arrayRotateLeft = (arr) => (\n  arr.push(arr.shift()), arr\n);\nconst arrayRotateRight = (arr) => (\n  arr.unshift(arr.pop()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) =>\n  acc + next;\n\nconst reduceMultiply = (acc, next) =>\n  acc * next;\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\nfunction mostFrequentElems(array) {\n  const mostCommon = array\n    .filter(uniqueShallow)\n    .sort((a, b) =>\n      array\n        .filter(e => e === b).length - array.filter(e => e === a).length)[0];\n\n  const mostCommonLength =\n    array.filter(e => e === mostCommon).length\n\n  return array\n    .filter(e => array.filter(another => another === e).length === mostCommonLength)\n    .filter(uniqueShallow)\n}\n\nconst transpose = m => m[0].map((x, i) => m.map(x => x[i]))\n\nconst range = (start, stop, step = 1) =>\n  Array.from({length: (stop - start) / step + 1}, (_, i) => start + (i * step));\n\n\n\nexport {\n  find4,\n  get8,\n  get8Positions,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  arrayRotateLeft,\n  arrayRotateRight,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd,\n  mostFrequentElems,\n  transpose,\n  range\n}"],"names":["$3c8f1a1c09db7dbb$var$log","args","console","document","log","querySelector","innerHTML","join","definition","$57932ab15a544eb7$exports","define","amd","exports","window","astar","Graph","pathTo","node","curr","path","parent","unshift","search","graph","start","end","options","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","f","closestNode","h","markDirty","push","size","currentNode","pop","closed","neighbors","i","il","length","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","Math","abs","x","y","diagonal","D2","sqrt","d1","d2","min","cleanNode","gridIn","this","nodes","grid","row","GridNode","init","weight","scoreFunction","content","prototype","dirtyNodes","ret","toString","graphString","rowDebug","fromNeighbor","element","sinkDown","result","bubbleUp","remove","indexOf","n","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2","$3c8f1a1c09db7dbb$var$getInput","$3c8f1a1c09db7dbb$var$getTESTInput","$3c8f1a1c09db7dbb$var$arrInUse","$3c8f1a1c09db7dbb$var$parsedArr","split","map","line","chr","parseInt","$3c8f1a1c09db7dbb$var$graphWithWeight","$3c8f1a1c09db7dbb$var$startWithWeight","$3c8f1a1c09db7dbb$var$endWithWeight","pointObj","point","reduce","acc","next"],"version":3,"file":"index.js.map"}