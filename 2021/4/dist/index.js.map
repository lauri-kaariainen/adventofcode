{"mappings":"MAAA,MAyIMA,EAAUC,GACdA,EAAIC,QAAM,CACPC,EAAMC,IACLD,EAAKE,OAAOC,MAAMC,QAAQH,GAAaJ,EAAQI,GAAaA,IAC9D,IAOEI,EAAS,CAAIC,EAAKC,IACtBD,EAAMC,WCjJCC,KAAOC,GACa,oBAAbC,UACRA,QAAQC,OAAOF,GACfG,SAASC,cAAc,OAAQC,WAAa,QAAUL,EAAKM,KAAK,MANxEL,QAAQC,IAAIK,IAAWC,QACvBP,QAAQC,IAAIO,IAAeD,QASIC,IAA/B,MACMC,EAAqBH,IAoBrBI,EAAiB,CAAIC,EAA0BC,MAChDD,EAAeJ,QAKyE,IAJrFK,EACKC,QAAQC,GACLA,EACKD,QAAQE,GACLJ,EAAeK,SAASD,KAAWR,SAAWO,EAAIP,SAAQA,OAE5EU,EAAY,CAAIN,EAA0BC,KAC5CF,OAAAA,EAAkBC,EAAgBC,IAAUF,EAAkBC,GDqLhDO,ECrL0EN,GDqLnE,GAAGO,KAAG,CAAEC,EAAGC,IAAMH,EAAEC,KAAIG,GAAKA,EAAED,QAAxC,IAAGH,GClLZK,EAAmB,CACrBC,EACAC,EACAC,KAEA,IAAKF,EAAmBjB,OACpB,KAAO,qCAGX,MAAMoB,EACFD,EAAOP,KAAKP,GACRK,EAAaQ,EAAgBb,KAErC,OAAIe,EAAQX,UAAS,GACV,CAAEJ,MAAOc,EAAOC,EAAQC,SAAQ,IAAQH,eAAgBA,GAExDF,EACHC,EAAmBK,MAAM,GACzBJ,EAAejC,OAAOgC,EAAmB,IACzCE,IAGNI,EAAkB,CACpBN,EACAC,EACAC,KAEA,IAAKF,EAAmBjB,OACpB,KAAO,qCAGX,MAAMoB,EACFD,EAAOP,KAAKP,GACRK,EAAaQ,EAAgBb,KAErC,OAAIe,EAAQI,OAAMC,IAAe,IAARA,IACd,CAAEpB,MAAOc,EAAOC,EAAQC,SAAQ,IAAQH,eAAgBA,GAExDK,EACHN,EAAmBK,MAAM,GACzBJ,EAAejC,OAAOgC,EAAmB,IACzCE,EAAOb,QAAQD,IACVK,EAAaQ,EAAgBb,OAMxCqB,EA5E2B,CAC7BC,MADgB9C,EA2EHqB,GAzEL,GACC0B,MAAM,KACNhB,KAAKiB,GAAsBC,SAASD,KAC7CV,OACItC,EACKyC,MAAM,GACNxC,QAAM,CAAEO,EAAmBC,IACxBA,EAAKU,QACAX,EAAIA,EAAIW,OAAS,GAAG+B,KAAKzC,EAAKsC,MAAK,QAAShB,KAAKe,GAAyBG,SAASH,MAAStC,GAC7FA,EAAIJ,OAAO,CAAC,MACd,CAAC,MAZH,IAAIJ,EA6EpB,MAAMmD,EAAYhB,EACdU,EAAYC,KACZ,GACAD,EAAYP,QAGhB5B,EAAI,UACAX,EAAQoD,EAAU3B,OACbC,QAAQ2B,IAAiBD,EAAUd,eAAeT,SAASwB,KAC3DnD,OAAOM,GAEZ4C,EAAUd,eAAeI,OAAM,GAAI,IAKvC,MAAMY,EAAaX,EACfG,EAAYC,KACZ,GACAD,EAAYP,iBAcPlB,IACL,MAAM,qlRAZVV,EAAI,UACAX,EAAQsD,EAAW7B,OACdC,QAAQ2B,IAAiBC,EAAWhB,eAAeT,SAASwB,KAC5DnD,OAAOM,GAEZ8C,EAAWhB,eAAeI,OAAM,GAAI","sources":["../../helpmodule.js","src/index.ts"],"sourcesContent":["const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\n\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst arrayRotateLeft = (arr) => (\n  arr.push(arr.shift()), arr\n);\nconst arrayRotateRight = (arr) => (\n  arr.unshift(arr.pop()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) =>\n  acc + next;\n\nconst reduceMultiply = (acc, next) =>\n  acc * next;\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\nfunction mostFrequentElems(array) {\n  const mostCommon = array\n    .filter(uniqueShallow)\n    .sort((a, b) =>\n      array\n        .filter(e => e === b).length - array.filter(e => e === a).length)[0];\n\n  const mostCommonLength =\n    array.filter(e => e === mostCommon).length\n\n  return array\n    .filter(e => array.filter(another => another === e).length === mostCommonLength)\n    .filter(uniqueShallow)\n}\n\nconst transpose = m => m[0].map((x, i) => m.map(x => x[i]))\n\n\nexport {\n  find4,\n  get8,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  arrayRotateLeft,\n  arrayRotateRight,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd,\n  mostFrequentElems,\n  transpose\n}","import { transpose, flatten, reduceSum } from \"../../../helpmodule.js\";\r\nconsole.log(getInput().length);\r\nconsole.log(getTESTInput().length);\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\nconst testInputArr: string[] = getTESTInput();\r\nconst inputArr: string[] = getInput();\r\n\r\n\r\n\r\nconst parseInput = (arr: string[]): { line: number[], boards: number[][][] } => ({\r\n    line:\r\n        arr[0]\r\n            .split(\",\")\r\n            .map((e: string): number => parseInt(e)),\r\n    boards:\r\n        arr\r\n            .slice(2)\r\n            .reduce((acc: number[][][], next: string): number[][][] =>\r\n                next.length ?\r\n                    (acc[acc.length - 1].push(next.split(/\\s+/g).map((line: string): number => parseInt(line))), acc) :\r\n                    acc.concat([[]])\r\n                , [[]])\r\n\r\n})\r\n\r\nconst checkRowsForBingo = (guessedNumbers: number[], board: number[][]) =>\r\n    !guessedNumbers.length ? false :\r\n        board\r\n            .filter((row: number[]) =>\r\n                row\r\n                    .filter((numInRow: number) =>\r\n                        guessedNumbers.includes(numInRow)).length === row.length).length !== 0\r\n\r\nconst checkIfBingo = (guessedNumbers: number[], board: number[][]) =>\r\n    checkRowsForBingo(guessedNumbers, board) || checkRowsForBingo(guessedNumbers, transpose(board))\r\n\r\n\r\nconst findFirstBingoBoard = (\r\n    numbersLeftToGuess: number[],\r\n    numbersGuessed: number[],\r\n    boards: number[][][]): any => {\r\n\r\n    if (!numbersLeftToGuess.length) {\r\n        throw (\"numbers ran out, shouldn't happen!\");\r\n        return [[]];\r\n    }\r\n    const results =\r\n        boards.map((board: number[][]) =>\r\n            checkIfBingo(numbersGuessed, board)\r\n        )\r\n    if (results.includes(true))\r\n        return { board: boards[results.indexOf(true)], numbersGuessed: numbersGuessed }\r\n    else\r\n        return findFirstBingoBoard(\r\n            numbersLeftToGuess.slice(1),\r\n            numbersGuessed.concat(numbersLeftToGuess[0]),\r\n            boards)\r\n}\r\n\r\nconst findLastBingoBoard = (\r\n    numbersLeftToGuess: number[],\r\n    numbersGuessed: number[],\r\n    boards: number[][][]): any => {\r\n\r\n    if (!numbersLeftToGuess.length) {\r\n        throw (\"numbers ran out, shouldn't happen!\");\r\n        return [[]];\r\n    }\r\n    const results =\r\n        boards.map((board: number[][]) =>\r\n            checkIfBingo(numbersGuessed, board)\r\n        )\r\n    if (results.every(res => res === true))\r\n        return { board: boards[results.indexOf(true)], numbersGuessed: numbersGuessed }\r\n    else\r\n        return findLastBingoBoard(\r\n            numbersLeftToGuess.slice(1),\r\n            numbersGuessed.concat(numbersLeftToGuess[0]),\r\n            boards.filter((board: number[][]) =>\r\n                !checkIfBingo(numbersGuessed, board)))\r\n}\r\n\r\n\r\n\r\nconst arrInUse = inputArr;\r\nconst parsedInput = parseInput(arrInUse)\r\nconst resultObj = findFirstBingoBoard(\r\n    parsedInput.line,\r\n    [],\r\n    parsedInput.boards\r\n)\r\n\r\nlog(\"test a:\",\r\n    flatten(resultObj.board)\r\n        .filter((num: number) => !resultObj.numbersGuessed.includes(num))\r\n        .reduce(reduceSum)\r\n    *\r\n    resultObj.numbersGuessed.slice(-1)[0]\r\n\r\n\r\n)\r\n\r\nconst resultBObj = findLastBingoBoard(\r\n    parsedInput.line,\r\n    [],\r\n    parsedInput.boards\r\n)\r\n\r\nlog(\"test b:\",\r\n    flatten(resultBObj.board)\r\n        .filter((num: number) => !resultBObj.numbersGuessed.includes(num))\r\n        .reduce(reduceSum)\r\n    *\r\n    resultBObj.numbersGuessed.slice(-1)[0]\r\n\r\n\r\n)\r\n\r\n\r\nfunction getTESTInput(): string[] {\r\n    return (`7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\r\n\r\n22 13 17 11  0\r\n8  2 23  4 24\r\n21  9 14 16  7\r\n6 10  3 18  5\r\n1 12 20 15 19\r\n\r\n3 15  0  2 22\r\n9 18 13 17  5\r\n19  8  7 25 23\r\n20 11 10 24  4\r\n14 21 16 12  6\r\n\r\n14 21 17 24  4\r\n10 16 15  9 19\r\n18  8 23 26 20\r\n22 11 13  6  5\r\n2  0 12  3  7`.split(\"\\n\"))\r\n}\r\n\r\nfunction getInput(): string[] {\r\n    return (\r\n        `23,30,70,61,79,49,19,37,64,48,72,34,69,53,15,74,89,38,46,36,28,32,45,2,39,58,11,62,97,40,14,87,96,94,91,92,80,99,6,31,57,98,65,10,33,63,42,17,47,66,26,22,73,27,7,0,55,8,56,29,86,25,4,12,51,60,35,50,5,75,95,44,16,93,21,3,24,52,77,76,43,41,9,84,67,71,83,88,59,68,85,82,1,18,13,78,20,90,81,54\r\n\r\n50 98 65 14 47\r\n0 22  3 83 46\r\n87 93 81 84 58\r\n40 35 28 74 48\r\n45 99 59 37 64\r\n\r\n85 66 90 32 88\r\n95  6  4 74 27\r\n1 10 70 41 92\r\n54 36 42  9 39\r\n60 99 31 67 16\r\n\r\n4 44 66 10 58\r\n33 64 93 42 46\r\n19 63  6 83 54\r\n60 51 76  8 30\r\n71 49 73  7 55\r\n\r\n17 67 52 61 98\r\n46  5  4 51 76\r\n73 59 74  8 33\r\n48 96 20 26 15\r\n55 19 86 29 43\r\n\r\n20 75 12 67 41\r\n89 36 65 66 92\r\n40 19  1  0 28\r\n99 61 85 58 50\r\n44 72 57 35 86\r\n\r\n69 87 27 59 33\r\n47 34 60 93  9\r\n71 84 46 24 96\r\n15 91  5 61 19\r\n57 78 55 31  8\r\n\r\n19 10  1 81 96\r\n27 71  2 52 56\r\n15 22 48 82 34\r\n64 47 42 49 51\r\n26 72 61 12 57\r\n\r\n71 94 40 34 26\r\n12 80 57 38 55\r\n4 56 11 73 49\r\n75 60 61  9 50\r\n91 70 23  1 90\r\n\r\n39 86 30 73 38\r\n6 53 58 14 36\r\n85 12 75 88  5\r\n0 29 41 21 15\r\n47 66 59 54  1\r\n\r\n99 97 50 17 60\r\n36 13 29 80 32\r\n49 85 75 71 15\r\n10 79 41 61 66\r\n68 57 55 74 98\r\n\r\n68 33 87 89 59\r\n96 35 76 78 55\r\n4 63 51 10 65\r\n58 38 22 54  9\r\n66 18 37 60  6\r\n\r\n43 86 50 23 77\r\n10 42 19 61  2\r\n40 29 20 84  0\r\n70 59 96 80 57\r\n76 12 39 36  6\r\n\r\n73 43 92 37 99\r\n36 42 10 77 87\r\n3 57  4 20 35\r\n18  7 46 91 11\r\n17 98  8 53 61\r\n\r\n22 37 89 51  9\r\n71  6 72 87 32\r\n13 79 86 53 98\r\n16  2 93 48 38\r\n63 82 66 61 69\r\n\r\n73 90 85 54 65\r\n9 66 28  5 63\r\n91 50 70 59 80\r\n95 68 92 72 67\r\n69 88 36 43 53\r\n\r\n36 81 66 78 90\r\n2 25 94 82 55\r\n34 45  1 14 37\r\n13  4 70 48 75\r\n67 73 32 18 91\r\n\r\n33 93 71 48 47\r\n8 79 69 53 82\r\n5 31 80 45 37\r\n67 77 41 56 97\r\n65 46 62 42 81\r\n\r\n67 70 59 24 88\r\n84 11 29 52 78\r\n4 39 12 90  2\r\n44  3 10 75 89\r\n30 93 22 14  8\r\n\r\n79 60 98 99 49\r\n23 26 86 91 38\r\n77 45 95 66 75\r\n81 42 85 21  3\r\n40 37 65 20 50\r\n\r\n12 54  0 86 52\r\n15 56 29 39 94\r\n66 79 14 65 26\r\n3  4 59 60 40\r\n47 48 19 13 85\r\n\r\n32 44 69 90 21\r\n35  8  1 59 56\r\n72 71 84 18 11\r\n96 38 23 37 79\r\n92 20 33 94 17\r\n\r\n1 94 42 21 82\r\n92 60  9 32 38\r\n71  3 37 77 18\r\n89 16 74 76  2\r\n83 30 28 11 70\r\n\r\n94  3  1 71 87\r\n6 66 19 76 28\r\n10 86 22 62  2\r\n67  0 31 46 27\r\n8 33 43 92 29\r\n\r\n35 90  8 30 27\r\n67 60 82 68  1\r\n5 29 93 44 34\r\n56 65 48 37 51\r\n57 45 63 94 77\r\n\r\n67 80 45 57 43\r\n37 81 25 84 82\r\n50  8  9 64  7\r\n29 18 52 16 14\r\n73 28 11 76  6\r\n\r\n5 76 67 18 16\r\n68 47 15 29 59\r\n46 32 40  9 84\r\n30 17 20 22  3\r\n35 80 38 72 88\r\n\r\n35 44 14 89 72\r\n75 67 56  2  3\r\n58 41 49 12 52\r\n92  9 22 34 88\r\n65 39 93 61 47\r\n\r\n38 67 33 18 60\r\n34 50 69 31 83\r\n29 30  9 12 95\r\n79  2 24 54 87\r\n46 68 48 58 42\r\n\r\n61 87 46 26 34\r\n74 85  9 54 38\r\n50 29 84 40  4\r\n49 39 33 99 53\r\n77 59  0 42 35\r\n\r\n86 68 23 62  5\r\n96 92  7  4  1\r\n50 70 12 83 46\r\n34 63 91 56 11\r\n76 90 71 88 95\r\n\r\n19 18 13  3 62\r\n42 29 57 79 85\r\n39 64 14 28 98\r\n99 36 91  9 63\r\n69 66  2 17 31\r\n\r\n51 43 49 98 94\r\n31 64 53 54 57\r\n3 28 10 12  2\r\n24 99 95 35 17\r\n76 27 48  0 41\r\n\r\n80 62 13 38 98\r\n32 15 16  8 96\r\n93 43 81 99 40\r\n20 57 37 24  3\r\n94 17 70 14  7\r\n\r\n52 71 49 95 84\r\n76 38 45 59 89\r\n1  7 27  0 98\r\n92 64  8 50 68\r\n13 91 26 51  2\r\n\r\n31 45 25  1  5\r\n50 68 77 61 53\r\n74 20 99 38 63\r\n76 44 15 42 51\r\n67 87 86 12 24\r\n\r\n49  0 70 82  9\r\n2 24 96 74 60\r\n68 16 40 32 20\r\n48  6 98 11 65\r\n94 10 54  8 95\r\n\r\n74 41 11 33 76\r\n2 10 44 89 23\r\n56 45 78 60 34\r\n15  5 26 83 71\r\n20 72 85 75 54\r\n\r\n15 59 93 53  8\r\n4 10 84 44 36\r\n17 62 24 27 98\r\n87 54 73 13 35\r\n9 48 52 33  7\r\n\r\n56 80 70 74 35\r\n53 69 75 25 27\r\n47 91 85 62 32\r\n93 26 89 18 52\r\n16 73 49 55 77\r\n\r\n42 40 54 67 73\r\n11 10 49 35 59\r\n12 93 37 15 69\r\n97 41 47 39  2\r\n75 99 21 29 26\r\n\r\n23 75 41 10 86\r\n71 67 66 38 99\r\n91 92 63 40 28\r\n69 97 42 77 60\r\n44 53 12 84 57\r\n\r\n72 51 31 90 37\r\n35 89 55 73 87\r\n46 32 45  0 58\r\n50 81 13 18 66\r\n38  4 40 62 22\r\n\r\n14 48 35 76 83\r\n13 70 26  4  1\r\n30 22 91 93 29\r\n69 41 74 40 63\r\n80 65 66 72 23\r\n\r\n23 65 33 56 38\r\n84 41 34 21  2\r\n4 78 27 17 11\r\n22 53 52 32 80\r\n24 25 42 91 99\r\n\r\n54 51  0 23 52\r\n92 69 10 46  7\r\n20 35 12 37 73\r\n19 56 26 79 32\r\n27 74 34  5 57\r\n\r\n75 10 24 32  7\r\n96 54 22 78  5\r\n23 69 65 43 20\r\n29 85 44 92 71\r\n41 87 73  0 48\r\n\r\n54 92 16 36 37\r\n42 59  4  9 44\r\n52 14 12  6 47\r\n57 38 70 82  0\r\n53 81 32 35  3\r\n\r\n17 22 62 80 30\r\n8 28 15 42 46\r\n79 64 32 29 75\r\n5  0  9 90 69\r\n41 71 85  1  6\r\n\r\n68 89 40 31 39\r\n32 48 64 38 28\r\n80 98 88 14 97\r\n6 60 52 11 55\r\n95 34 63 81  4\r\n\r\n80 33 14 83 68\r\n78 69 81 59 15\r\n72  0 74 21 75\r\n49  6 67 73 64\r\n8 25 87  3 45\r\n\r\n34 97 86  1 79\r\n49 12 63 10 59\r\n88 30 84 74 87\r\n67 47 26  0 57\r\n71 40  2 76 98\r\n\r\n15 89 23 65 44\r\n27 87 54 38 12\r\n43 29 18 39 94\r\n48  0  7 57 61\r\n70 28 60 68 50\r\n\r\n13 34 49 67 40\r\n88 74 99 20 26\r\n63 69 62 24 32\r\n35 45 96 79  1\r\n92  7 17 76 30\r\n\r\n95 21 75 46 74\r\n39  7 58 23 90\r\n61 64 37 81 82\r\n92 36 54  9 53\r\n17 51 33 10 27\r\n\r\n67 35 44 22 23\r\n28 96  1 56 29\r\n0 12  5 50 99\r\n70 42  8 24 25\r\n39 53 51 89 85\r\n\r\n50 15 94 84 27\r\n72 26 51  3 85\r\n63 45  1 64 44\r\n17 80 13 88  2\r\n12 97 91 25 18\r\n\r\n59 14  9 67 63\r\n6 18 26 98 50\r\n86 74 75 56 34\r\n48  7 99 20 64\r\n8 53 10 15 57\r\n\r\n6 35 13 68 24\r\n90 19 91 71 86\r\n95 58 10 44 98\r\n8 41 60  1 16\r\n29 59 43 84 48\r\n\r\n48 56  8 74  4\r\n66 30 77 35 90\r\n94  0 75 49 84\r\n5 39 11 54 87\r\n33 58 96 22  2\r\n\r\n5 38 57 63 65\r\n74 58 22  8 81\r\n45 96 78  3 11\r\n28 42 30 39 51\r\n87 33 34 75 14\r\n\r\n56 34 67 70 17\r\n7 80 10 31 85\r\n68 59 63 74 40\r\n13 81 99 62  6\r\n92 84 71 37 39\r\n\r\n85 99 74 16 10\r\n12 21 91  2 83\r\n4 94 38 51 36\r\n41 97 45 65 24\r\n50 82 92 52 35\r\n\r\n28 65  6 13 23\r\n7 57 86 18 67\r\n26 85 29 22 89\r\n99 62 94 31 96\r\n14 17 50 56  9\r\n\r\n98 10 63  4  8\r\n46 21 58 89  3\r\n27 12 11 55 16\r\n61 38 43 33 54\r\n53 14 99 31 25\r\n\r\n25 70 24 40 14\r\n75 82 58 68 41\r\n22 71 72 93  1\r\n47 97  6 81 45\r\n92 42  2 76 12\r\n\r\n31 84 30  0 85\r\n55 70 72 45 57\r\n78 52 67 60 22\r\n43 32  8 44 34\r\n14 64 91 89 18\r\n\r\n70 19 62 16 56\r\n84 49 41  3 20\r\n85  5 76 95 22\r\n63 55 37 31 72\r\n42 17 28 65  1\r\n\r\n85 17 57 62 48\r\n34 29 69 52 28\r\n90 64 54 21 38\r\n0 50 84 44 60\r\n93 80 75 89 83\r\n\r\n39 84 78 12  5\r\n29  4 35  7 85\r\n73 25 58 27 45\r\n22 90 91 47 74\r\n60 96 15 24 26\r\n\r\n13 30 82 31 43\r\n23 71  1 51 36\r\n40 62 25 54 86\r\n8 83  2 47 34\r\n33 41 27 98 24\r\n\r\n13 25 53 50 56\r\n77  4 41 19 22\r\n68 70 75  9 65\r\n30 33 60 74 80\r\n31 83 34 79 11\r\n\r\n11 90 38 78 73\r\n17 16 14 37  4\r\n80 68 21 70 92\r\n47 26 81 67 25\r\n10 31 23 41 22\r\n\r\n90 62  2 50 79\r\n77 51  8 11 13\r\n32 29 43 88 33\r\n39 34 89 45 23\r\n91  9  6 68  3\r\n\r\n62 70 89 27 87\r\n45 65 96 80 29\r\n1 54 90 68 16\r\n72 50 28 95 12\r\n21 71 81 10 60\r\n\r\n33 14 60 44 78\r\n6 65 87 11  8\r\n79 21 59 35 19\r\n26 69 67 42 27\r\n25 36 80 10 45\r\n\r\n71 24 80 87 56\r\n7 61 43 38 18\r\n52 46 41 28 48\r\n0 74 20 34 63\r\n3 84 42 85  9\r\n\r\n36 64 41  7 49\r\n91 92 13 94 88\r\n73 98 79  0 12\r\n76 66 86 67  9\r\n2 85 74  5 34\r\n\r\n8 81  7 56 28\r\n36 13 42 29 75\r\n12 27 85 45  9\r\n26 25 62 41 22\r\n79 11 95  0 24\r\n\r\n72 76 81 67 16\r\n96 41 94 58  7\r\n0 79 38 27 11\r\n61 36 56 88 39\r\n89 63 31 75  8\r\n\r\n62 51  5 46 28\r\n77 97 89 86 13\r\n87 55 73 90 57\r\n84 44 40 49 34\r\n25  0 58  6 21\r\n\r\n7 56 15 41 94\r\n42 89 16 18 74\r\n57 79 96 35  3\r\n14 45 20 19 80\r\n87 85 28 69 17\r\n\r\n27 88 54 62 65\r\n44 93 69 13  9\r\n85 63 43 11 47\r\n83 57 30 20 56\r\n71 46 49  7 77\r\n\r\n45 24 75 39 69\r\n48 74 44 49 64\r\n65 25 22 46 93\r\n88 52 27 37 50\r\n19 35 47 54 67\r\n\r\n44 32 71 13 57\r\n7 38 26 98 65\r\n46  1 21  8 55\r\n30 62 92 27  3\r\n69 50 99 85 11\r\n\r\n86  6 64 34 97\r\n47 98  7 38  9\r\n26 68 75 92 54\r\n58 42 13 78 37\r\n85 28 81 16 51\r\n\r\n82 74 15  4 86\r\n55  0 70 88 24\r\n50 79 63 40 21\r\n47 39 61 49 36\r\n89 16 13  2 37\r\n\r\n89 19  9 82 13\r\n84 34 58 56 10\r\n27 92 46  4 94\r\n44 24 52 86 55\r\n39 23 22 99  5\r\n\r\n65 92  8 86 77\r\n98 79 72 28 78\r\n16 23  3 55 48\r\n68 95 66 30 43\r\n50 31 15 11 45\r\n\r\n32 70 25 59 31\r\n47 68 77 56 23\r\n66 78 54 88 50\r\n55 60 58 89 83\r\n84 99 86 97 95\r\n\r\n53 46  1 94 87\r\n8 80 38 77 81\r\n17 51 47 19 69\r\n86 50 71  5 93\r\n61 66 36 58  0\r\n\r\n90 58 17 29 92\r\n67  1  8 64 99\r\n63 22 57 19 68\r\n78 36 93 53  2\r\n27 48 62 39 14\r\n\r\n8 49 22 90 54\r\n26  4 99 27 34\r\n78 25 11 85 28\r\n31 42 36 53 15\r\n64 75 60 45 35\r\n\r\n99 84 26 53 90\r\n61 51 98 39 86\r\n47 37 52 80 63\r\n67 49 35 70 11\r\n32 45 94 73 43\r\n\r\n91 92 74 94 32\r\n27 56 50 33 54\r\n67 46 35 25 10\r\n93 97 30 90  4\r\n57 15 69 83 39\r\n\r\n71 68 74 81 11\r\n44 98 60 17 73\r\n43 40 32 38 39\r\n61 56 97 94 70\r\n23  2 86 91 54\r\n\r\n19 98 93 42 88\r\n0 16 30 32 71\r\n89 86 81 76 68\r\n29  2 14 72 63\r\n7 27 67 59  1\r\n\r\n24 18 28 98 95\r\n10 62 80 71 36\r\n3 89 20 63 46\r\n47 65 84 22  6\r\n82 19 81 38 45\r\n\r\n54 85 67 34 79\r\n25 58 38 73 61\r\n72 98  4 19 40\r\n32 10 29 31 89\r\n15 33  5  7 63\r\n\r\n49 48 71 81 88\r\n70  5 39 41 22\r\n19 20  7 75 23\r\n69 46 63 14 54\r\n80 45 94  6 55\r\n\r\n88 62 76 78 95\r\n64 65 36 58 22\r\n7 21 98 93 42\r\n79 99  9 89 10\r\n6  5 33 92 72`.split(\"\\n\")\r\n    );\r\n}\r\n"],"names":["$f5543be055ba0b53$export$bffa455ba8c619a6","arr","reduce","flat","toFlatten","concat","Array","isArray","$f5543be055ba0b53$export$afec9f0ab807abfa","acc","next","$3c8f1a1c09db7dbb$var$log","args","console","log","document","querySelector","innerHTML","join","$3c8f1a1c09db7dbb$var$getInput","length","$3c8f1a1c09db7dbb$var$getTESTInput","$3c8f1a1c09db7dbb$var$inputArr","$3c8f1a1c09db7dbb$var$checkRowsForBingo","guessedNumbers","board","filter","row","numInRow","includes","$3c8f1a1c09db7dbb$var$checkIfBingo","m","map","x1","i","x","$3c8f1a1c09db7dbb$var$findFirstBingoBoard","numbersLeftToGuess","numbersGuessed","boards","results","indexOf","slice","$3c8f1a1c09db7dbb$var$findLastBingoBoard","every","res","$3c8f1a1c09db7dbb$var$parsedInput","line","split","e","parseInt","push","$3c8f1a1c09db7dbb$var$resultObj","num","$3c8f1a1c09db7dbb$var$resultBObj"],"version":3,"file":"index.js.map"}