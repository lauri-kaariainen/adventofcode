{"mappings":"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","sources":["../../helpmodule.js","src/index.ts"],"sourcesContent":["const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\n\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst arrayRotateLeft = (arr) => (\n  arr.push(arr.shift()), arr\n);\nconst arrayRotateRight = (arr) => (\n  arr.unshift(arr.pop()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) =>\n  acc + next;\n\nconst reduceMultiply = (acc, next) =>\n  acc * next;\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\nfunction mostFrequentElems(array) {\n  const mostCommon = array\n    .filter(uniqueShallow)\n    .sort((a, b) =>\n      array\n        .filter(e => e === b).length - array.filter(e => e === a).length)[0];\n\n  const mostCommonLength =\n    array.filter(e => e === mostCommon).length\n\n  return array\n    .filter(e => array.filter(another => another === e).length === mostCommonLength)\n    .filter(uniqueShallow)\n}\n\nconst transpose = m => m[0].map((x, i) => m.map(x => x[i]))\n\n\nexport {\n  find4,\n  get8,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  arrayRotateLeft,\n  arrayRotateRight,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd,\n  mostFrequentElems,\n  transpose\n}","import { trampoline } from \"../../../helpmodule.js\";\r\nconsole.log(getInput().length);\r\nconsole.log(getTESTInput().length);\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined' && typeof (document) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\nconst testInputArr: string = getTESTInput();\r\nconst inputArr: string = getInput();\r\n\r\nconst findLows = (inputArr: number[][]) =>\r\n    inputArr.map((lineArr: number[], y: number, wholeArr: number[][]) =>\r\n        lineArr.map((num: number, x: number) => {\r\n            if (y === 0) {\r\n                if (x === 0) {\r\n                    return num < wholeArr[y][x + 1] && num < wholeArr[y + 1][x]\r\n                }\r\n                else if (x === lineArr.length - 1) {\r\n                    return num < wholeArr[y + 1][x] && num < wholeArr[y][x - 1]\r\n                }\r\n                else {\r\n                    return num < wholeArr[y + 1][x] && num < wholeArr[y][x - 1] && num < wholeArr[y][x + 1]\r\n                }\r\n            } else if (y === inputArr.length - 1) {\r\n                if (x === 0) {\r\n                    return num < wholeArr[y][x + 1] && num < wholeArr[y - 1][x]\r\n                }\r\n                else if (x === lineArr.length - 1) {\r\n                    return num < wholeArr[y - 1][x] && num < wholeArr[y][x - 1]\r\n                }\r\n                else {\r\n                    return num < wholeArr[y - 1][x] && num < wholeArr[y][x - 1] && num < wholeArr[y][x + 1]\r\n                }\r\n            }\r\n            else {\r\n                if (x === 0) {\r\n                    return num < wholeArr[y][x + 1] && num < wholeArr[y - 1][x] && num < wholeArr[y + 1][x]\r\n                }\r\n                else if (x === lineArr.length - 1) {\r\n                    return num < wholeArr[y][x - 1] && num < wholeArr[y + 1][x] && num < wholeArr[y - 1][x]\r\n                }\r\n                else {\r\n                    return num < wholeArr[y + 1][x] &&\r\n                        num < wholeArr[y][x - 1] &&\r\n                        num < wholeArr[y][x + 1] &&\r\n                        num < wholeArr[y - 1][x]\r\n                }\r\n            }\r\n\r\n        })\r\n    )\r\n\r\nconst floodFill = (inputArr: number[][], x: number, y: number, lastValue: number) => {\r\n    trampoline(fillRecursively(inputArr, x, y, lastValue))\r\n    return inputArr;\r\n}\r\n\r\nconst fillRecursively = (inputArr: number[][], x: number, y: number, lastValue: number) => {\r\n    // console.log(x, y, lastValue)\r\n    if (y < 0)\r\n        return;\r\n    if (x < 0)\r\n        return;\r\n    if (y === inputArr.length)\r\n        return;\r\n    if (x === inputArr[0].length)\r\n        return;\r\n    if (inputArr[y][x] === 9)\r\n        return;\r\n    if (inputArr[y][x] === -1)\r\n        return;\r\n    // console.log(\"continuing\")\r\n    if (inputArr[y][x] > lastValue)\r\n        inputArr[y][x] = -1;\r\n\r\n    return () => {\r\n\r\n        trampoline(fillRecursively(inputArr, x - 1, y, lastValue))\r\n        trampoline(fillRecursively(inputArr, x + 1, y, lastValue))\r\n        trampoline(fillRecursively(inputArr, x, y + 1, lastValue))\r\n        trampoline(fillRecursively(inputArr, x, y - 1, lastValue))\r\n    }\r\n}\r\n\r\n\r\nconst parseInput = (input: string): any =>\r\n    input\r\n        .split(\"\\n\")\r\n        .map(line => line.split(\"\").map((e: string): number => parseInt(e)))\r\n\r\n\r\nconst arrInUse =\r\n    getInput();\r\n\r\n\r\nconst lowsArr: boolean[][] =\r\n    findLows(parseInput(arrInUse))\r\n\r\n\r\nlog(\"a:\",\r\n    parseInput(arrInUse)\r\n        .flatMap((line: number[], y: number) =>\r\n            line.map((num: number, x: number): number | boolean => lowsArr[y][x] ? num : false))\r\n        .filter((num: boolean | number) => num !== false)\r\n        .map((e: number) => e + 1)\r\n        .reduce((acc: number, next: number) => acc + next, 0)\r\n\r\n)\r\nconst sizesOfFills: number[] = []\r\nlowsArr.forEach((line, y) =>\r\n    line.forEach((value, x) => {\r\n\r\n        if (value) {\r\n            const mutatingInput = parseInput(arrInUse)\r\n            floodFill(mutatingInput, x, y, mutatingInput[y][x])\r\n            mutatingInput[y][x] = -1;\r\n            sizesOfFills.push(\r\n                mutatingInput\r\n                    .map((line: number[]) =>\r\n                        line.reduce((acc, next) => next === -1 ? acc + 1 : acc, 0))\r\n                    .reduce((acc: number, next: number) => acc + next, 0))\r\n\r\n        }\r\n    }\r\n    ))\r\n\r\n\r\nlog(\"b:\",\r\n    sizesOfFills\r\n        .sort((a, b) => b - a)\r\n        .slice(0, 3)\r\n        .reduce((acc: number, next: number) => acc * next, 1)\r\n)\r\n\r\n\r\nfunction getTESTInput(): string {\r\n    return (\r\n        `2199943210\r\n3987894921\r\n9856789892\r\n8767896789\r\n9899965678`)\r\n}\r\n\r\nfunction getInput(): string {\r\n    return (\r\n\r\n        `9976557856799875679875642456989998767978931098989876587878999876565667896543210123567899876794310234\r\n8765432145789983989864321345978999954569532987679965426567899865423457899654329439698987665679442545\r\n9898553234567899898765432499767899895689549876567894312458998543212679998785698998999996543458953456\r\n8987668765679998769986753987656798799899698765456789101345697654323567899896797987899989542557894597\r\n7698778978895129954397864797543445678978939988367895212467899875534568999999986576789877410136789989\r\n7539989989943239865298985698432134799654329876238954324588921976646899889998765435698765321245695678\r\n4321398991294345976129876986553346999743219765359995435789890989887898767899754324569876434557894567\r\n9932357890989496987235999898764457898752102976998789756899789999999976556689865546894987678967942456\r\n7893459939878989998499989789898768987643244599896578997947567898899875434599986657975998989878921347\r\n6899978919965578999987875678999978998754395699789468998933458987798654323678998768976899293989842568\r\n5767899998764455899976534779899989329895989987685357999212347976539875435678929899987920191099754989\r\n4356899987643234789987413566789998912989879987531238994301656987645989596789434921098939989198769899\r\n3245689998432124568998302345678987893979769898750126789212797899787898989899865699999998878999898789\r\n4346897998543345689863212558789796999868757789942334599433458998999987778999976987899987657899987645\r\n6567976697654576797654323567896545987654645679643545678945579987899896569998989876999874545678998434\r\n7988965498865687899875434578987856998763238998759856789757899876798765378987898765689963234567894323\r\n8999654319976798967989565689498967899542127789898769898968989965669876567896439876799854355989995434\r\n9498765423498899656798779894329878998743235678999889967899877654554987678989321997898769866798789645\r\n4349876434599999348939889986445989999987345789998994457898766542443498799678934598969899877895678956\r\n3256987595989888999423994399578997879996568998987653216789654321012349896579949789345999989924569969\r\n4345698989865676789212349298999875457899689767499864434578975993153569965456898993234998999212479898\r\n9559899876543134694325498987899764345698797654398765675678999789234698543234567894399877787993998787\r\n7998942965421012349434997876798621234899999865239977788789987698946987652126989975989566546889876546\r\n6897891977632163768949876565689540135679998752145698899898776587799998763234991099877452335679985434\r\n5956789876543245689769954434578932348799989543234999954987654465688999954756789198765321025899974323\r\n3347979997659456789898743125567896556999878956399876743498943334567899975678998989876432134679765434\r\n1234567998767768999987659012389987669898767898989954342349832123479999876989546976987563245678976755\r\n3569678969889879898998798923568998798789659999969895201298753334567891987895439765987675656789988767\r\n4678989657996998787899987894567999979678945899756789212459896567978953998998598654399899777893299878\r\n6989298743235987656799986789789398768599434698645698924599987798989769869897698765478967989965459989\r\n7892019651019876545899875678990239843489321986534567895989998939599898756789999896569546599996598796\r\n8989198772124985434599989889789349652578999898423498999878989012399999646796899997678933498989697654\r\n9678949989234997523678992997678998543456789789212349898956578993989898731234679998989321987679798793\r\n3568931098949886212789751034567987654567898698901298797543499989876789820124567899999910199568999989\r\n8689543987898775102457942123457998865689965457992999697621989875465698931435789967989891398459999876\r\n8797699876987654323568943234567989976799954354989876543210178954324987892387991349877689987378989765\r\n9898987654599875464899754345789876988898890123976998679633267893219876789998910598765578996569876543\r\n3979998943456987596789965956899965499997689359895679798545456789439765676789321679654356987679987654\r\n4568989894569998687892979877919894345986478998654567987656567996598754355698945998543245699789999765\r\n5699876795678969788921989989109789499894351989743456798767678987987643234567899876542123479899987976\r\n6989965689789459899542498999998678987643210578932345679878789898998792123676899965432014567929876987\r\n9976864578994344989656987999876534987654592469321236789989899789329989012345789987843123458912965698\r\n8985923467890123478968976899987621298766784578910123499993998543219879193456891298954434568929894569\r\n7654312356921354567899865678998542379879897699321234568932987654598768989569910129865677679998643459\r\n7842101239892465679999654567999653457989989789432545699653998767697657978978923457978788989998764578\r\n6543214356789568799998732356899764568997679896543756789979899879898744567899944767989899899899865789\r\n7654525487897689899876420124678975789996431997679898898998799989999932978967899988999987678789977897\r\n8775686598979799998765431285789996799987549989989989957899678994598763799545988999129876567698998956\r\n9989887679865988999896542376798987899999698777899976546789569965699854678934567898999865466567899349\r\n5698998989534567998987664567987699988931987656789988723499439876989965799123698987689654315456791298\r\n4567899998676979887699775679999532167899894345678999834568921989879876893244569754598765402367893987\r\n5989989769989897654545986799898954358998765456789321946789910198765987894997689643459897514589999996\r\n6795678999998796543235697998767895469999876567898943497899891987654598999889789652667959776689898987\r\n7894569878997689632123998989656976979981987698967964598998789999743459987679997543489542987896797699\r\n8932398767586579743434899978945897898870198799459895799878689998432369876568898764678931099945689431\r\n9543987656323489854575698656934789987653239912349789987964567896543498967456789898799992998756797210\r\n8665796546212349965689987545895678999795356799498678986543456989654987652345891949898789899898965423\r\n9976987632101467896798554436789789439896987898987567965432345678969887431337990134987678789969876675\r\n5698999543232345697987432124592995423997999967896459876521256899998776210126789999876598689756989776\r\n3569898674346556789996549036693987549979323456789345987432768999987654321234598789989434568934595987\r\n8698798765456687899989698945789999798765444578993234896545679988798765438756789578998623457899694598\r\n9987659878767798999878987957897889999879556989654346798959899976549887659867895489876534669998989999\r\n5699845989979899298767896898986578998989669998765457899767999895326998767998965345997645978987767899\r\n4987631296989932109656355789975467987898798889976769979978998789435679878999879469998756789896646789\r\n3986542345698654998743234678954389876569897679899878967989877698945797989999998998999867898765434890\r\n4987653457789799775810124589643298765456986565678989556299956567896896599878987887899998929854324691\r\n5698767878892987654321238899955129892349876464899995432198843477897999323459765676998799013992013989\r\n9979878989991098775543646789876399989498765343487896546297652346969788912399834345899695324989329978\r\n8767989796789989987655757899987988678997654212346797757986543457956567893987321256789589439878998967\r\n7656896545678976598866869998999876512987654301237898868997654579544456789875452387893478998767987656\r\n9738998437899865329877978956798765433496543212578999978998785989432345678986563598954567969659876544\r\n7629689545678974310989989432349986595987854323456893989129896792101567899997654569767679854546985433\r\n5434578959899765451398996545689597689898965454578912494298987893243459998999867689978898763434599212\r\n6545789767953986532567987856789498798769976579789894999987998954956598787895979799989987662125988301\r\n7856892979892397645698998969892359989656797679896799898976569879897987676796989999699876543019876312\r\n8769921989799498776789569878999459876545798789945698787895456999769876585689999998567987653236995423\r\n9878932998688999987893499989698998765434989890199987656965345987656987434567899876439798765345986564\r\n8989549876567896898992989796587899987325679931987654545893239876545987323489910987649649976456798775\r\n7497657988456954559789876572456799875456789899996543236789129766434596544595439998798432989987899889\r\n6569878999567893245699798341248678999578998658789654127679297654323987965689598999897521299999998996\r\n7698989998688932134987653210234569878989876545699943234568979865434899878799987899995439988913987895\r\n9987699889799541035699654321234698767999985435567899545678956976645789989899876789987598877894996654\r\n9876597679899432123498765452345987656899876423456998757789349798756892193998765679398697656999875443\r\n3987986546998543234679876743456797645799989910287899768996298659977891012989324589219987647899954321\r\n2199977634987657845789998754567988534678999891235989879765498843298932229876434695456898729999765210\r\n3398965420199789657893198766678976323459998789345678989879987654129646547986565789667999835798754321\r\n9987896554239898768999019897789875212345987698969799596997698865439897656798779899989989545679865432\r\n8766799669999929879198998998898984303459876567998999435989539976545998767899889999998978957999877545\r\n9954678998789012989297897549957895212569865456897678949878920987676999878942999987987569998910987696\r\n8765789654699123499986789321245987823498754349976577898769891398987898989656789876643468999699998989\r\n9986898943488939698765698932359876437987653298765456789655789459598976499867898765432127896587899878\r\n9998956732367898998983567893467987545698732129954398998744568969329995354978999865321056789456798769\r\n9899542101456997997542456789579998957789821019894289987623458978910989212989899976435145699212977556\r\n8789653212568976987631345997698999998997932198743168976545667899999878901296789997543234578909865445\r\n7698765333457895798545456789997899899876544987654347897996778921987767892345789898654357678998754323\r\n6549896544679934679656768999876585799987865699765756789889889899876645789556798798765468999698768210\r\n5431987758989124569867989799975464689999976899879867895678996799865434678967987679987689996569989432\r\n3210198767891012679878995689864343457998987987989879924899345679876656989979897565699998989432399553\r\n4523459898942123789989987897653212346897598995498989215679234578988767993298769434569876578941498764\r\n6735568999643445678990198987543203567965439875357894326789146678999879754579854325678998459653459895`\r\n    );\r\n}\r\n"],"names":["$f5543be055ba0b53$export$6f2c20d74ce07f43","fn","$3c8f1a1c09db7dbb$var$log","args","console","document","log","querySelector","innerHTML","join","$3c8f1a1c09db7dbb$var$getInput","length","$3c8f1a1c09db7dbb$var$getTESTInput","$3c8f1a1c09db7dbb$var$fillRecursively","inputArr","x","y","lastValue","$3c8f1a1c09db7dbb$var$parseInput","input","split","map","line","e","parseInt","$3c8f1a1c09db7dbb$var$arrInUse","$3c8f1a1c09db7dbb$var$lowsArr","lineArr","wholeArr","num","flatMap","filter","reduce","acc","next","$3c8f1a1c09db7dbb$var$sizesOfFills","forEach","line1","value","mutatingInput","$3c8f1a1c09db7dbb$var$floodFill","push","sort","a","b","slice"],"version":3,"file":"index.js.map"}