{"mappings":"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","sources":["../../helpmodule.js","src/index.ts"],"sourcesContent":["const find4 = (x, y, matrix, wantedChar) => {\n  wantedChar = wantedChar || 1;\n  let returnable = [];\n  if (x > 0 && x < matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === 0) {\n    matrix[y][x + 1] === wantedChar\n      ? returnable.push({x: x + 1, y: y})\n      : false;\n  } else if (x === matrix[y].length - 1) {\n    matrix[y][x - 1] === wantedChar\n      ? returnable.push({x: x - 1, y: y})\n      : false;\n  }\n  if (y > 0 && y < matrix.length - 1) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  } else if (y === 0) {\n    matrix[y + 1][x] === wantedChar\n      ? returnable.push({x: x, y: y + 1})\n      : false;\n  } else if (y === matrix.length - 1) {\n    matrix[y - 1][x] === wantedChar\n      ? returnable.push({x: x, y: y - 1})\n      : false;\n  }\n  return returnable;\n};\n\nconst get8 = (x, y, matrix) => {\n  const positions = [\n    {y: y - 1, x: x - 1},\n    {y: y - 1, x: x},\n    {y: y - 1, x: x + 1},\n    {y: y, x: x + 1},\n    {y: y + 1, x: x + 1},\n    {y: y + 1, x: x},\n    {y: y + 1, x: x - 1},\n    {y: y, x: x - 1},\n  ]\n  const returnable = [];\n  positions.forEach(pos =>\n    matrix[pos.y] === undefined ? \"\" :\n      matrix[pos.y][pos.x] === undefined ? \"\" :\n        returnable\n          .push(matrix[pos.y][pos.x]));\n  return returnable;\n}\n\n\n\nconst num2letter = chr => String.fromCharCode(97 + chr);\n\nconst hex2bin = (hex, nulls) => {\n  const nullAmount = nulls || 4;\n  return (\n    [...Array(nullAmount)].map(e => \"0\").join(\"\") +\n    parseInt(hex, 16).toString(2)\n  ).substr(-nullAmount);\n};\n\nconst num2hex = num => num.toString(16);\n\nconst dec2bin = num => (num >>> 0).toString(2)\n\nconst bin2dec = binary => parseInt(binary, 2);\n\nconst swapPositions = (arr, index1, index2) => (\n  //console.log(arr, index1, index2),\n  ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]), arr\n);\n\nconst insertValueAtMutating = (arr, index, newValue) => {\n  arr\n    .splice(index, 1, newValue);\n  // .map(e => e.map ? e.map(i => i) : e) //clone\n  return arr\n}\n\nconst arrayRotate = (arr, reverse) => (\n  reverse ? arr.unshift(arr.pop()) : arr.push(arr.shift()), arr\n);\n\nconst arrayRotateLeft = (arr) => (\n  arr.push(arr.shift()), arr\n);\nconst arrayRotateRight = (arr) => (\n  arr.unshift(arr.pop()), arr\n);\n\nconst trampoline = fn => {\n  while (typeof fn === \"function\") {\n    fn = fn();\n  }\n  return fn;\n};\n\nconst uniqueShallow = (item, i, arr) => !arr.slice(i + 1).includes(item);\n\nconst uniqueDeep = (item, i, arr) =>\n  !arr\n    .slice(i + 1)\n    .some(other => JSON.stringify(other) === JSON.stringify(item));\n\nconst combineMatrices = (larger, smaller) =>\n  larger\n    //clone\n    .map(e => e.map(i => i))\n    .map((largerLine, lineNum) => {\n      const startPoint = Math.floor(\n        (largerLine.length - smaller[0].length) / 2\n      );\n      if (lineNum >= startPoint && lineNum < larger.length - startPoint) {\n        return largerLine.map((char, charNum) => {\n          if (\n            charNum >= startPoint &&\n            charNum < largerLine.length - startPoint\n          ) {\n            return smaller[lineNum - startPoint][charNum - startPoint];\n          } else {\n            return char;\n          }\n        });\n      } else {\n        return largerLine;\n      }\n    });\n\nconst flatten = arr =>\n  arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\nconst insert = function (array, i, ...rest) {\n  return array.slice(0, i).concat(rest, array.slice(i));\n}\n\nconst reduceSum = (acc, next) =>\n  acc + next;\n\nconst reduceMultiply = (acc, next) =>\n  acc * next;\n\nconst reduceFlatten = (acc, next) =>\n  acc.concat(next);\n\n\nconst permutations = xs => {\n  let ret = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    let rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]])\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]))\n      }\n    }\n  }\n  return ret;\n}\n\nconst returnUniqueAmountsAsObj = array =>\n  array.reduce((acc, val) => {  //amounts as an object\n    acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n    return acc;\n  }, {});\n\nconst betweenOrEqual = (number, min, max) =>\n  number >= min && number <= max\n\nfunction gcd2(a, b) {\n  // Greatest common divisor of 2 integers\n  if (!b) return b === 0 ? a : NaN;\n  return gcd2(b, a % b);\n}\nfunction gcd(array) {\n  // Greatest common divisor of a list of integers\n  var n = 0;\n  for (var i = 0; i < array.length; ++i)\n    n = gcd2(array[i], n);\n  return n;\n}\nfunction lcm2(a, b) {\n  // Least common multiple of 2 integers\n  return a * b / gcd2(a, b);\n}\nfunction lcm(array) {\n  // Least common multiple of a list of integers\n  var n = 1;\n  for (var i = 0; i < array.length; ++i)\n    n = lcm2(array[i], n);\n  return n;\n}\nfunction mostFrequentElems(array) {\n  const mostCommon = array\n    .filter(uniqueShallow)\n    .sort((a, b) =>\n      array\n        .filter(e => e === b).length - array.filter(e => e === a).length)[0];\n\n  const mostCommonLength =\n    array.filter(e => e === mostCommon).length\n\n  return array\n    .filter(e => array.filter(another => another === e).length === mostCommonLength)\n    .filter(uniqueShallow)\n}\n\nconst transpose = m => m[0].map((x, i) => m.map(x => x[i]))\n\n\nexport {\n  find4,\n  get8,\n  num2letter,\n  hex2bin,\n  num2hex,\n  dec2bin,\n  bin2dec,\n  swapPositions,\n  insertValueAtMutating,\n  arrayRotate,\n  arrayRotateLeft,\n  arrayRotateRight,\n  trampoline,\n  uniqueShallow,\n  uniqueDeep,\n  combineMatrices,\n  flatten,\n  insert,\n  reduceSum,\n  reduceMultiply,\n  reduceFlatten,\n  permutations,\n  returnUniqueAmountsAsObj,\n  betweenOrEqual,\n  lcm,\n  gcd,\n  mostFrequentElems,\n  transpose\n}","import { trampoline, flatten, returnUniqueAmountsAsObj } from \"../../../helpmodule.js\";\r\nconsole.log(getInput().length);\r\nconsole.log(getTESTInput().length);\r\n\r\nfunction log(...args: any[]): void {\r\n    if (typeof (console) !== 'undefined') {\r\n        console.log(...args);\r\n        document.querySelector('pre')!.innerHTML += \"<br/>\" + args.join(\" \");\r\n    }\r\n}\r\n\r\nconst testInputArr: string[] = getTESTInput();\r\nconst inputArr: string[] = getInput();\r\n\r\n\r\n\r\nconst parseInput = (arr: string[]): { origin: { x: number, y: number }, target: { x: number, y: number } }[] =>\r\n    arr.map((line: string) => {\r\n        const matches = line.match(/(\\d+),(\\d+) -> (\\d+),(\\d+)/)\r\n        return ({\r\n            origin: { x: parseInt(matches![1]), y: parseInt(matches![2]) },\r\n            target: { x: parseInt(matches![3]), y: parseInt(matches![4]) },\r\n        })\r\n    })\r\n\r\nconst getPointsBetweenCoordinates = (\r\n    origin: { x: number, y: number },\r\n    target: { x: number, y: number },\r\n    points: { x: number, y: number }[] = []): any => {\r\n    const copyorigin = JSON.parse(JSON.stringify(origin))\r\n    if (points.length > 1000) {\r\n        console.warn(\"force stopped loop, probably not correct answer\")\r\n        return points;\r\n    }\r\n    if (!points.length)\r\n        points.push(origin)\r\n    // console.log(points.map(p => p.x + \",\" + p.y).join(\"\\n\"))\r\n    if (copyorigin.x === target.x) {\r\n        if (copyorigin.y === target.y) {\r\n            return points\r\n        }\r\n        else if (copyorigin.y < target.y) {\r\n            points.push({ x: copyorigin.x, y: copyorigin.y + 1 });\r\n            copyorigin.y++\r\n        }\r\n        else {\r\n            points.push({ x: copyorigin.x, y: copyorigin.y - 1 });\r\n            copyorigin.y--\r\n        }\r\n    } else if (copyorigin.y === target.y) {\r\n        if (copyorigin.x === target.x) points.push(target)\r\n        else if (copyorigin.x < target.x) {\r\n            points.push({ x: copyorigin.x + 1, y: copyorigin.y });\r\n            copyorigin.x++\r\n        }\r\n        else {\r\n            points.push({ x: copyorigin.x - 1, y: copyorigin.y });\r\n            copyorigin.x--\r\n        }\r\n    }\r\n    else if (copyorigin.x < target.x && copyorigin.y < target.y) {\r\n\r\n        points.push({ x: copyorigin.x + 1, y: copyorigin.y + 1 })\r\n        copyorigin.x++; copyorigin.y++;\r\n    }\r\n    else if (copyorigin.x < target.x && copyorigin.y > target.y) {\r\n\r\n        points.push({ x: copyorigin.x + 1, y: copyorigin.y - 1 })\r\n        copyorigin.x++; copyorigin.y--;\r\n    }\r\n    else if (copyorigin.x > target.x && copyorigin.y > target.y) {\r\n\r\n        points.push({ x: copyorigin.x - 1, y: copyorigin.y - 1 })\r\n        copyorigin.x--; copyorigin.y--;\r\n    }\r\n    else if (copyorigin.x > target.x && copyorigin.y < target.y) {\r\n\r\n        points.push({ x: copyorigin.x - 1, y: copyorigin.y + 1 })\r\n        copyorigin.x--; copyorigin.y++;\r\n    }\r\n    return () => getPointsBetweenCoordinates(\r\n        copyorigin, target, points\r\n    )\r\n}\r\n\r\n\r\nconst arrInUse = inputArr;\r\n\r\nlog(\"a:\",\r\n\r\n    Object.values(\r\n\r\n        returnUniqueAmountsAsObj(\r\n\r\n            flatten(\r\n\r\n                parseInput(\r\n                    arrInUse)\r\n                    .filter(\r\n                        (ventPoints: any) =>\r\n                            ventPoints.origin.x === ventPoints.target.x ||\r\n                            ventPoints.origin.y === ventPoints.target.y\r\n                    )\r\n                    .map((ventPoints: any) =>\r\n                        trampoline(getPointsBetweenCoordinates(ventPoints.origin, ventPoints.target))\r\n                    )\r\n            )\r\n                .map((obj: any) => obj.x + \",\" + obj.y)\r\n        )\r\n    )\r\n        .filter((amount: any) => amount > 1)\r\n        .length\r\n\r\n)\r\n\r\nlog(\"b:\",\r\n\r\n    Object.values(\r\n\r\n        returnUniqueAmountsAsObj(\r\n\r\n            flatten(\r\n\r\n                parseInput(\r\n                    arrInUse)\r\n                    .map((ventPoints: any) =>\r\n                        trampoline(getPointsBetweenCoordinates(ventPoints.origin, ventPoints.target))\r\n                    )\r\n            )\r\n                .map((obj: any) => obj.x + \",\" + obj.y)\r\n        )\r\n    )\r\n        .filter((amount: any) => amount > 1)\r\n        .length\r\n\r\n)\r\n\r\n\r\nfunction getTESTInput(): string[] {\r\n    return (\r\n        `0,9 -> 5,9\r\n8,0 -> 0,8\r\n9,4 -> 3,4\r\n2,2 -> 2,1\r\n7,0 -> 7,4\r\n6,4 -> 2,0\r\n0,9 -> 2,9\r\n3,4 -> 1,4\r\n0,0 -> 8,8\r\n5,5 -> 8,2`.split(\"\\n\"))\r\n}\r\n\r\nfunction getInput(): string[] {\r\n    return (\r\n\r\n        `556,286 -> 341,71\r\n337,201 -> 782,646\r\n786,780 -> 117,111\r\n977,864 -> 199,86\r\n544,127 -> 544,144\r\n539,471 -> 539,972\r\n364,765 -> 364,285\r\n282,325 -> 892,935\r\n536,941 -> 158,941\r\n280,39 -> 806,565\r\n168,662 -> 363,857\r\n639,676 -> 639,701\r\n397,809 -> 466,809\r\n716,118 -> 625,209\r\n153,582 -> 497,926\r\n35,706 -> 398,706\r\n61,41 -> 519,41\r\n158,557 -> 158,922\r\n320,177 -> 624,481\r\n800,779 -> 466,779\r\n292,270 -> 292,497\r\n919,17 -> 757,17\r\n935,520 -> 935,688\r\n948,480 -> 303,480\r\n306,811 -> 306,467\r\n227,582 -> 464,819\r\n757,807 -> 757,688\r\n983,12 -> 30,965\r\n632,262 -> 640,262\r\n755,314 -> 138,931\r\n179,599 -> 179,144\r\n556,246 -> 801,491\r\n114,218 -> 114,60\r\n183,70 -> 423,70\r\n561,661 -> 231,331\r\n875,738 -> 723,890\r\n812,828 -> 812,78\r\n98,707 -> 88,707\r\n804,979 -> 188,979\r\n503,178 -> 453,178\r\n902,678 -> 248,678\r\n603,618 -> 737,752\r\n788,735 -> 559,964\r\n839,134 -> 839,408\r\n569,356 -> 491,356\r\n566,543 -> 566,77\r\n624,386 -> 111,386\r\n781,109 -> 781,52\r\n187,709 -> 23,545\r\n220,123 -> 856,123\r\n210,528 -> 398,716\r\n942,935 -> 58,51\r\n102,13 -> 102,560\r\n926,588 -> 969,545\r\n529,117 -> 146,117\r\n989,211 -> 739,461\r\n207,201 -> 207,106\r\n799,876 -> 284,876\r\n370,773 -> 687,456\r\n571,972 -> 571,351\r\n877,910 -> 877,12\r\n384,205 -> 384,940\r\n493,915 -> 912,496\r\n764,412 -> 368,16\r\n368,220 -> 333,220\r\n526,271 -> 778,271\r\n379,203 -> 417,165\r\n168,577 -> 168,709\r\n529,808 -> 598,739\r\n959,506 -> 959,626\r\n576,89 -> 863,89\r\n277,412 -> 311,378\r\n12,19 -> 975,982\r\n620,951 -> 240,571\r\n937,206 -> 954,206\r\n231,177 -> 918,864\r\n499,825 -> 315,825\r\n289,876 -> 289,302\r\n408,569 -> 46,207\r\n461,838 -> 91,838\r\n281,294 -> 281,737\r\n61,541 -> 61,747\r\n768,857 -> 768,276\r\n782,97 -> 33,97\r\n544,563 -> 251,856\r\n731,216 -> 731,19\r\n767,142 -> 242,667\r\n469,612 -> 952,129\r\n508,363 -> 508,540\r\n614,845 -> 614,739\r\n342,362 -> 235,362\r\n880,703 -> 880,653\r\n942,669 -> 651,669\r\n884,976 -> 884,924\r\n158,822 -> 945,35\r\n510,716 -> 884,342\r\n523,946 -> 73,496\r\n334,430 -> 157,253\r\n593,77 -> 105,565\r\n269,132 -> 243,132\r\n902,529 -> 180,529\r\n554,767 -> 554,938\r\n164,615 -> 425,615\r\n51,713 -> 51,341\r\n428,606 -> 89,945\r\n600,402 -> 600,185\r\n774,550 -> 774,207\r\n465,204 -> 697,436\r\n577,719 -> 255,719\r\n647,990 -> 970,990\r\n649,170 -> 886,407\r\n428,503 -> 428,394\r\n381,608 -> 381,444\r\n778,175 -> 778,121\r\n795,379 -> 379,379\r\n929,792 -> 218,81\r\n504,837 -> 504,449\r\n212,216 -> 212,76\r\n446,744 -> 446,116\r\n824,247 -> 577,247\r\n77,214 -> 553,214\r\n913,234 -> 913,670\r\n949,24 -> 43,930\r\n733,758 -> 733,62\r\n628,659 -> 962,659\r\n172,749 -> 755,749\r\n901,717 -> 184,717\r\n457,578 -> 923,112\r\n943,11 -> 912,11\r\n728,597 -> 116,597\r\n465,134 -> 465,159\r\n170,953 -> 170,533\r\n231,715 -> 231,219\r\n209,187 -> 984,962\r\n798,515 -> 798,601\r\n479,123 -> 479,148\r\n360,387 -> 360,356\r\n962,818 -> 962,770\r\n852,607 -> 852,886\r\n159,838 -> 967,30\r\n823,659 -> 642,478\r\n374,893 -> 545,893\r\n248,819 -> 248,978\r\n894,473 -> 894,47\r\n182,975 -> 278,879\r\n75,248 -> 913,248\r\n969,533 -> 969,827\r\n18,40 -> 842,864\r\n972,909 -> 220,157\r\n378,159 -> 571,159\r\n875,478 -> 238,478\r\n95,807 -> 264,638\r\n418,68 -> 418,387\r\n784,548 -> 332,548\r\n365,354 -> 365,836\r\n731,615 -> 235,615\r\n885,104 -> 513,476\r\n816,47 -> 385,478\r\n626,741 -> 626,499\r\n371,372 -> 920,921\r\n83,150 -> 922,989\r\n623,520 -> 645,498\r\n612,305 -> 561,305\r\n845,149 -> 788,149\r\n914,35 -> 829,35\r\n143,165 -> 143,520\r\n164,218 -> 266,218\r\n118,644 -> 397,644\r\n59,942 -> 970,31\r\n616,774 -> 970,420\r\n30,468 -> 874,468\r\n454,208 -> 454,536\r\n524,488 -> 524,931\r\n54,479 -> 560,479\r\n815,591 -> 815,813\r\n959,971 -> 30,42\r\n23,181 -> 149,181\r\n841,294 -> 841,681\r\n34,47 -> 367,47\r\n913,590 -> 913,374\r\n690,64 -> 690,672\r\n541,112 -> 781,112\r\n380,843 -> 687,536\r\n303,330 -> 465,330\r\n408,403 -> 326,403\r\n352,962 -> 925,389\r\n121,882 -> 873,130\r\n979,294 -> 29,294\r\n228,688 -> 228,738\r\n845,930 -> 901,930\r\n726,189 -> 27,888\r\n223,888 -> 989,888\r\n483,632 -> 483,321\r\n606,810 -> 820,810\r\n225,31 -> 225,342\r\n841,18 -> 841,417\r\n375,185 -> 375,413\r\n641,189 -> 307,523\r\n126,900 -> 126,990\r\n530,220 -> 690,220\r\n496,263 -> 154,263\r\n140,503 -> 419,503\r\n349,733 -> 349,819\r\n43,29 -> 928,914\r\n683,842 -> 683,489\r\n113,634 -> 806,634\r\n771,145 -> 130,145\r\n88,467 -> 908,467\r\n328,642 -> 328,795\r\n986,191 -> 218,959\r\n857,166 -> 857,594\r\n950,763 -> 229,42\r\n263,940 -> 101,940\r\n689,182 -> 689,835\r\n241,237 -> 733,237\r\n965,150 -> 279,150\r\n871,242 -> 474,639\r\n688,947 -> 688,11\r\n319,738 -> 945,112\r\n21,853 -> 853,21\r\n69,533 -> 69,741\r\n492,981 -> 492,210\r\n942,69 -> 249,69\r\n63,364 -> 203,364\r\n340,505 -> 15,505\r\n41,43 -> 979,981\r\n395,623 -> 217,801\r\n540,37 -> 540,381\r\n64,112 -> 882,930\r\n887,212 -> 217,882\r\n168,159 -> 108,159\r\n117,22 -> 959,864\r\n413,500 -> 413,616\r\n775,597 -> 962,597\r\n171,901 -> 143,901\r\n777,391 -> 41,391\r\n901,139 -> 70,970\r\n215,75 -> 215,261\r\n973,433 -> 786,433\r\n757,568 -> 612,423\r\n363,347 -> 185,525\r\n274,363 -> 274,709\r\n435,569 -> 880,569\r\n267,297 -> 86,478\r\n221,852 -> 985,88\r\n322,560 -> 322,962\r\n470,259 -> 470,508\r\n861,860 -> 843,860\r\n172,474 -> 172,714\r\n53,839 -> 499,839\r\n600,40 -> 600,227\r\n820,952 -> 99,231\r\n650,486 -> 586,486\r\n305,273 -> 305,392\r\n826,417 -> 826,92\r\n309,934 -> 309,720\r\n381,644 -> 381,623\r\n38,78 -> 38,54\r\n326,450 -> 173,450\r\n474,100 -> 474,135\r\n607,536 -> 192,121\r\n686,504 -> 164,504\r\n538,623 -> 429,623\r\n200,385 -> 933,385\r\n568,275 -> 31,275\r\n105,201 -> 706,201\r\n582,584 -> 827,584\r\n24,469 -> 24,519\r\n306,224 -> 32,224\r\n429,528 -> 304,528\r\n272,851 -> 272,927\r\n636,113 -> 636,244\r\n481,107 -> 783,107\r\n834,87 -> 175,746\r\n684,50 -> 61,673\r\n30,335 -> 739,335\r\n621,893 -> 266,893\r\n968,942 -> 968,390\r\n895,23 -> 136,23\r\n742,650 -> 756,636\r\n42,582 -> 368,582\r\n890,266 -> 786,266\r\n591,807 -> 921,807\r\n915,333 -> 915,160\r\n746,326 -> 826,326\r\n663,803 -> 34,174\r\n533,513 -> 692,513\r\n205,133 -> 935,133\r\n730,138 -> 58,810\r\n290,87 -> 290,488\r\n693,513 -> 693,323\r\n188,491 -> 188,587\r\n562,593 -> 562,122\r\n629,457 -> 629,299\r\n132,781 -> 381,781\r\n356,965 -> 356,899\r\n720,715 -> 487,715\r\n356,120 -> 954,120\r\n657,507 -> 323,173\r\n13,190 -> 742,190\r\n677,640 -> 491,640\r\n145,605 -> 366,605\r\n143,683 -> 681,145\r\n700,787 -> 557,787\r\n958,406 -> 212,406\r\n267,734 -> 705,734\r\n470,333 -> 257,120\r\n790,656 -> 523,389\r\n13,904 -> 898,19\r\n29,970 -> 961,38\r\n846,454 -> 846,153\r\n564,488 -> 98,488\r\n904,19 -> 60,863\r\n493,112 -> 472,133\r\n945,977 -> 141,173\r\n720,231 -> 720,367\r\n783,133 -> 783,422\r\n165,754 -> 165,604\r\n752,308 -> 715,271\r\n413,969 -> 431,951\r\n833,437 -> 833,881\r\n612,802 -> 612,64\r\n974,187 -> 543,618\r\n655,183 -> 675,183\r\n696,833 -> 906,623\r\n756,792 -> 756,741\r\n338,140 -> 878,680\r\n854,955 -> 241,342\r\n602,466 -> 326,466\r\n470,125 -> 464,131\r\n568,141 -> 43,666\r\n826,318 -> 783,275\r\n194,986 -> 194,466\r\n896,330 -> 621,55\r\n482,709 -> 704,931\r\n345,912 -> 345,741\r\n758,119 -> 758,841\r\n11,777 -> 11,249\r\n88,945 -> 795,945\r\n665,74 -> 124,615\r\n243,831 -> 249,837\r\n40,69 -> 720,749\r\n757,804 -> 757,900\r\n803,265 -> 336,732\r\n299,155 -> 758,614\r\n787,173 -> 172,788\r\n251,400 -> 251,168\r\n217,480 -> 486,480\r\n939,974 -> 21,56\r\n767,649 -> 378,649\r\n197,764 -> 561,400\r\n767,577 -> 579,577\r\n952,982 -> 28,58\r\n282,527 -> 282,640\r\n944,125 -> 184,125\r\n149,848 -> 351,848\r\n36,437 -> 350,437\r\n63,527 -> 764,527\r\n66,313 -> 302,549\r\n805,485 -> 577,485\r\n660,626 -> 903,626\r\n927,542 -> 897,542\r\n577,344 -> 577,934\r\n624,284 -> 624,497\r\n649,618 -> 153,122\r\n942,32 -> 227,747\r\n10,190 -> 10,629\r\n84,638 -> 470,252\r\n362,89 -> 362,762\r\n351,844 -> 916,279\r\n683,561 -> 497,747\r\n628,473 -> 103,473\r\n319,525 -> 782,62\r\n842,131 -> 551,131\r\n980,960 -> 51,31\r\n662,12 -> 666,12\r\n337,814 -> 337,736\r\n720,99 -> 760,99\r\n867,515 -> 867,650\r\n248,872 -> 142,872\r\n295,274 -> 298,274\r\n102,369 -> 102,648\r\n523,142 -> 54,611\r\n369,798 -> 978,189\r\n215,688 -> 835,688\r\n846,242 -> 786,182\r\n68,923 -> 68,342\r\n690,416 -> 559,547\r\n567,134 -> 278,134\r\n89,126 -> 846,883\r\n779,325 -> 389,325\r\n675,461 -> 675,622\r\n278,925 -> 953,250\r\n907,460 -> 519,848\r\n769,60 -> 592,60\r\n331,103 -> 331,49\r\n148,366 -> 148,516\r\n933,52 -> 332,52\r\n488,642 -> 488,523\r\n632,403 -> 83,952\r\n321,840 -> 756,405\r\n302,627 -> 907,22\r\n650,449 -> 650,553\r\n219,466 -> 219,297\r\n841,947 -> 78,184\r\n40,746 -> 712,74\r\n559,306 -> 895,306\r\n317,592 -> 317,275\r\n267,183 -> 267,428\r\n43,397 -> 43,359\r\n952,705 -> 952,634\r\n921,837 -> 258,174\r\n634,783 -> 656,805\r\n366,309 -> 224,309\r\n383,470 -> 526,613\r\n717,419 -> 717,332\r\n543,752 -> 543,500\r\n954,892 -> 101,39\r\n294,379 -> 583,379\r\n829,388 -> 829,491\r\n748,509 -> 283,509\r\n347,75 -> 467,195\r\n618,958 -> 371,711\r\n986,827 -> 213,54\r\n34,617 -> 982,617\r\n716,902 -> 716,429\r\n970,52 -> 107,915\r\n563,33 -> 563,680\r\n803,82 -> 136,749\r\n24,968 -> 273,968\r\n816,483 -> 620,287\r\n783,588 -> 623,588\r\n397,210 -> 988,801\r\n911,387 -> 911,446\r\n770,730 -> 786,730\r\n22,11 -> 982,971\r\n395,316 -> 151,316\r\n301,420 -> 301,248\r\n10,10 -> 989,989\r\n637,358 -> 247,358\r\n932,341 -> 642,341\r\n162,594 -> 162,448\r\n51,946 -> 396,946\r\n591,253 -> 958,620\r\n567,849 -> 567,713\r\n879,910 -> 879,603\r\n889,642 -> 437,642\r\n669,528 -> 945,252\r\n644,237 -> 774,237\r\n488,870 -> 738,620\r\n692,388 -> 959,388\r\n506,17 -> 701,17\r\n663,514 -> 663,216\r\n684,862 -> 289,862\r\n511,235 -> 519,227\r\n866,940 -> 153,227\r\n381,518 -> 87,518\r\n837,573 -> 181,573\r\n337,191 -> 337,135\r\n324,573 -> 945,573\r\n449,800 -> 390,741\r\n763,378 -> 763,695\r\n24,457 -> 444,877\r\n267,875 -> 798,344\r\n724,848 -> 395,848\r\n931,322 -> 931,244\r\n426,241 -> 280,241\r\n175,879 -> 175,883\r\n496,158 -> 560,158\r\n899,319 -> 805,319\r\n799,424 -> 563,188\r\n958,388 -> 958,290\r\n558,95 -> 314,95\r\n768,646 -> 961,839\r\n246,534 -> 246,147\r\n808,720 -> 808,385\r\n912,147 -> 912,305\r\n670,676 -> 776,676\r\n534,594 -> 696,594\r\n736,768 -> 736,364\r\n377,784 -> 377,368\r\n799,105 -> 978,284\r\n763,575 -> 763,253\r\n581,205 -> 581,45\r\n932,782 -> 678,782\r\n400,950 -> 936,414\r\n68,616 -> 897,616\r\n399,662 -> 291,554\r\n354,397 -> 354,489\r\n219,276 -> 862,919\r\n115,138 -> 195,138\r\n863,326 -> 863,335\r\n884,130 -> 271,743\r\n986,148 -> 234,900\r\n254,186 -> 973,905\r\n975,971 -> 672,971\r\n122,533 -> 19,636\r\n316,512 -> 219,609\r\n113,480 -> 716,480\r\n483,540 -> 845,178`.split(\"\\n\")\r\n    );\r\n}\r\n"],"names":["$f5543be055ba0b53$export$6f2c20d74ce07f43","fn","$f5543be055ba0b53$export$bffa455ba8c619a6","arr","reduce","flat","toFlatten","concat","Array","isArray","$f5543be055ba0b53$export$bfe79f57e640a954","array","acc","val","undefined","$3c8f1a1c09db7dbb$var$log","args","console","log","document","querySelector","innerHTML","join","$3c8f1a1c09db7dbb$var$getInput","length","$3c8f1a1c09db7dbb$var$getTESTInput","$3c8f1a1c09db7dbb$var$inputArr","$3c8f1a1c09db7dbb$var$parseInput","map","line","matches","match","origin","x","parseInt","y","target","$3c8f1a1c09db7dbb$var$getPointsBetweenCoordinates","points","copyorigin","JSON","parse","stringify","warn","push","$3c8f1a1c09db7dbb$var$arrInUse","Object","values","filter","ventPoints","obj","amount"],"version":3,"file":"index.js.map"}